// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconServiceMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconServiceMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace falcon_svc_msg {

namespace {

const ::google::protobuf::Descriptor* CharManConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharManConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MacroOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MacroOptions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MacroOptions_AutoControl_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MacroOptions_PPS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MacroOptions_Ref10m_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MacroOptions_ExportFlags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FalconVisionConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FalconVisionConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSLManagerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSLManagerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraForkConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraForkConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSMonitorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSMonitorConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FalconUtilitiesConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FalconUtilitiesConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RTHopAnalysisConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RTHopAnalysisConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoSnapConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoSnapConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventHandlerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventHandlerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSFakerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSFakerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkyscraperConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkyscraperConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoiseTestConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoiseTestConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraScriptConfigMess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraScriptConfigMess_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoConfigMess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoConfigMess_reflection_ = NULL;
const ::google::protobuf::Descriptor* PentekConfigMess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PentekConfigMess_reflection_ = NULL;
const ::google::protobuf::Descriptor* PredTunerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PredTunerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PredTransceiverConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PredTransceiverConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SidekiqTransceiverConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SidekiqTransceiverConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MMSTunerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMSTunerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DFServiceConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DFServiceConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TechniqueConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TechniqueConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RulesEngineConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RulesEngineConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatabaseKeeperConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatabaseKeeperConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeplerUIConnectionConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeplerUIConnectionConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorStatusConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorStatusConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoTipperConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoTipperConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PreDClipperConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreDClipperConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* AmplifierConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AmplifierConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SiggenConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SiggenConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrPosConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrPosConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconServiceMessages_2eproto() {
  protobuf_AddDesc_FalconServiceMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconServiceMessages.proto");
  GOOGLE_CHECK(file != NULL);
  CharManConfig_descriptor_ = file->message_type(0);
  static const int CharManConfig_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, xtalkport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, snapextracount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, snapextramin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, snapextraconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, snapextradynamic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, sepriopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, sr_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, outputpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, esicount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, esilogpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, videoratefftsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, videoratedchz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, videoratemaxfft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, videoratethresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, videosyncthresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, rlversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, rldedup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, energyncoh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, energynnoncoh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, energythreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, energynon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, energynoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, energybw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, ofdmthresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, prithreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, snapextratargets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, esimodulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, esiwritepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, edwritepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, edlogpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, edcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, edthreshdb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, edspavg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, edfftsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, eddetbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, edmindetbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, edguardbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, edminuptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, edmindowntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, edoverlapth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, streamfiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, brainfile_),
  };
  CharManConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharManConfig_descriptor_,
      CharManConfig::default_instance_,
      CharManConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharManConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharManConfig));
  MacroOptions_descriptor_ = file->message_type(1);
  static const int MacroOptions_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, autocontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, ppsenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, refenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, iffrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, writeaux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, exportenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, videolength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, psdipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, psdperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, jpegperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, xmlperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, protectarch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, midasbundling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, remotethresh_),
  };
  MacroOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MacroOptions_descriptor_,
      MacroOptions::default_instance_,
      MacroOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacroOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MacroOptions));
  MacroOptions_AutoControl_descriptor_ = MacroOptions_descriptor_->enum_type(0);
  MacroOptions_PPS_descriptor_ = MacroOptions_descriptor_->enum_type(1);
  MacroOptions_Ref10m_descriptor_ = MacroOptions_descriptor_->enum_type(2);
  MacroOptions_ExportFlags_descriptor_ = MacroOptions_descriptor_->enum_type(3);
  FalconVisionConfig_descriptor_ = file->message_type(2);
  static const int FalconVisionConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconVisionConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconVisionConfig, readport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconVisionConfig, writeport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconVisionConfig, msgbuflen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconVisionConfig, xmlenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconVisionConfig, xmlclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconVisionConfig, xmlsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconVisionConfig, xmlpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconVisionConfig, xmlworkstation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconVisionConfig, xmlperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconVisionConfig, workstationwhitelist_),
  };
  FalconVisionConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FalconVisionConfig_descriptor_,
      FalconVisionConfig::default_instance_,
      FalconVisionConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconVisionConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconVisionConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FalconVisionConfig));
  GSLManagerConfig_descriptor_ = file->message_type(3);
  static const int GSLManagerConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSLManagerConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSLManagerConfig, dbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSLManagerConfig, dbuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSLManagerConfig, dbhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSLManagerConfig, globalsignaltimeout_),
  };
  GSLManagerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSLManagerConfig_descriptor_,
      GSLManagerConfig::default_instance_,
      GSLManagerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSLManagerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSLManagerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSLManagerConfig));
  ExtraForkConfig_descriptor_ = file->message_type(4);
  static const int ExtraForkConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkConfig, channels_),
  };
  ExtraForkConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraForkConfig_descriptor_,
      ExtraForkConfig::default_instance_,
      ExtraForkConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraForkConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraForkConfig));
  GPSMonitorConfig_descriptor_ = file->message_type(5);
  static const int GPSMonitorConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMonitorConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMonitorConfig, gpsserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMonitorConfig, gpsip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMonitorConfig, gpsport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMonitorConfig, gpsper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMonitorConfig, gpswritefile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMonitorConfig, gpsfileint_),
  };
  GPSMonitorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSMonitorConfig_descriptor_,
      GPSMonitorConfig::default_instance_,
      GPSMonitorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMonitorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMonitorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSMonitorConfig));
  FalconUtilitiesConfig_descriptor_ = file->message_type(6);
  static const int FalconUtilitiesConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconUtilitiesConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconUtilitiesConfig, archive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconUtilitiesConfig, delarchives_),
  };
  FalconUtilitiesConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FalconUtilitiesConfig_descriptor_,
      FalconUtilitiesConfig::default_instance_,
      FalconUtilitiesConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconUtilitiesConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FalconUtilitiesConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FalconUtilitiesConfig));
  RTHopAnalysisConfig_descriptor_ = file->message_type(7);
  static const int RTHopAnalysisConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHopAnalysisConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHopAnalysisConfig, scrypt_),
  };
  RTHopAnalysisConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RTHopAnalysisConfig_descriptor_,
      RTHopAnalysisConfig::default_instance_,
      RTHopAnalysisConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHopAnalysisConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHopAnalysisConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RTHopAnalysisConfig));
  GeoSnapConfig_descriptor_ = file->message_type(8);
  static const int GeoSnapConfig_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, geo_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, auto_launch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, temp_write_aux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, antenna_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, mission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, rx_path_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, rx_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, feed_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, feed_lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, feed_alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, system_foa_sigma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, system_toa_sigma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, desiredinterpolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, use_sv_keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, skip_camel_transfer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, default_geo_app_),
  };
  GeoSnapConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoSnapConfig_descriptor_,
      GeoSnapConfig::default_instance_,
      GeoSnapConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoSnapConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoSnapConfig));
  TGConfig_descriptor_ = file->message_type(9);
  static const int TGConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGConfig, geo_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGConfig, telem_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGConfig, geo_pri_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGConfig, state_timeout_),
  };
  TGConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGConfig_descriptor_,
      TGConfig::default_instance_,
      TGConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGConfig));
  EventHandlerConfig_descriptor_ = file->message_type(10);
  static const int EventHandlerConfig_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, xmlenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, xmlclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, xmlsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, xmlpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, xmlworkstation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, xmlperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, xmlgeothreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, xmlgeofilterfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, workstationwhitelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, telemtimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, geotimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, tagoverridefile_),
  };
  EventHandlerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventHandlerConfig_descriptor_,
      EventHandlerConfig::default_instance_,
      EventHandlerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHandlerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventHandlerConfig));
  GPSFakerConfig_descriptor_ = file->message_type(11);
  static const int GPSFakerConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFakerConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFakerConfig, gpsfile_),
  };
  GPSFakerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSFakerConfig_descriptor_,
      GPSFakerConfig::default_instance_,
      GPSFakerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFakerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFakerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSFakerConfig));
  SkyscraperConfig_descriptor_ = file->message_type(12);
  static const int SkyscraperConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkyscraperConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkyscraperConfig, directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkyscraperConfig, filename_),
  };
  SkyscraperConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkyscraperConfig_descriptor_,
      SkyscraperConfig::default_instance_,
      SkyscraperConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkyscraperConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkyscraperConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkyscraperConfig));
  NoiseTestConfig_descriptor_ = file->message_type(13);
  static const int NoiseTestConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseTestConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseTestConfig, options_),
  };
  NoiseTestConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoiseTestConfig_descriptor_,
      NoiseTestConfig::default_instance_,
      NoiseTestConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseTestConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoiseTestConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoiseTestConfig));
  ExtraScriptConfigMess_descriptor_ = file->message_type(14);
  static const int ExtraScriptConfigMess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraScriptConfigMess, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraScriptConfigMess, script_),
  };
  ExtraScriptConfigMess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraScriptConfigMess_descriptor_,
      ExtraScriptConfigMess::default_instance_,
      ExtraScriptConfigMess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraScriptConfigMess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraScriptConfigMess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraScriptConfigMess));
  NoConfigMess_descriptor_ = file->message_type(15);
  static const int NoConfigMess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoConfigMess, msgname_),
  };
  NoConfigMess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoConfigMess_descriptor_,
      NoConfigMess::default_instance_,
      NoConfigMess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoConfigMess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoConfigMess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoConfigMess));
  PentekConfigMess_descriptor_ = file->message_type(16);
  static const int PentekConfigMess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfigMess, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfigMess, txsamplerate_),
  };
  PentekConfigMess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PentekConfigMess_descriptor_,
      PentekConfigMess::default_instance_,
      PentekConfigMess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfigMess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PentekConfigMess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PentekConfigMess));
  PredTunerConfig_descriptor_ = file->message_type(17);
  static const int PredTunerConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTunerConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTunerConfig, numtuners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTunerConfig, arcfilenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTunerConfig, arcfilesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTunerConfig, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTunerConfig, starttunernum_),
  };
  PredTunerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PredTunerConfig_descriptor_,
      PredTunerConfig::default_instance_,
      PredTunerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTunerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTunerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PredTunerConfig));
  PredTransceiverConfig_descriptor_ = file->message_type(18);
  static const int PredTransceiverConfig_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, snapshotringcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, numtuners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, numtransmitters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, starttunernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, ipaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, hwtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, rxsamplerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, txsamplerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, usrpclocksource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, usrptimesource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, fft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, arcfilesecs_),
  };
  PredTransceiverConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PredTransceiverConfig_descriptor_,
      PredTransceiverConfig::default_instance_,
      PredTransceiverConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredTransceiverConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PredTransceiverConfig));
  SidekiqTransceiverConfig_descriptor_ = file->message_type(19);
  static const int SidekiqTransceiverConfig_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, snapshotringcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, rxa1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, rxa2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, rxb1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, rxb2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, txa1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, txa2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, txb1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, txb2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, ppca1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, ppca2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, ppcb1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, ppcb2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, sampleratea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, samplerateb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, energythresha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, energythreshb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, energythreshnuma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, energythreshnumb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, rxbuffersize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, debuglvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, externalreference_),
  };
  SidekiqTransceiverConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SidekiqTransceiverConfig_descriptor_,
      SidekiqTransceiverConfig::default_instance_,
      SidekiqTransceiverConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SidekiqTransceiverConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SidekiqTransceiverConfig));
  MMSTunerConfig_descriptor_ = file->message_type(20);
  static const int MMSTunerConfig_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, snapshotringcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, interface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, samplerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, mmsrcvrnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, usehwffts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, mmswatchdogenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, mmswatchdogpetdeltawarningthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, mmswatchdogpetinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, mmswatchdogtimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, xpipemonitorenabled_),
  };
  MMSTunerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMSTunerConfig_descriptor_,
      MMSTunerConfig::default_instance_,
      MMSTunerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMSTunerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMSTunerConfig));
  DFServiceConfig_descriptor_ = file->message_type(21);
  static const int DFServiceConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFServiceConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFServiceConfig, intercepttimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFServiceConfig, siguptimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFServiceConfig, sigdowntimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFServiceConfig, additionalbox1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFServiceConfig, additionalbox2_),
  };
  DFServiceConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DFServiceConfig_descriptor_,
      DFServiceConfig::default_instance_,
      DFServiceConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFServiceConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFServiceConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DFServiceConfig));
  TechniqueConfig_descriptor_ = file->message_type(22);
  static const int TechniqueConfig_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, samplerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, inputsamplerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, if_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, estimatedrfmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, overridechannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, capabilityid_),
  };
  TechniqueConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TechniqueConfig_descriptor_,
      TechniqueConfig::default_instance_,
      TechniqueConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TechniqueConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TechniqueConfig));
  RulesEngineConfig_descriptor_ = file->message_type(23);
  static const int RulesEngineConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RulesEngineConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RulesEngineConfig, xmlrules_),
  };
  RulesEngineConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RulesEngineConfig_descriptor_,
      RulesEngineConfig::default_instance_,
      RulesEngineConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RulesEngineConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RulesEngineConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RulesEngineConfig));
  DatabaseKeeperConfig_descriptor_ = file->message_type(24);
  static const int DatabaseKeeperConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseKeeperConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseKeeperConfig, writeinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseKeeperConfig, disablewrite_),
  };
  DatabaseKeeperConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatabaseKeeperConfig_descriptor_,
      DatabaseKeeperConfig::default_instance_,
      DatabaseKeeperConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseKeeperConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseKeeperConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatabaseKeeperConfig));
  KeplerUIConnectionConfig_descriptor_ = file->message_type(25);
  static const int KeplerUIConnectionConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerUIConnectionConfig, msgname_),
  };
  KeplerUIConnectionConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeplerUIConnectionConfig_descriptor_,
      KeplerUIConnectionConfig::default_instance_,
      KeplerUIConnectionConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerUIConnectionConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeplerUIConnectionConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeplerUIConnectionConfig));
  SensorStatusConfig_descriptor_ = file->message_type(26);
  static const int SensorStatusConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatusConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatusConfig, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatusConfig, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatusConfig, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatusConfig, siteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatusConfig, sigad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatusConfig, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatusConfig, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatusConfig, beamwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatusConfig, boresite_),
  };
  SensorStatusConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorStatusConfig_descriptor_,
      SensorStatusConfig::default_instance_,
      SensorStatusConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatusConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorStatusConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorStatusConfig));
  GeoTipperConfig_descriptor_ = file->message_type(27);
  static const int GeoTipperConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTipperConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTipperConfig, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTipperConfig, lookback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTipperConfig, autoadjust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTipperConfig, queryinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTipperConfig, tiptimeout_),
  };
  GeoTipperConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoTipperConfig_descriptor_,
      GeoTipperConfig::default_instance_,
      GeoTipperConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTipperConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoTipperConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoTipperConfig));
  PreDClipperConfig_descriptor_ = file->message_type(28);
  static const int PreDClipperConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreDClipperConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreDClipperConfig, filehost_),
  };
  PreDClipperConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreDClipperConfig_descriptor_,
      PreDClipperConfig::default_instance_,
      PreDClipperConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreDClipperConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreDClipperConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreDClipperConfig));
  AmplifierConfig_descriptor_ = file->message_type(29);
  static const int AmplifierConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmplifierConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmplifierConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmplifierConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmplifierConfig, port_),
  };
  AmplifierConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AmplifierConfig_descriptor_,
      AmplifierConfig::default_instance_,
      AmplifierConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmplifierConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmplifierConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AmplifierConfig));
  SiggenConfig_descriptor_ = file->message_type(30);
  static const int SiggenConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiggenConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiggenConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiggenConfig, chan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiggenConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiggenConfig, freqmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiggenConfig, powerdbm_),
  };
  SiggenConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SiggenConfig_descriptor_,
      SiggenConfig::default_instance_,
      SiggenConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiggenConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiggenConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SiggenConfig));
  CurrPosConfig_descriptor_ = file->message_type(31);
  static const int CurrPosConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrPosConfig, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrPosConfig, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrPosConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrPosConfig, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrPosConfig, ins_hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrPosConfig, ins_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrPosConfig, orientation_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrPosConfig, vector_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrPosConfig, sim_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrPosConfig, sim_lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrPosConfig, sim_alt_),
  };
  CurrPosConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrPosConfig_descriptor_,
      CurrPosConfig::default_instance_,
      CurrPosConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrPosConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrPosConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrPosConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconServiceMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharManConfig_descriptor_, &CharManConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MacroOptions_descriptor_, &MacroOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FalconVisionConfig_descriptor_, &FalconVisionConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSLManagerConfig_descriptor_, &GSLManagerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraForkConfig_descriptor_, &ExtraForkConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSMonitorConfig_descriptor_, &GPSMonitorConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FalconUtilitiesConfig_descriptor_, &FalconUtilitiesConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RTHopAnalysisConfig_descriptor_, &RTHopAnalysisConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoSnapConfig_descriptor_, &GeoSnapConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGConfig_descriptor_, &TGConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventHandlerConfig_descriptor_, &EventHandlerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSFakerConfig_descriptor_, &GPSFakerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkyscraperConfig_descriptor_, &SkyscraperConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoiseTestConfig_descriptor_, &NoiseTestConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraScriptConfigMess_descriptor_, &ExtraScriptConfigMess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoConfigMess_descriptor_, &NoConfigMess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PentekConfigMess_descriptor_, &PentekConfigMess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PredTunerConfig_descriptor_, &PredTunerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PredTransceiverConfig_descriptor_, &PredTransceiverConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SidekiqTransceiverConfig_descriptor_, &SidekiqTransceiverConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMSTunerConfig_descriptor_, &MMSTunerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DFServiceConfig_descriptor_, &DFServiceConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TechniqueConfig_descriptor_, &TechniqueConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RulesEngineConfig_descriptor_, &RulesEngineConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatabaseKeeperConfig_descriptor_, &DatabaseKeeperConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeplerUIConnectionConfig_descriptor_, &KeplerUIConnectionConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorStatusConfig_descriptor_, &SensorStatusConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoTipperConfig_descriptor_, &GeoTipperConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreDClipperConfig_descriptor_, &PreDClipperConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AmplifierConfig_descriptor_, &AmplifierConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SiggenConfig_descriptor_, &SiggenConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrPosConfig_descriptor_, &CurrPosConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconServiceMessages_2eproto() {
  delete CharManConfig::default_instance_;
  delete CharManConfig_reflection_;
  delete CharManConfig::_default_msgname_;
  delete CharManConfig::_default_snapextraconfig_;
  delete CharManConfig::_default_outputpath_;
  delete CharManConfig::_default_rlversion_;
  delete MacroOptions::default_instance_;
  delete MacroOptions_reflection_;
  delete MacroOptions::_default_sensorname_;
  delete FalconVisionConfig::default_instance_;
  delete FalconVisionConfig_reflection_;
  delete FalconVisionConfig::_default_msgname_;
  delete GSLManagerConfig::default_instance_;
  delete GSLManagerConfig_reflection_;
  delete GSLManagerConfig::_default_msgname_;
  delete ExtraForkConfig::default_instance_;
  delete ExtraForkConfig_reflection_;
  delete ExtraForkConfig::_default_msgname_;
  delete GPSMonitorConfig::default_instance_;
  delete GPSMonitorConfig_reflection_;
  delete GPSMonitorConfig::_default_msgname_;
  delete GPSMonitorConfig::_default_gpsserver_;
  delete FalconUtilitiesConfig::default_instance_;
  delete FalconUtilitiesConfig_reflection_;
  delete FalconUtilitiesConfig::_default_msgname_;
  delete FalconUtilitiesConfig::_default_archive_;
  delete FalconUtilitiesConfig::_default_delarchives_;
  delete RTHopAnalysisConfig::default_instance_;
  delete RTHopAnalysisConfig_reflection_;
  delete RTHopAnalysisConfig::_default_msgname_;
  delete RTHopAnalysisConfig::_default_scrypt_;
  delete GeoSnapConfig::default_instance_;
  delete GeoSnapConfig_reflection_;
  delete GeoSnapConfig::_default_msgname_;
  delete GeoSnapConfig::_default_geo_enabled_;
  delete GeoSnapConfig::_default_auto_launch_;
  delete GeoSnapConfig::_default_skip_camel_transfer_;
  delete TGConfig::default_instance_;
  delete TGConfig_reflection_;
  delete TGConfig::_default_msgname_;
  delete TGConfig::_default_geo_test_;
  delete EventHandlerConfig::default_instance_;
  delete EventHandlerConfig_reflection_;
  delete EventHandlerConfig::_default_msgname_;
  delete GPSFakerConfig::default_instance_;
  delete GPSFakerConfig_reflection_;
  delete GPSFakerConfig::_default_msgname_;
  delete SkyscraperConfig::default_instance_;
  delete SkyscraperConfig_reflection_;
  delete SkyscraperConfig::_default_msgname_;
  delete NoiseTestConfig::default_instance_;
  delete NoiseTestConfig_reflection_;
  delete NoiseTestConfig::_default_msgname_;
  delete ExtraScriptConfigMess::default_instance_;
  delete ExtraScriptConfigMess_reflection_;
  delete ExtraScriptConfigMess::_default_msgname_;
  delete NoConfigMess::default_instance_;
  delete NoConfigMess_reflection_;
  delete NoConfigMess::_default_msgname_;
  delete PentekConfigMess::default_instance_;
  delete PentekConfigMess_reflection_;
  delete PentekConfigMess::_default_msgname_;
  delete PredTunerConfig::default_instance_;
  delete PredTunerConfig_reflection_;
  delete PredTunerConfig::_default_msgname_;
  delete PredTransceiverConfig::default_instance_;
  delete PredTransceiverConfig_reflection_;
  delete PredTransceiverConfig::_default_msgname_;
  delete PredTransceiverConfig::_default_hwtype_;
  delete PredTransceiverConfig::_default_usrpclocksource_;
  delete PredTransceiverConfig::_default_usrptimesource_;
  delete PredTransceiverConfig::_default_fft_;
  delete SidekiqTransceiverConfig::default_instance_;
  delete SidekiqTransceiverConfig_reflection_;
  delete SidekiqTransceiverConfig::_default_msgname_;
  delete SidekiqTransceiverConfig::_default_cardid_;
  delete MMSTunerConfig::default_instance_;
  delete MMSTunerConfig_reflection_;
  delete MMSTunerConfig::_default_msgname_;
  delete DFServiceConfig::default_instance_;
  delete DFServiceConfig_reflection_;
  delete DFServiceConfig::_default_msgname_;
  delete TechniqueConfig::default_instance_;
  delete TechniqueConfig_reflection_;
  delete TechniqueConfig::_default_msgname_;
  delete TechniqueConfig::_default_capabilityid_;
  delete RulesEngineConfig::default_instance_;
  delete RulesEngineConfig_reflection_;
  delete RulesEngineConfig::_default_msgname_;
  delete DatabaseKeeperConfig::default_instance_;
  delete DatabaseKeeperConfig_reflection_;
  delete DatabaseKeeperConfig::_default_msgname_;
  delete KeplerUIConnectionConfig::default_instance_;
  delete KeplerUIConnectionConfig_reflection_;
  delete KeplerUIConnectionConfig::_default_msgname_;
  delete SensorStatusConfig::default_instance_;
  delete SensorStatusConfig_reflection_;
  delete SensorStatusConfig::_default_msgname_;
  delete GeoTipperConfig::default_instance_;
  delete GeoTipperConfig_reflection_;
  delete GeoTipperConfig::_default_msgname_;
  delete PreDClipperConfig::default_instance_;
  delete PreDClipperConfig_reflection_;
  delete PreDClipperConfig::_default_msgname_;
  delete AmplifierConfig::default_instance_;
  delete AmplifierConfig_reflection_;
  delete AmplifierConfig::_default_msgname_;
  delete SiggenConfig::default_instance_;
  delete SiggenConfig_reflection_;
  delete SiggenConfig::_default_msgname_;
  delete CurrPosConfig::default_instance_;
  delete CurrPosConfig_reflection_;
  delete CurrPosConfig::_default_msgname_;
}

void protobuf_AddDesc_FalconServiceMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::falcon_common_msg::protobuf_AddDesc_FalconCommonMessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033FalconServiceMessages.proto\022\016falcon_sv"
    "c_msg\032\032FalconCommonMessages.proto\"\300\010\n\rCh"
    "arManConfig\022 \n\007msgName\030\001 \001(\t:\017CHAR_MAN_C"
    "ONFIG\022\030\n\txtalkPort\030\002 \001(\005:\00532222\022\031\n\016snapE"
    "xtraCount\030\003 \001(\005:\0011\022\024\n\014snapExtraMin\030\004 \001(\005"
    "\0224\n\017snapExtraConfig\030\005 \001(\t:\033/user/config/"
    "snap_extra.cfg\022\030\n\020snapExtraDynamic\030\006 \001(\010"
    "\022\020\n\010sepriopt\030\007 \001(\010\022\r\n\005sr_to\030\010 \001(\005\022\026\n\nout"
    "putPath\030\t \001(\t:\00219\022\023\n\010esiCount\030\n \001(\005:\0016\022\022"
    "\n\nesiLogPath\030\013 \001(\t\022 \n\020videoRateFFTSize\030\014"
    " \001(\005:\006131072\022\032\n\rvideoRateDCHz\030\r \001(\002:\003100"
    "\022\033\n\017videoRateMaxFFT\030\016 \001(\005:\00264\022\034\n\017videoRa"
    "teThresh\030\017 \001(\002:\0031.5\022\034\n\017videoSyncThresh\030\020"
    " \001(\002:\0032.5\022\031\n\trlVersion\030\021 \001(\t:\006NORMAL\022\025\n\007"
    "rlDedup\030\022 \001(\010:\004true\022\026\n\nenergyNcoh\030\023 \001(\005:"
    "\00220\022\032\n\renergyNnoncoh\030\024 \001(\005:\003100\022\032\n\017energ"
    "yThreshold\030\025 \001(\002:\0010\022\024\n\tenergyNon\030\026 \001(\005:\001"
    "2\022\025\n\nenergyNoff\030\027 \001(\005:\0012\022\027\n\010energyBW\030\030 \001"
    "(\002:\00520000\022\025\n\nofdmthresh\030\031 \001(\002:\0015\022\030\n\014priT"
    "hreshold\030\032 \001(\002:\00211\022\030\n\020snapExtraTargets\030\033"
    " \003(\t\022\026\n\016esiModulations\030\034 \001(\t\022\026\n\014esiWrite"
    "Path\030\035 \001(\t:\000\022\025\n\013edWritePath\030\036 \001(\t:\000\022\023\n\te"
    "dLogPath\030\037 \001(\t:\000\022\022\n\007edCount\030  \001(\005:\0016\022\022\n\n"
    "edThreshdB\030! \001(\005\022\023\n\007edSpAvg\030\" \001(\005:\00250\022\027\n"
    "\tedFFTSize\030# \001(\005:\0048192\022\017\n\007edDetBW\030$ \001(\005\022"
    "\030\n\nedMinDetBW\030% \001(\005:\0048000\022\024\n\tedGuardBW\030&"
    " \001(\005:\0010\022\023\n\013edMinUpTime\030\' \001(\005\022\025\n\redMinDow"
    "nTime\030( \001(\005\022\030\n\013edOverlapTh\030) \001(\002:\0030.5\022\032\n"
    "\013streamFiles\030* \001(\010:\005false\022\021\n\tbrainFile\030+"
    " \001(\t\"\350\005\n\014MacroOptions\022=\n\013autoControl\030\001 \001"
    "(\0162(.falcon_svc_msg.MacroOptions.AutoCon"
    "trol\022<\n\tppsEnable\030\002 \001(\0162 .falcon_svc_msg"
    ".MacroOptions.PPS:\007PPS_OFF\022\?\n\trefEnable\030"
    "\003 \001(\0162#.falcon_svc_msg.MacroOptions.Ref1"
    "0m:\007REF_OFF\022\035\n\013ifFrequency\030\004 \001(\001:\010300000"
    "00\022\024\n\010writeAux\030\005 \001(\005:\00212\022\027\n\014exportEnable"
    "\030\006 \001(\005:\0010\022\027\n\013videoLength\030\007 \001(\005:\00220\022\032\n\nse"
    "nsorName\030\010 \001(\t:\006sensor\022\026\n\014psdIPAddress\030\t"
    " \001(\t:\000\022\026\n\tpsdPeriod\030\n \001(\005:\003200\022\026\n\njpegPe"
    "riod\030\013 \001(\005:\00250\022\024\n\txmlPeriod\030\014 \001(\005:\0015\022\026\n\013"
    "protectArch\030\r \001(\005:\0010\022\034\n\rmidasBundling\030\016 "
    "\001(\010:\005false\022\030\n\014remoteThresh\030\017 \001(\005:\00210\":\n\013"
    "AutoControl\022\014\n\010HEADLESS\020\000\022\016\n\nCONTROLLED\020"
    "\001\022\r\n\tAUTO_MODE\020\002\"\036\n\003PPS\022\013\n\007PPS_OFF\020\000\022\n\n\006"
    "PPS_ON\020\001\"!\n\006Ref10m\022\013\n\007REF_OFF\020\000\022\n\n\006REF_O"
    "N\020\001\"j\n\013ExportFlags\022\017\n\013ENABLE_NONE\020\000\022\020\n\014E"
    "NABLE_VIDEO\020\001\022\020\n\014ENABLE_JPEGS\020\002\022\016\n\nENABL"
    "E_PSD\020\004\022\026\n\022ENABLE_WORKSTATION\020\010\"\205\002\n\022Falc"
    "onVisionConfig\022%\n\007msgName\030\001 \001(\t:\024FALCON_"
    "VISION_CONFIG\022\020\n\010readPort\030\002 \001(\005\022\021\n\twrite"
    "Port\030\003 \001(\005\022\021\n\tmsgBufLen\030\004 \001(\005\022\021\n\txmlEnab"
    "le\030\005 \001(\010\022\020\n\010xmlClass\030\006 \001(\t\022\021\n\txmlSource\030"
    "\007 \001(\t\022\017\n\007xmlPath\030\010 \001(\t\022\026\n\016xmlWorkstation"
    "\030\t \001(\t\022\021\n\txmlPeriod\030\n \001(\005\022\034\n\024workstation"
    "Whitelist\030\013 \001(\t\"\204\001\n\020GSLManagerConfig\022#\n\007"
    "msgName\030\001 \001(\t:\022GSL_MANAGER_CONFIG\022\016\n\006dbn"
    "ame\030\002 \001(\t\022\016\n\006dbuser\030\003 \001(\t\022\016\n\006dbhost\030\004 \001("
    "\t\022\033\n\023globalSignalTimeout\030\005 \001(\005\"l\n\017ExtraF"
    "orkConfig\022\"\n\007msgName\030\001 \001(\t:\021EXTRA_FORK_C"
    "ONFIG\0225\n\010channels\030\002 \003(\0132#.falcon_common_"
    "msg.ExtraForkChannel\"\263\001\n\020GPSMonitorConfi"
    "g\022#\n\007msgName\030\001 \001(\t:\022GPS_MONITOR_CONFIG\022\026"
    "\n\tgpsServer\030\002 \001(\t:\003OFF\022\r\n\005GPSIP\030\003 \001(\t\022\017\n"
    "\007gpsPort\030\004 \001(\005\022\021\n\006gpsPer\030\005 \001(\005:\0015\022\027\n\014gps"
    "WriteFile\030\006 \001(\005:\0011\022\026\n\ngpsFileInt\030\007 \001(\005:\002"
    "10\"q\n\025FalconUtilitiesConfig\022(\n\007msgName\030\001"
    " \001(\t:\027FALCON_UTILITIES_CONFIG\022\024\n\007archive"
    "\030\002 \001(\t:\003OFF\022\030\n\013delArchives\030\003 \001(\t:\003OFF\"g\n"
    "\023RTHopAnalysisConfig\022&\n\007msgName\030\001 \001(\t:\025R"
    "THOP_ANALYSIS_CONFIG\022(\n\006scrypt\030\002 \001(\t:\030/u"
    "ser/scrypts/rthops.xml\"\332\003\n\rGeoSnapConfig"
    "\022 \n\007msgName\030\001 \001(\t:\017GEO_SNAP_CONFIG\022\030\n\013ge"
    "o_enabled\030\002 \001(\t:\003OFF\022\027\n\013auto_launch\030\003 \001("
    "\t:\002ON\022\026\n\016temp_write_aux\030\004 \001(\005\022\017\n\007antenna"
    "\030\005 \001(\t\022\017\n\007mission\030\006 \001(\t\022\014\n\004path\030\007 \001(\t\022\025\n"
    "\rrx_path_delay\030\010 \001(\005\022\017\n\007rx_site\030\t \001(\005\022\020\n"
    "\010feed_lat\030\n \001(\002\022\020\n\010feed_lon\030\013 \001(\002\022\020\n\010fee"
    "d_alt\030\014 \001(\002\022\030\n\020system_foa_sigma\030\r \001(\002\022\030\n"
    "\020system_toa_sigma\030\016 \001(\002\022\034\n\024desiredinterp"
    "olation\030\017 \001(\t\022\027\n\017use_sv_keywords\030\020 \001(\005\022 "
    "\n\023skip_camel_transfer\030\021 \001(\t:\003OFF\022\014\n\004posx"
    "\030\022 \001(\002\022\014\n\004posy\030\023 \001(\002\022\014\n\004posz\030\024 \001(\002\022\027\n\017de"
    "fault_geo_app\030\025 \001(\t\"\212\001\n\010TGConfig\022\032\n\007msgN"
    "ame\030\001 \001(\t:\tTG_CONFIG\022\025\n\010geo_test\030\002 \001(\t:\003"
    "OFF\022\032\n\rtelem_timeout\030\003 \001(\005:\003400\022\024\n\014geo_p"
    "ri_file\030\004 \001(\t\022\031\n\rstate_timeout\030\005 \001(\005:\00260"
    "\"\315\002\n\022EventHandlerConfig\022%\n\007msgName\030\001 \001(\t"
    ":\024EVENT_HANDLER_CONFIG\022\021\n\txmlEnable\030\002 \001("
    "\010\022\020\n\010xmlClass\030\003 \001(\t\022\021\n\txmlSource\030\004 \001(\t\022\017"
    "\n\007xmlPath\030\005 \001(\t\022\026\n\016xmlWorkstation\030\006 \001(\t\022"
    "\021\n\txmlPeriod\030\007 \001(\005\022\027\n\017xmlGeoThreshold\030\010 "
    "\001(\005\022\030\n\020xmlGeoFilterFile\030\t \001(\t\022\034\n\024worksta"
    "tionWhitelist\030\n \001(\t\022\031\n\014telemTimeout\030\013 \001("
    "\005:\003300\022\027\n\ngeoTimeout\030\014 \001(\005:\003300\022\027\n\017tagOv"
    "errideFile\030\r \001(\t\"D\n\016GPSFakerConfig\022!\n\007ms"
    "gName\030\001 \001(\t:\020GPS_FAKER_CONFIG\022\017\n\007gpsFile"
    "\030\002 \001(\t\"[\n\020SkyscraperConfig\022\"\n\007msgName\030\001 "
    "\001(\t:\021SKYSCRAPER_CONFIG\022\021\n\tdirectory\030\002 \001("
    "\t\022\020\n\010filename\030\003 \001(\t\"d\n\017NoiseTestConfig\022\""
    "\n\007msgName\030\001 \001(\t:\021NOISE_TEST_CONFIG\022-\n\007op"
    "tions\030\002 \001(\0132\034.falcon_svc_msg.MacroOption"
    "s\"O\n\025ExtraScriptConfigMess\022&\n\007msgName\030\001 "
    "\001(\t:\025EXTRASCRIPTCONFIGMESS\022\016\n\006script\030\002 \001"
    "(\t\"-\n\014NoConfigMess\022\035\n\007msgName\030\001 \001(\t:\014NOC"
    "ONFIGMESS\"P\n\020PentekConfigMess\022&\n\007msgName"
    "\030\001 \001(\t:\025EXTRASCRIPTCONFIGMESS\022\024\n\014txSampl"
    "eRate\030\002 \001(\002\"\227\001\n\017PredTunerConfig\022!\n\007msgNa"
    "me\030\001 \001(\t:\020PREDTUNER_CONFIG\022\021\n\tnumTuners\030"
    "\002 \001(\005\022\022\n\narcfilenum\030\003 \001(\005\022\023\n\013arcfilesize"
    "\030\004 \001(\005\022\016\n\006config\030\005 \001(\t\022\025\n\rstartTunerNum\030"
    "\006 \001(\005\"\365\002\n\025PredTransceiverConfig\022#\n\007msgNa"
    "me\030\001 \001(\t:\022TRANSCEIVER_CONFIG\022 \n\024snapshot"
    "RingCapacity\030\002 \001(\005:\00250\022\021\n\tnumTuners\030\003 \001("
    "\005\022\027\n\017numTransmitters\030\004 \001(\005\022\025\n\rstartTuner"
    "Num\030\005 \001(\005\022\016\n\006ipaddr\030\006 \001(\t\022\024\n\006hwType\030\007 \001("
    "\t:\004USRP\022\035\n\014rxSampleRate\030\010 \001(\002:\0072.5e+07\022\033"
    "\n\014txSampleRate\030\t \001(\002:\0051e+08\022!\n\017usrpClock"
    "Source\030\n \001(\t:\010internal\022 \n\016usrpTimeSource"
    "\030\013 \001(\t:\010internal\022\022\n\003fft\030\014 \001(\t:\005false\022\027\n\013"
    "arcFileSecs\030\r \001(\002:\002-1\"\342\004\n\030SidekiqTransce"
    "iverConfig\022*\n\007msgName\030\001 \001(\t:\031SIDEKIQTRAN"
    "SCEIVER_CONFIG\022 \n\024snapshotRingCapacity\030\002"
    " \001(\005:\00250\022\020\n\004rxA1\030\003 \001(\005:\002-1\022\020\n\004rxA2\030\004 \001(\005"
    ":\002-1\022\020\n\004rxB1\030\005 \001(\005:\002-1\022\020\n\004rxB2\030\006 \001(\005:\002-1"
    "\022\020\n\004txA1\030\007 \001(\005:\002-1\022\020\n\004txA2\030\010 \001(\005:\002-1\022\020\n\004"
    "txB1\030\t \001(\005:\002-1\022\020\n\004txB2\030\n \001(\005:\002-1\022\024\n\005ppcA"
    "1\030\013 \001(\010:\005false\022\024\n\005ppcA2\030\014 \001(\010:\005false\022\024\n\005"
    "ppcB1\030\r \001(\010:\005false\022\024\n\005ppcB2\030\016 \001(\010:\005false"
    "\022\021\n\006cardID\030\017 \001(\t:\0010\022\032\n\013sampleRateA\030\020 \001(\002"
    ":\0055e+07\022\032\n\013sampleRateB\030\021 \001(\002:\0055e+07\022\032\n\re"
    "nergyThreshA\030\022 \001(\002:\003-70\022\032\n\renergyThreshB"
    "\030\023 \001(\002:\003-70\022\035\n\020energyThreshNumA\030\024 \001(\005:\0032"
    "00\022\035\n\020energyThreshNumB\030\025 \001(\005:\003200\022\031\n\014rxB"
    "ufferSize\030\026 \001(\005:\003512\022\023\n\010debuglvl\030\027 \001(\005:\001"
    "0\022\037\n\021externalReference\030\030 \001(\010:\004true\"\222\003\n\016M"
    "MSTunerConfig\022\037\n\007msgName\030\001 \001(\t:\016MMSTUNER"
    "CONFIG\022 \n\024snapshotRingCapacity\030\002 \001(\005:\00250"
    "\022\017\n\007channel\030\003 \001(\005\022\n\n\002ip\030\004 \001(\t\022\021\n\tinterfa"
    "ce\030\005 \001(\t\022\021\n\tbandwidth\030\006 \001(\002\022\022\n\nsampleRat"
    "e\030\007 \001(\002\022\022\n\nmmsRcvrNum\030\010 \001(\005\022\030\n\tusehwffts"
    "\030\t \001(\010:\005false\022 \n\022mmsWatchdogEnabled\030\n \001("
    "\010:\004true\022/\n#mmsWatchdogPetDeltaWarningThr"
    "eshold\030\013 \001(\002:\00220\022!\n\026mmsWatchdogPetInterv"
    "al\030\014 \001(\002:\0015\022\036\n\022mmsWatchdogTimeout\030\r \001(\005:"
    "\00230\022\"\n\023xpipemonitorEnabled\030\016 \001(\010:\005false\""
    "\273\001\n\017DFServiceConfig\022 \n\007msgName\030\001 \001(\t:\017DF"
    "SERVICECONFIG\022\035\n\020interceptTimeout\030\002 \001(\005:"
    "\003300\022\032\n\014sigupTimeout\030\003 \001(\005:\0047200\022\033\n\016sigd"
    "ownTimeout\030\004 \001(\005:\003120\022\026\n\016additionalBox1\030"
    "\005 \001(\t\022\026\n\016additionalBox2\030\006 \001(\t\"\234\002\n\017Techni"
    "queConfig\022 \n\007msgName\030\001 \001(\t:\017TECHNIQUECON"
    "FIG\022\020\n\010platform\030\002 \001(\t\022\016\n\006method\030\003 \001(\t\022\016\n"
    "\006script\030\004 \001(\t\022\022\n\nsamplerate\030\005 \001(\002\022\027\n\017inp"
    "utsamplerate\030\006 \001(\002\022\014\n\004host\030\007 \001(\t\022\014\n\004port"
    "\030\010 \001(\005\022\022\n\007if_freq\030\t \001(\002:\0010\022\033\n\016estimatedR"
    "FMHz\030\n \001(\002:\003433\022\033\n\017overrideChannel\030\013 \001(\005"
    ":\002-1\022\036\n\014capabilityId\030\014 \001(\t:\010<DERIVE>\"I\n\021"
    "RulesEngineConfig\022\"\n\007msgName\030\001 \001(\t:\021RULE"
    "SENGINECONFIG\022\020\n\010xmlRules\030\002 \003(\t\"t\n\024Datab"
    "aseKeeperConfig\022%\n\007msgName\030\001 \001(\t:\024DATABA"
    "SEKEEPERCONFIG\022\030\n\rwriteInterval\030\002 \001(\005:\0011"
    "\022\033\n\014disableWrite\030\003 \001(\010:\005false\"E\n\030KeplerU"
    "IConnectionConfig\022)\n\007msgName\030\001 \001(\t:\030KEPL"
    "ERUICONNECTIONCONFIG\"\310\001\n\022SensorStatusCon"
    "fig\022#\n\007msgName\030\001 \001(\t:\022SENSORSTATUSCONFIG"
    "\022\013\n\003lat\030\002 \001(\002\022\013\n\003lon\030\003 \001(\002\022\013\n\003alt\030\004 \001(\002\022"
    "\016\n\006siteId\030\005 \001(\t\022\r\n\005sigAd\030\006 \001(\t\022\021\n\televat"
    "ion\030\007 \001(\002\022\017\n\007azimuth\030\010 \001(\002\022\021\n\tbeamWidth\030"
    "\t \001(\002\022\020\n\010boreSite\030\n \001(\002\"\250\001\n\017GeoTipperCon"
    "fig\022 \n\007msgName\030\001 \001(\t:\017GEOTIPPERCONFIG\022\022\n"
    "\nsensorName\030\002 \003(\t\022\023\n\010lookBack\030\003 \001(\003:\0012\022\031"
    "\n\nautoAdjust\030\004 \001(\010:\005false\022\030\n\rqueryInterv"
    "al\030\005 \001(\003:\0011\022\025\n\ntipTimeout\030\006 \001(\003:\0012\"I\n\021Pr"
    "eDClipperConfig\022\"\n\007msgName\030\001 \001(\t:\021PREDCL"
    "IPPERCONFIG\022\020\n\010fileHost\030\002 \001(\t\"[\n\017Amplifi"
    "erConfig\022 \n\007msgName\030\001 \001(\t:\017AMPLIFIERCONF"
    "IG\022\014\n\004name\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030\004 \001"
    "(\005\"x\n\014SiggenConfig\022\035\n\007msgName\030\001 \001(\t:\014SIG"
    "GENCONFIG\022\014\n\004type\030\002 \001(\t\022\014\n\004chan\030\003 \001(\005\022\n\n"
    "\002ip\030\004 \001(\t\022\017\n\007freqMHz\030\005 \001(\002\022\020\n\010powerdBm\030\006"
    " \001(\002\"\373\001\n\rCurrPosConfig\022\036\n\007msgName\030\001 \001(\t:"
    "\rCURRPOSCONFIG\022\020\n\010hostname\030\002 \001(\t\022\014\n\004port"
    "\030\003 \001(\005\022\016\n\006method\030\004 \001(\t\022\024\n\014ins_hostname\030\005"
    " \001(\t\022\020\n\010ins_port\030\006 \001(\005\022!\n\022orientation_en"
    "able\030\007 \001(\010:\005false\022\034\n\rvector_enable\030\010 \001(\010"
    ":\005false\022\017\n\007sim_lat\030\t \001(\002\022\017\n\007sim_lon\030\n \001("
    "\002\022\017\n\007sim_alt\030\013 \001(\002B\025\n\023fv.protos.kepsviso"
    "r", 7481);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconServiceMessages.proto", &protobuf_RegisterTypes);
  CharManConfig::_default_msgname_ =
      new ::std::string("CHAR_MAN_CONFIG", 15);
  CharManConfig::_default_snapextraconfig_ =
      new ::std::string("/user/config/snap_extra.cfg", 27);
  CharManConfig::_default_outputpath_ =
      new ::std::string("19", 2);
  CharManConfig::_default_rlversion_ =
      new ::std::string("NORMAL", 6);
  CharManConfig::default_instance_ = new CharManConfig();
  MacroOptions::_default_sensorname_ =
      new ::std::string("sensor", 6);
  MacroOptions::default_instance_ = new MacroOptions();
  FalconVisionConfig::_default_msgname_ =
      new ::std::string("FALCON_VISION_CONFIG", 20);
  FalconVisionConfig::default_instance_ = new FalconVisionConfig();
  GSLManagerConfig::_default_msgname_ =
      new ::std::string("GSL_MANAGER_CONFIG", 18);
  GSLManagerConfig::default_instance_ = new GSLManagerConfig();
  ExtraForkConfig::_default_msgname_ =
      new ::std::string("EXTRA_FORK_CONFIG", 17);
  ExtraForkConfig::default_instance_ = new ExtraForkConfig();
  GPSMonitorConfig::_default_msgname_ =
      new ::std::string("GPS_MONITOR_CONFIG", 18);
  GPSMonitorConfig::_default_gpsserver_ =
      new ::std::string("OFF", 3);
  GPSMonitorConfig::default_instance_ = new GPSMonitorConfig();
  FalconUtilitiesConfig::_default_msgname_ =
      new ::std::string("FALCON_UTILITIES_CONFIG", 23);
  FalconUtilitiesConfig::_default_archive_ =
      new ::std::string("OFF", 3);
  FalconUtilitiesConfig::_default_delarchives_ =
      new ::std::string("OFF", 3);
  FalconUtilitiesConfig::default_instance_ = new FalconUtilitiesConfig();
  RTHopAnalysisConfig::_default_msgname_ =
      new ::std::string("RTHOP_ANALYSIS_CONFIG", 21);
  RTHopAnalysisConfig::_default_scrypt_ =
      new ::std::string("/user/scrypts/rthops.xml", 24);
  RTHopAnalysisConfig::default_instance_ = new RTHopAnalysisConfig();
  GeoSnapConfig::_default_msgname_ =
      new ::std::string("GEO_SNAP_CONFIG", 15);
  GeoSnapConfig::_default_geo_enabled_ =
      new ::std::string("OFF", 3);
  GeoSnapConfig::_default_auto_launch_ =
      new ::std::string("ON", 2);
  GeoSnapConfig::_default_skip_camel_transfer_ =
      new ::std::string("OFF", 3);
  GeoSnapConfig::default_instance_ = new GeoSnapConfig();
  TGConfig::_default_msgname_ =
      new ::std::string("TG_CONFIG", 9);
  TGConfig::_default_geo_test_ =
      new ::std::string("OFF", 3);
  TGConfig::default_instance_ = new TGConfig();
  EventHandlerConfig::_default_msgname_ =
      new ::std::string("EVENT_HANDLER_CONFIG", 20);
  EventHandlerConfig::default_instance_ = new EventHandlerConfig();
  GPSFakerConfig::_default_msgname_ =
      new ::std::string("GPS_FAKER_CONFIG", 16);
  GPSFakerConfig::default_instance_ = new GPSFakerConfig();
  SkyscraperConfig::_default_msgname_ =
      new ::std::string("SKYSCRAPER_CONFIG", 17);
  SkyscraperConfig::default_instance_ = new SkyscraperConfig();
  NoiseTestConfig::_default_msgname_ =
      new ::std::string("NOISE_TEST_CONFIG", 17);
  NoiseTestConfig::default_instance_ = new NoiseTestConfig();
  ExtraScriptConfigMess::_default_msgname_ =
      new ::std::string("EXTRASCRIPTCONFIGMESS", 21);
  ExtraScriptConfigMess::default_instance_ = new ExtraScriptConfigMess();
  NoConfigMess::_default_msgname_ =
      new ::std::string("NOCONFIGMESS", 12);
  NoConfigMess::default_instance_ = new NoConfigMess();
  PentekConfigMess::_default_msgname_ =
      new ::std::string("EXTRASCRIPTCONFIGMESS", 21);
  PentekConfigMess::default_instance_ = new PentekConfigMess();
  PredTunerConfig::_default_msgname_ =
      new ::std::string("PREDTUNER_CONFIG", 16);
  PredTunerConfig::default_instance_ = new PredTunerConfig();
  PredTransceiverConfig::_default_msgname_ =
      new ::std::string("TRANSCEIVER_CONFIG", 18);
  PredTransceiverConfig::_default_hwtype_ =
      new ::std::string("USRP", 4);
  PredTransceiverConfig::_default_usrpclocksource_ =
      new ::std::string("internal", 8);
  PredTransceiverConfig::_default_usrptimesource_ =
      new ::std::string("internal", 8);
  PredTransceiverConfig::_default_fft_ =
      new ::std::string("false", 5);
  PredTransceiverConfig::default_instance_ = new PredTransceiverConfig();
  SidekiqTransceiverConfig::_default_msgname_ =
      new ::std::string("SIDEKIQTRANSCEIVER_CONFIG", 25);
  SidekiqTransceiverConfig::_default_cardid_ =
      new ::std::string("0", 1);
  SidekiqTransceiverConfig::default_instance_ = new SidekiqTransceiverConfig();
  MMSTunerConfig::_default_msgname_ =
      new ::std::string("MMSTUNERCONFIG", 14);
  MMSTunerConfig::default_instance_ = new MMSTunerConfig();
  DFServiceConfig::_default_msgname_ =
      new ::std::string("DFSERVICECONFIG", 15);
  DFServiceConfig::default_instance_ = new DFServiceConfig();
  TechniqueConfig::_default_msgname_ =
      new ::std::string("TECHNIQUECONFIG", 15);
  TechniqueConfig::_default_capabilityid_ =
      new ::std::string("<DERIVE>", 8);
  TechniqueConfig::default_instance_ = new TechniqueConfig();
  RulesEngineConfig::_default_msgname_ =
      new ::std::string("RULESENGINECONFIG", 17);
  RulesEngineConfig::default_instance_ = new RulesEngineConfig();
  DatabaseKeeperConfig::_default_msgname_ =
      new ::std::string("DATABASEKEEPERCONFIG", 20);
  DatabaseKeeperConfig::default_instance_ = new DatabaseKeeperConfig();
  KeplerUIConnectionConfig::_default_msgname_ =
      new ::std::string("KEPLERUICONNECTIONCONFIG", 24);
  KeplerUIConnectionConfig::default_instance_ = new KeplerUIConnectionConfig();
  SensorStatusConfig::_default_msgname_ =
      new ::std::string("SENSORSTATUSCONFIG", 18);
  SensorStatusConfig::default_instance_ = new SensorStatusConfig();
  GeoTipperConfig::_default_msgname_ =
      new ::std::string("GEOTIPPERCONFIG", 15);
  GeoTipperConfig::default_instance_ = new GeoTipperConfig();
  PreDClipperConfig::_default_msgname_ =
      new ::std::string("PREDCLIPPERCONFIG", 17);
  PreDClipperConfig::default_instance_ = new PreDClipperConfig();
  AmplifierConfig::_default_msgname_ =
      new ::std::string("AMPLIFIERCONFIG", 15);
  AmplifierConfig::default_instance_ = new AmplifierConfig();
  SiggenConfig::_default_msgname_ =
      new ::std::string("SIGGENCONFIG", 12);
  SiggenConfig::default_instance_ = new SiggenConfig();
  CurrPosConfig::_default_msgname_ =
      new ::std::string("CURRPOSCONFIG", 13);
  CurrPosConfig::default_instance_ = new CurrPosConfig();
  CharManConfig::default_instance_->InitAsDefaultInstance();
  MacroOptions::default_instance_->InitAsDefaultInstance();
  FalconVisionConfig::default_instance_->InitAsDefaultInstance();
  GSLManagerConfig::default_instance_->InitAsDefaultInstance();
  ExtraForkConfig::default_instance_->InitAsDefaultInstance();
  GPSMonitorConfig::default_instance_->InitAsDefaultInstance();
  FalconUtilitiesConfig::default_instance_->InitAsDefaultInstance();
  RTHopAnalysisConfig::default_instance_->InitAsDefaultInstance();
  GeoSnapConfig::default_instance_->InitAsDefaultInstance();
  TGConfig::default_instance_->InitAsDefaultInstance();
  EventHandlerConfig::default_instance_->InitAsDefaultInstance();
  GPSFakerConfig::default_instance_->InitAsDefaultInstance();
  SkyscraperConfig::default_instance_->InitAsDefaultInstance();
  NoiseTestConfig::default_instance_->InitAsDefaultInstance();
  ExtraScriptConfigMess::default_instance_->InitAsDefaultInstance();
  NoConfigMess::default_instance_->InitAsDefaultInstance();
  PentekConfigMess::default_instance_->InitAsDefaultInstance();
  PredTunerConfig::default_instance_->InitAsDefaultInstance();
  PredTransceiverConfig::default_instance_->InitAsDefaultInstance();
  SidekiqTransceiverConfig::default_instance_->InitAsDefaultInstance();
  MMSTunerConfig::default_instance_->InitAsDefaultInstance();
  DFServiceConfig::default_instance_->InitAsDefaultInstance();
  TechniqueConfig::default_instance_->InitAsDefaultInstance();
  RulesEngineConfig::default_instance_->InitAsDefaultInstance();
  DatabaseKeeperConfig::default_instance_->InitAsDefaultInstance();
  KeplerUIConnectionConfig::default_instance_->InitAsDefaultInstance();
  SensorStatusConfig::default_instance_->InitAsDefaultInstance();
  GeoTipperConfig::default_instance_->InitAsDefaultInstance();
  PreDClipperConfig::default_instance_->InitAsDefaultInstance();
  AmplifierConfig::default_instance_->InitAsDefaultInstance();
  SiggenConfig::default_instance_->InitAsDefaultInstance();
  CurrPosConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconServiceMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconServiceMessages_2eproto {
  StaticDescriptorInitializer_FalconServiceMessages_2eproto() {
    protobuf_AddDesc_FalconServiceMessages_2eproto();
  }
} static_descriptor_initializer_FalconServiceMessages_2eproto_;

// ===================================================================

::std::string* CharManConfig::_default_msgname_ = NULL;
::std::string* CharManConfig::_default_snapextraconfig_ = NULL;
::std::string* CharManConfig::_default_outputpath_ = NULL;
::std::string* CharManConfig::_default_rlversion_ = NULL;
#ifndef _MSC_VER
const int CharManConfig::kMsgNameFieldNumber;
const int CharManConfig::kXtalkPortFieldNumber;
const int CharManConfig::kSnapExtraCountFieldNumber;
const int CharManConfig::kSnapExtraMinFieldNumber;
const int CharManConfig::kSnapExtraConfigFieldNumber;
const int CharManConfig::kSnapExtraDynamicFieldNumber;
const int CharManConfig::kSeprioptFieldNumber;
const int CharManConfig::kSrToFieldNumber;
const int CharManConfig::kOutputPathFieldNumber;
const int CharManConfig::kEsiCountFieldNumber;
const int CharManConfig::kEsiLogPathFieldNumber;
const int CharManConfig::kVideoRateFFTSizeFieldNumber;
const int CharManConfig::kVideoRateDCHzFieldNumber;
const int CharManConfig::kVideoRateMaxFFTFieldNumber;
const int CharManConfig::kVideoRateThreshFieldNumber;
const int CharManConfig::kVideoSyncThreshFieldNumber;
const int CharManConfig::kRlVersionFieldNumber;
const int CharManConfig::kRlDedupFieldNumber;
const int CharManConfig::kEnergyNcohFieldNumber;
const int CharManConfig::kEnergyNnoncohFieldNumber;
const int CharManConfig::kEnergyThresholdFieldNumber;
const int CharManConfig::kEnergyNonFieldNumber;
const int CharManConfig::kEnergyNoffFieldNumber;
const int CharManConfig::kEnergyBWFieldNumber;
const int CharManConfig::kOfdmthreshFieldNumber;
const int CharManConfig::kPriThresholdFieldNumber;
const int CharManConfig::kSnapExtraTargetsFieldNumber;
const int CharManConfig::kEsiModulationsFieldNumber;
const int CharManConfig::kEsiWritePathFieldNumber;
const int CharManConfig::kEdWritePathFieldNumber;
const int CharManConfig::kEdLogPathFieldNumber;
const int CharManConfig::kEdCountFieldNumber;
const int CharManConfig::kEdThreshdBFieldNumber;
const int CharManConfig::kEdSpAvgFieldNumber;
const int CharManConfig::kEdFFTSizeFieldNumber;
const int CharManConfig::kEdDetBWFieldNumber;
const int CharManConfig::kEdMinDetBWFieldNumber;
const int CharManConfig::kEdGuardBWFieldNumber;
const int CharManConfig::kEdMinUpTimeFieldNumber;
const int CharManConfig::kEdMinDownTimeFieldNumber;
const int CharManConfig::kEdOverlapThFieldNumber;
const int CharManConfig::kStreamFilesFieldNumber;
const int CharManConfig::kBrainFileFieldNumber;
#endif  // !_MSC_VER

CharManConfig::CharManConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharManConfig::InitAsDefaultInstance() {
}

CharManConfig::CharManConfig(const CharManConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharManConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  xtalkport_ = 32222;
  snapextracount_ = 1;
  snapextramin_ = 0;
  snapextraconfig_ = const_cast< ::std::string*>(_default_snapextraconfig_);
  snapextradynamic_ = false;
  sepriopt_ = false;
  sr_to_ = 0;
  outputpath_ = const_cast< ::std::string*>(_default_outputpath_);
  esicount_ = 6;
  esilogpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  videoratefftsize_ = 131072;
  videoratedchz_ = 100;
  videoratemaxfft_ = 64;
  videoratethresh_ = 1.5f;
  videosyncthresh_ = 2.5f;
  rlversion_ = const_cast< ::std::string*>(_default_rlversion_);
  rldedup_ = true;
  energyncoh_ = 20;
  energynnoncoh_ = 100;
  energythreshold_ = 0;
  energynon_ = 2;
  energynoff_ = 2;
  energybw_ = 20000;
  ofdmthresh_ = 5;
  prithreshold_ = 11;
  esimodulations_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  esiwritepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  edwritepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  edlogpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  edcount_ = 6;
  edthreshdb_ = 0;
  edspavg_ = 50;
  edfftsize_ = 8192;
  eddetbw_ = 0;
  edmindetbw_ = 8000;
  edguardbw_ = 0;
  edminuptime_ = 0;
  edmindowntime_ = 0;
  edoverlapth_ = 0.5f;
  streamfiles_ = false;
  brainfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharManConfig::~CharManConfig() {
  SharedDtor();
}

void CharManConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (snapextraconfig_ != _default_snapextraconfig_) {
    delete snapextraconfig_;
  }
  if (outputpath_ != _default_outputpath_) {
    delete outputpath_;
  }
  if (esilogpath_ != &::google::protobuf::internal::kEmptyString) {
    delete esilogpath_;
  }
  if (rlversion_ != _default_rlversion_) {
    delete rlversion_;
  }
  if (esimodulations_ != &::google::protobuf::internal::kEmptyString) {
    delete esimodulations_;
  }
  if (esiwritepath_ != &::google::protobuf::internal::kEmptyString) {
    delete esiwritepath_;
  }
  if (edwritepath_ != &::google::protobuf::internal::kEmptyString) {
    delete edwritepath_;
  }
  if (edlogpath_ != &::google::protobuf::internal::kEmptyString) {
    delete edlogpath_;
  }
  if (brainfile_ != &::google::protobuf::internal::kEmptyString) {
    delete brainfile_;
  }
  if (this != default_instance_) {
  }
}

void CharManConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharManConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharManConfig_descriptor_;
}

const CharManConfig& CharManConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

CharManConfig* CharManConfig::default_instance_ = NULL;

CharManConfig* CharManConfig::New() const {
  return new CharManConfig;
}

void CharManConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    xtalkport_ = 32222;
    snapextracount_ = 1;
    snapextramin_ = 0;
    if (has_snapextraconfig()) {
      if (snapextraconfig_ != _default_snapextraconfig_) {
        snapextraconfig_->assign(*_default_snapextraconfig_);
      }
    }
    snapextradynamic_ = false;
    sepriopt_ = false;
    sr_to_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_outputpath()) {
      if (outputpath_ != _default_outputpath_) {
        outputpath_->assign(*_default_outputpath_);
      }
    }
    esicount_ = 6;
    if (has_esilogpath()) {
      if (esilogpath_ != &::google::protobuf::internal::kEmptyString) {
        esilogpath_->clear();
      }
    }
    videoratefftsize_ = 131072;
    videoratedchz_ = 100;
    videoratemaxfft_ = 64;
    videoratethresh_ = 1.5f;
    videosyncthresh_ = 2.5f;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_rlversion()) {
      if (rlversion_ != _default_rlversion_) {
        rlversion_->assign(*_default_rlversion_);
      }
    }
    rldedup_ = true;
    energyncoh_ = 20;
    energynnoncoh_ = 100;
    energythreshold_ = 0;
    energynon_ = 2;
    energynoff_ = 2;
    energybw_ = 20000;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ofdmthresh_ = 5;
    prithreshold_ = 11;
    if (has_esimodulations()) {
      if (esimodulations_ != &::google::protobuf::internal::kEmptyString) {
        esimodulations_->clear();
      }
    }
    if (has_esiwritepath()) {
      if (esiwritepath_ != &::google::protobuf::internal::kEmptyString) {
        esiwritepath_->clear();
      }
    }
    if (has_edwritepath()) {
      if (edwritepath_ != &::google::protobuf::internal::kEmptyString) {
        edwritepath_->clear();
      }
    }
    if (has_edlogpath()) {
      if (edlogpath_ != &::google::protobuf::internal::kEmptyString) {
        edlogpath_->clear();
      }
    }
    edcount_ = 6;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    edthreshdb_ = 0;
    edspavg_ = 50;
    edfftsize_ = 8192;
    eddetbw_ = 0;
    edmindetbw_ = 8000;
    edguardbw_ = 0;
    edminuptime_ = 0;
    edmindowntime_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    edoverlapth_ = 0.5f;
    streamfiles_ = false;
    if (has_brainfile()) {
      if (brainfile_ != &::google::protobuf::internal::kEmptyString) {
        brainfile_->clear();
      }
    }
  }
  snapextratargets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharManConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "CHAR_MAN_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xtalkPort;
        break;
      }

      // optional int32 xtalkPort = 2 [default = 32222];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xtalkPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xtalkport_)));
          set_has_xtalkport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_snapExtraCount;
        break;
      }

      // optional int32 snapExtraCount = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snapExtraCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapextracount_)));
          set_has_snapextracount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_snapExtraMin;
        break;
      }

      // optional int32 snapExtraMin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snapExtraMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapextramin_)));
          set_has_snapextramin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_snapExtraConfig;
        break;
      }

      // optional string snapExtraConfig = 5 [default = "/user/config/snap_extra.cfg"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapExtraConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapextraconfig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapextraconfig().data(), this->snapextraconfig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_snapExtraDynamic;
        break;
      }

      // optional bool snapExtraDynamic = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snapExtraDynamic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapextradynamic_)));
          set_has_snapextradynamic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sepriopt;
        break;
      }

      // optional bool sepriopt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sepriopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sepriopt_)));
          set_has_sepriopt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sr_to;
        break;
      }

      // optional int32 sr_to = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sr_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sr_to_)));
          set_has_sr_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_outputPath;
        break;
      }

      // optional string outputPath = 9 [default = "19"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outputpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outputpath().data(), this->outputpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_esiCount;
        break;
      }

      // optional int32 esiCount = 10 [default = 6];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_esiCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esicount_)));
          set_has_esicount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_esiLogPath;
        break;
      }

      // optional string esiLogPath = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_esiLogPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_esilogpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->esilogpath().data(), this->esilogpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_videoRateFFTSize;
        break;
      }

      // optional int32 videoRateFFTSize = 12 [default = 131072];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoRateFFTSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoratefftsize_)));
          set_has_videoratefftsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_videoRateDCHz;
        break;
      }

      // optional float videoRateDCHz = 13 [default = 100];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_videoRateDCHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &videoratedchz_)));
          set_has_videoratedchz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_videoRateMaxFFT;
        break;
      }

      // optional int32 videoRateMaxFFT = 14 [default = 64];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoRateMaxFFT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoratemaxfft_)));
          set_has_videoratemaxfft();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_videoRateThresh;
        break;
      }

      // optional float videoRateThresh = 15 [default = 1.5];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_videoRateThresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &videoratethresh_)));
          set_has_videoratethresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_videoSyncThresh;
        break;
      }

      // optional float videoSyncThresh = 16 [default = 2.5];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_videoSyncThresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &videosyncthresh_)));
          set_has_videosyncthresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_rlVersion;
        break;
      }

      // optional string rlVersion = 17 [default = "NORMAL"];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rlVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rlversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rlversion().data(), this->rlversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_rlDedup;
        break;
      }

      // optional bool rlDedup = 18 [default = true];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rlDedup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rldedup_)));
          set_has_rldedup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_energyNcoh;
        break;
      }

      // optional int32 energyNcoh = 19 [default = 20];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyNcoh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energyncoh_)));
          set_has_energyncoh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_energyNnoncoh;
        break;
      }

      // optional int32 energyNnoncoh = 20 [default = 100];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyNnoncoh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energynnoncoh_)));
          set_has_energynnoncoh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_energyThreshold;
        break;
      }

      // optional float energyThreshold = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energythreshold_)));
          set_has_energythreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_energyNon;
        break;
      }

      // optional int32 energyNon = 22 [default = 2];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyNon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energynon_)));
          set_has_energynon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_energyNoff;
        break;
      }

      // optional int32 energyNoff = 23 [default = 2];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyNoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energynoff_)));
          set_has_energynoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_energyBW;
        break;
      }

      // optional float energyBW = 24 [default = 20000];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energybw_)));
          set_has_energybw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_ofdmthresh;
        break;
      }

      // optional float ofdmthresh = 25 [default = 5];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ofdmthresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ofdmthresh_)));
          set_has_ofdmthresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_priThreshold;
        break;
      }

      // optional float priThreshold = 26 [default = 11];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_priThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prithreshold_)));
          set_has_prithreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_snapExtraTargets;
        break;
      }

      // repeated string snapExtraTargets = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapExtraTargets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_snapextratargets()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapextratargets(this->snapextratargets_size() - 1).data(),
            this->snapextratargets(this->snapextratargets_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_snapExtraTargets;
        if (input->ExpectTag(226)) goto parse_esiModulations;
        break;
      }

      // optional string esiModulations = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_esiModulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_esimodulations()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->esimodulations().data(), this->esimodulations().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_esiWritePath;
        break;
      }

      // optional string esiWritePath = 29 [default = ""];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_esiWritePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_esiwritepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->esiwritepath().data(), this->esiwritepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_edWritePath;
        break;
      }

      // optional string edWritePath = 30 [default = ""];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edWritePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edwritepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->edwritepath().data(), this->edwritepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_edLogPath;
        break;
      }

      // optional string edLogPath = 31 [default = ""];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edLogPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edlogpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->edlogpath().data(), this->edlogpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_edCount;
        break;
      }

      // optional int32 edCount = 32 [default = 6];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edcount_)));
          set_has_edcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_edThreshdB;
        break;
      }

      // optional int32 edThreshdB = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edThreshdB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edthreshdb_)));
          set_has_edthreshdb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_edSpAvg;
        break;
      }

      // optional int32 edSpAvg = 34 [default = 50];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edSpAvg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edspavg_)));
          set_has_edspavg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_edFFTSize;
        break;
      }

      // optional int32 edFFTSize = 35 [default = 8192];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edFFTSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edfftsize_)));
          set_has_edfftsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_edDetBW;
        break;
      }

      // optional int32 edDetBW = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edDetBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eddetbw_)));
          set_has_eddetbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_edMinDetBW;
        break;
      }

      // optional int32 edMinDetBW = 37 [default = 8000];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edMinDetBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edmindetbw_)));
          set_has_edmindetbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_edGuardBW;
        break;
      }

      // optional int32 edGuardBW = 38 [default = 0];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edGuardBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edguardbw_)));
          set_has_edguardbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_edMinUpTime;
        break;
      }

      // optional int32 edMinUpTime = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edMinUpTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edminuptime_)));
          set_has_edminuptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_edMinDownTime;
        break;
      }

      // optional int32 edMinDownTime = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edMinDownTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edmindowntime_)));
          set_has_edmindowntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(333)) goto parse_edOverlapTh;
        break;
      }

      // optional float edOverlapTh = 41 [default = 0.5];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_edOverlapTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &edoverlapth_)));
          set_has_edoverlapth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_streamFiles;
        break;
      }

      // optional bool streamFiles = 42 [default = false];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_streamFiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streamfiles_)));
          set_has_streamfiles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_brainFile;
        break;
      }

      // optional string brainFile = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brainFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brainfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brainfile().data(), this->brainfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharManConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "CHAR_MAN_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 xtalkPort = 2 [default = 32222];
  if (has_xtalkport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xtalkport(), output);
  }

  // optional int32 snapExtraCount = 3 [default = 1];
  if (has_snapextracount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->snapextracount(), output);
  }

  // optional int32 snapExtraMin = 4;
  if (has_snapextramin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->snapextramin(), output);
  }

  // optional string snapExtraConfig = 5 [default = "/user/config/snap_extra.cfg"];
  if (has_snapextraconfig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapextraconfig().data(), this->snapextraconfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->snapextraconfig(), output);
  }

  // optional bool snapExtraDynamic = 6;
  if (has_snapextradynamic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->snapextradynamic(), output);
  }

  // optional bool sepriopt = 7;
  if (has_sepriopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sepriopt(), output);
  }

  // optional int32 sr_to = 8;
  if (has_sr_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sr_to(), output);
  }

  // optional string outputPath = 9 [default = "19"];
  if (has_outputpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outputpath().data(), this->outputpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->outputpath(), output);
  }

  // optional int32 esiCount = 10 [default = 6];
  if (has_esicount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->esicount(), output);
  }

  // optional string esiLogPath = 11;
  if (has_esilogpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->esilogpath().data(), this->esilogpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->esilogpath(), output);
  }

  // optional int32 videoRateFFTSize = 12 [default = 131072];
  if (has_videoratefftsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->videoratefftsize(), output);
  }

  // optional float videoRateDCHz = 13 [default = 100];
  if (has_videoratedchz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->videoratedchz(), output);
  }

  // optional int32 videoRateMaxFFT = 14 [default = 64];
  if (has_videoratemaxfft()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->videoratemaxfft(), output);
  }

  // optional float videoRateThresh = 15 [default = 1.5];
  if (has_videoratethresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->videoratethresh(), output);
  }

  // optional float videoSyncThresh = 16 [default = 2.5];
  if (has_videosyncthresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->videosyncthresh(), output);
  }

  // optional string rlVersion = 17 [default = "NORMAL"];
  if (has_rlversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rlversion().data(), this->rlversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->rlversion(), output);
  }

  // optional bool rlDedup = 18 [default = true];
  if (has_rldedup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->rldedup(), output);
  }

  // optional int32 energyNcoh = 19 [default = 20];
  if (has_energyncoh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->energyncoh(), output);
  }

  // optional int32 energyNnoncoh = 20 [default = 100];
  if (has_energynnoncoh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->energynnoncoh(), output);
  }

  // optional float energyThreshold = 21 [default = 0];
  if (has_energythreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->energythreshold(), output);
  }

  // optional int32 energyNon = 22 [default = 2];
  if (has_energynon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->energynon(), output);
  }

  // optional int32 energyNoff = 23 [default = 2];
  if (has_energynoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->energynoff(), output);
  }

  // optional float energyBW = 24 [default = 20000];
  if (has_energybw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->energybw(), output);
  }

  // optional float ofdmthresh = 25 [default = 5];
  if (has_ofdmthresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->ofdmthresh(), output);
  }

  // optional float priThreshold = 26 [default = 11];
  if (has_prithreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->prithreshold(), output);
  }

  // repeated string snapExtraTargets = 27;
  for (int i = 0; i < this->snapextratargets_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->snapextratargets(i).data(), this->snapextratargets(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->snapextratargets(i), output);
  }

  // optional string esiModulations = 28;
  if (has_esimodulations()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->esimodulations().data(), this->esimodulations().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->esimodulations(), output);
  }

  // optional string esiWritePath = 29 [default = ""];
  if (has_esiwritepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->esiwritepath().data(), this->esiwritepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->esiwritepath(), output);
  }

  // optional string edWritePath = 30 [default = ""];
  if (has_edwritepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edwritepath().data(), this->edwritepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->edwritepath(), output);
  }

  // optional string edLogPath = 31 [default = ""];
  if (has_edlogpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edlogpath().data(), this->edlogpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->edlogpath(), output);
  }

  // optional int32 edCount = 32 [default = 6];
  if (has_edcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->edcount(), output);
  }

  // optional int32 edThreshdB = 33;
  if (has_edthreshdb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->edthreshdb(), output);
  }

  // optional int32 edSpAvg = 34 [default = 50];
  if (has_edspavg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->edspavg(), output);
  }

  // optional int32 edFFTSize = 35 [default = 8192];
  if (has_edfftsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->edfftsize(), output);
  }

  // optional int32 edDetBW = 36;
  if (has_eddetbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->eddetbw(), output);
  }

  // optional int32 edMinDetBW = 37 [default = 8000];
  if (has_edmindetbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->edmindetbw(), output);
  }

  // optional int32 edGuardBW = 38 [default = 0];
  if (has_edguardbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->edguardbw(), output);
  }

  // optional int32 edMinUpTime = 39;
  if (has_edminuptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->edminuptime(), output);
  }

  // optional int32 edMinDownTime = 40;
  if (has_edmindowntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->edmindowntime(), output);
  }

  // optional float edOverlapTh = 41 [default = 0.5];
  if (has_edoverlapth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->edoverlapth(), output);
  }

  // optional bool streamFiles = 42 [default = false];
  if (has_streamfiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->streamfiles(), output);
  }

  // optional string brainFile = 43;
  if (has_brainfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brainfile().data(), this->brainfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->brainfile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharManConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "CHAR_MAN_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 xtalkPort = 2 [default = 32222];
  if (has_xtalkport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xtalkport(), target);
  }

  // optional int32 snapExtraCount = 3 [default = 1];
  if (has_snapextracount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->snapextracount(), target);
  }

  // optional int32 snapExtraMin = 4;
  if (has_snapextramin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->snapextramin(), target);
  }

  // optional string snapExtraConfig = 5 [default = "/user/config/snap_extra.cfg"];
  if (has_snapextraconfig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapextraconfig().data(), this->snapextraconfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->snapextraconfig(), target);
  }

  // optional bool snapExtraDynamic = 6;
  if (has_snapextradynamic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->snapextradynamic(), target);
  }

  // optional bool sepriopt = 7;
  if (has_sepriopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sepriopt(), target);
  }

  // optional int32 sr_to = 8;
  if (has_sr_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sr_to(), target);
  }

  // optional string outputPath = 9 [default = "19"];
  if (has_outputpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outputpath().data(), this->outputpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->outputpath(), target);
  }

  // optional int32 esiCount = 10 [default = 6];
  if (has_esicount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->esicount(), target);
  }

  // optional string esiLogPath = 11;
  if (has_esilogpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->esilogpath().data(), this->esilogpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->esilogpath(), target);
  }

  // optional int32 videoRateFFTSize = 12 [default = 131072];
  if (has_videoratefftsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->videoratefftsize(), target);
  }

  // optional float videoRateDCHz = 13 [default = 100];
  if (has_videoratedchz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->videoratedchz(), target);
  }

  // optional int32 videoRateMaxFFT = 14 [default = 64];
  if (has_videoratemaxfft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->videoratemaxfft(), target);
  }

  // optional float videoRateThresh = 15 [default = 1.5];
  if (has_videoratethresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->videoratethresh(), target);
  }

  // optional float videoSyncThresh = 16 [default = 2.5];
  if (has_videosyncthresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->videosyncthresh(), target);
  }

  // optional string rlVersion = 17 [default = "NORMAL"];
  if (has_rlversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rlversion().data(), this->rlversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->rlversion(), target);
  }

  // optional bool rlDedup = 18 [default = true];
  if (has_rldedup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->rldedup(), target);
  }

  // optional int32 energyNcoh = 19 [default = 20];
  if (has_energyncoh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->energyncoh(), target);
  }

  // optional int32 energyNnoncoh = 20 [default = 100];
  if (has_energynnoncoh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->energynnoncoh(), target);
  }

  // optional float energyThreshold = 21 [default = 0];
  if (has_energythreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->energythreshold(), target);
  }

  // optional int32 energyNon = 22 [default = 2];
  if (has_energynon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->energynon(), target);
  }

  // optional int32 energyNoff = 23 [default = 2];
  if (has_energynoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->energynoff(), target);
  }

  // optional float energyBW = 24 [default = 20000];
  if (has_energybw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->energybw(), target);
  }

  // optional float ofdmthresh = 25 [default = 5];
  if (has_ofdmthresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->ofdmthresh(), target);
  }

  // optional float priThreshold = 26 [default = 11];
  if (has_prithreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->prithreshold(), target);
  }

  // repeated string snapExtraTargets = 27;
  for (int i = 0; i < this->snapextratargets_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapextratargets(i).data(), this->snapextratargets(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(27, this->snapextratargets(i), target);
  }

  // optional string esiModulations = 28;
  if (has_esimodulations()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->esimodulations().data(), this->esimodulations().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->esimodulations(), target);
  }

  // optional string esiWritePath = 29 [default = ""];
  if (has_esiwritepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->esiwritepath().data(), this->esiwritepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->esiwritepath(), target);
  }

  // optional string edWritePath = 30 [default = ""];
  if (has_edwritepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edwritepath().data(), this->edwritepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->edwritepath(), target);
  }

  // optional string edLogPath = 31 [default = ""];
  if (has_edlogpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edlogpath().data(), this->edlogpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->edlogpath(), target);
  }

  // optional int32 edCount = 32 [default = 6];
  if (has_edcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->edcount(), target);
  }

  // optional int32 edThreshdB = 33;
  if (has_edthreshdb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->edthreshdb(), target);
  }

  // optional int32 edSpAvg = 34 [default = 50];
  if (has_edspavg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->edspavg(), target);
  }

  // optional int32 edFFTSize = 35 [default = 8192];
  if (has_edfftsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->edfftsize(), target);
  }

  // optional int32 edDetBW = 36;
  if (has_eddetbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->eddetbw(), target);
  }

  // optional int32 edMinDetBW = 37 [default = 8000];
  if (has_edmindetbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->edmindetbw(), target);
  }

  // optional int32 edGuardBW = 38 [default = 0];
  if (has_edguardbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->edguardbw(), target);
  }

  // optional int32 edMinUpTime = 39;
  if (has_edminuptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->edminuptime(), target);
  }

  // optional int32 edMinDownTime = 40;
  if (has_edmindowntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->edmindowntime(), target);
  }

  // optional float edOverlapTh = 41 [default = 0.5];
  if (has_edoverlapth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->edoverlapth(), target);
  }

  // optional bool streamFiles = 42 [default = false];
  if (has_streamfiles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->streamfiles(), target);
  }

  // optional string brainFile = 43;
  if (has_brainfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brainfile().data(), this->brainfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->brainfile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharManConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "CHAR_MAN_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 xtalkPort = 2 [default = 32222];
    if (has_xtalkport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xtalkport());
    }

    // optional int32 snapExtraCount = 3 [default = 1];
    if (has_snapextracount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapextracount());
    }

    // optional int32 snapExtraMin = 4;
    if (has_snapextramin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapextramin());
    }

    // optional string snapExtraConfig = 5 [default = "/user/config/snap_extra.cfg"];
    if (has_snapextraconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapextraconfig());
    }

    // optional bool snapExtraDynamic = 6;
    if (has_snapextradynamic()) {
      total_size += 1 + 1;
    }

    // optional bool sepriopt = 7;
    if (has_sepriopt()) {
      total_size += 1 + 1;
    }

    // optional int32 sr_to = 8;
    if (has_sr_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sr_to());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string outputPath = 9 [default = "19"];
    if (has_outputpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outputpath());
    }

    // optional int32 esiCount = 10 [default = 6];
    if (has_esicount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esicount());
    }

    // optional string esiLogPath = 11;
    if (has_esilogpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->esilogpath());
    }

    // optional int32 videoRateFFTSize = 12 [default = 131072];
    if (has_videoratefftsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoratefftsize());
    }

    // optional float videoRateDCHz = 13 [default = 100];
    if (has_videoratedchz()) {
      total_size += 1 + 4;
    }

    // optional int32 videoRateMaxFFT = 14 [default = 64];
    if (has_videoratemaxfft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoratemaxfft());
    }

    // optional float videoRateThresh = 15 [default = 1.5];
    if (has_videoratethresh()) {
      total_size += 1 + 4;
    }

    // optional float videoSyncThresh = 16 [default = 2.5];
    if (has_videosyncthresh()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string rlVersion = 17 [default = "NORMAL"];
    if (has_rlversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rlversion());
    }

    // optional bool rlDedup = 18 [default = true];
    if (has_rldedup()) {
      total_size += 2 + 1;
    }

    // optional int32 energyNcoh = 19 [default = 20];
    if (has_energyncoh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energyncoh());
    }

    // optional int32 energyNnoncoh = 20 [default = 100];
    if (has_energynnoncoh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energynnoncoh());
    }

    // optional float energyThreshold = 21 [default = 0];
    if (has_energythreshold()) {
      total_size += 2 + 4;
    }

    // optional int32 energyNon = 22 [default = 2];
    if (has_energynon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energynon());
    }

    // optional int32 energyNoff = 23 [default = 2];
    if (has_energynoff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energynoff());
    }

    // optional float energyBW = 24 [default = 20000];
    if (has_energybw()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float ofdmthresh = 25 [default = 5];
    if (has_ofdmthresh()) {
      total_size += 2 + 4;
    }

    // optional float priThreshold = 26 [default = 11];
    if (has_prithreshold()) {
      total_size += 2 + 4;
    }

    // optional string esiModulations = 28;
    if (has_esimodulations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->esimodulations());
    }

    // optional string esiWritePath = 29 [default = ""];
    if (has_esiwritepath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->esiwritepath());
    }

    // optional string edWritePath = 30 [default = ""];
    if (has_edwritepath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->edwritepath());
    }

    // optional string edLogPath = 31 [default = ""];
    if (has_edlogpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->edlogpath());
    }

    // optional int32 edCount = 32 [default = 6];
    if (has_edcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edcount());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 edThreshdB = 33;
    if (has_edthreshdb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edthreshdb());
    }

    // optional int32 edSpAvg = 34 [default = 50];
    if (has_edspavg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edspavg());
    }

    // optional int32 edFFTSize = 35 [default = 8192];
    if (has_edfftsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edfftsize());
    }

    // optional int32 edDetBW = 36;
    if (has_eddetbw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eddetbw());
    }

    // optional int32 edMinDetBW = 37 [default = 8000];
    if (has_edmindetbw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edmindetbw());
    }

    // optional int32 edGuardBW = 38 [default = 0];
    if (has_edguardbw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edguardbw());
    }

    // optional int32 edMinUpTime = 39;
    if (has_edminuptime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edminuptime());
    }

    // optional int32 edMinDownTime = 40;
    if (has_edmindowntime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edmindowntime());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional float edOverlapTh = 41 [default = 0.5];
    if (has_edoverlapth()) {
      total_size += 2 + 4;
    }

    // optional bool streamFiles = 42 [default = false];
    if (has_streamfiles()) {
      total_size += 2 + 1;
    }

    // optional string brainFile = 43;
    if (has_brainfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brainfile());
    }

  }
  // repeated string snapExtraTargets = 27;
  total_size += 2 * this->snapextratargets_size();
  for (int i = 0; i < this->snapextratargets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->snapextratargets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharManConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharManConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharManConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharManConfig::MergeFrom(const CharManConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  snapextratargets_.MergeFrom(from.snapextratargets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_xtalkport()) {
      set_xtalkport(from.xtalkport());
    }
    if (from.has_snapextracount()) {
      set_snapextracount(from.snapextracount());
    }
    if (from.has_snapextramin()) {
      set_snapextramin(from.snapextramin());
    }
    if (from.has_snapextraconfig()) {
      set_snapextraconfig(from.snapextraconfig());
    }
    if (from.has_snapextradynamic()) {
      set_snapextradynamic(from.snapextradynamic());
    }
    if (from.has_sepriopt()) {
      set_sepriopt(from.sepriopt());
    }
    if (from.has_sr_to()) {
      set_sr_to(from.sr_to());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_outputpath()) {
      set_outputpath(from.outputpath());
    }
    if (from.has_esicount()) {
      set_esicount(from.esicount());
    }
    if (from.has_esilogpath()) {
      set_esilogpath(from.esilogpath());
    }
    if (from.has_videoratefftsize()) {
      set_videoratefftsize(from.videoratefftsize());
    }
    if (from.has_videoratedchz()) {
      set_videoratedchz(from.videoratedchz());
    }
    if (from.has_videoratemaxfft()) {
      set_videoratemaxfft(from.videoratemaxfft());
    }
    if (from.has_videoratethresh()) {
      set_videoratethresh(from.videoratethresh());
    }
    if (from.has_videosyncthresh()) {
      set_videosyncthresh(from.videosyncthresh());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rlversion()) {
      set_rlversion(from.rlversion());
    }
    if (from.has_rldedup()) {
      set_rldedup(from.rldedup());
    }
    if (from.has_energyncoh()) {
      set_energyncoh(from.energyncoh());
    }
    if (from.has_energynnoncoh()) {
      set_energynnoncoh(from.energynnoncoh());
    }
    if (from.has_energythreshold()) {
      set_energythreshold(from.energythreshold());
    }
    if (from.has_energynon()) {
      set_energynon(from.energynon());
    }
    if (from.has_energynoff()) {
      set_energynoff(from.energynoff());
    }
    if (from.has_energybw()) {
      set_energybw(from.energybw());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ofdmthresh()) {
      set_ofdmthresh(from.ofdmthresh());
    }
    if (from.has_prithreshold()) {
      set_prithreshold(from.prithreshold());
    }
    if (from.has_esimodulations()) {
      set_esimodulations(from.esimodulations());
    }
    if (from.has_esiwritepath()) {
      set_esiwritepath(from.esiwritepath());
    }
    if (from.has_edwritepath()) {
      set_edwritepath(from.edwritepath());
    }
    if (from.has_edlogpath()) {
      set_edlogpath(from.edlogpath());
    }
    if (from.has_edcount()) {
      set_edcount(from.edcount());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_edthreshdb()) {
      set_edthreshdb(from.edthreshdb());
    }
    if (from.has_edspavg()) {
      set_edspavg(from.edspavg());
    }
    if (from.has_edfftsize()) {
      set_edfftsize(from.edfftsize());
    }
    if (from.has_eddetbw()) {
      set_eddetbw(from.eddetbw());
    }
    if (from.has_edmindetbw()) {
      set_edmindetbw(from.edmindetbw());
    }
    if (from.has_edguardbw()) {
      set_edguardbw(from.edguardbw());
    }
    if (from.has_edminuptime()) {
      set_edminuptime(from.edminuptime());
    }
    if (from.has_edmindowntime()) {
      set_edmindowntime(from.edmindowntime());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_edoverlapth()) {
      set_edoverlapth(from.edoverlapth());
    }
    if (from.has_streamfiles()) {
      set_streamfiles(from.streamfiles());
    }
    if (from.has_brainfile()) {
      set_brainfile(from.brainfile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharManConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharManConfig::CopyFrom(const CharManConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharManConfig::IsInitialized() const {

  return true;
}

void CharManConfig::Swap(CharManConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(xtalkport_, other->xtalkport_);
    std::swap(snapextracount_, other->snapextracount_);
    std::swap(snapextramin_, other->snapextramin_);
    std::swap(snapextraconfig_, other->snapextraconfig_);
    std::swap(snapextradynamic_, other->snapextradynamic_);
    std::swap(sepriopt_, other->sepriopt_);
    std::swap(sr_to_, other->sr_to_);
    std::swap(outputpath_, other->outputpath_);
    std::swap(esicount_, other->esicount_);
    std::swap(esilogpath_, other->esilogpath_);
    std::swap(videoratefftsize_, other->videoratefftsize_);
    std::swap(videoratedchz_, other->videoratedchz_);
    std::swap(videoratemaxfft_, other->videoratemaxfft_);
    std::swap(videoratethresh_, other->videoratethresh_);
    std::swap(videosyncthresh_, other->videosyncthresh_);
    std::swap(rlversion_, other->rlversion_);
    std::swap(rldedup_, other->rldedup_);
    std::swap(energyncoh_, other->energyncoh_);
    std::swap(energynnoncoh_, other->energynnoncoh_);
    std::swap(energythreshold_, other->energythreshold_);
    std::swap(energynon_, other->energynon_);
    std::swap(energynoff_, other->energynoff_);
    std::swap(energybw_, other->energybw_);
    std::swap(ofdmthresh_, other->ofdmthresh_);
    std::swap(prithreshold_, other->prithreshold_);
    snapextratargets_.Swap(&other->snapextratargets_);
    std::swap(esimodulations_, other->esimodulations_);
    std::swap(esiwritepath_, other->esiwritepath_);
    std::swap(edwritepath_, other->edwritepath_);
    std::swap(edlogpath_, other->edlogpath_);
    std::swap(edcount_, other->edcount_);
    std::swap(edthreshdb_, other->edthreshdb_);
    std::swap(edspavg_, other->edspavg_);
    std::swap(edfftsize_, other->edfftsize_);
    std::swap(eddetbw_, other->eddetbw_);
    std::swap(edmindetbw_, other->edmindetbw_);
    std::swap(edguardbw_, other->edguardbw_);
    std::swap(edminuptime_, other->edminuptime_);
    std::swap(edmindowntime_, other->edmindowntime_);
    std::swap(edoverlapth_, other->edoverlapth_);
    std::swap(streamfiles_, other->streamfiles_);
    std::swap(brainfile_, other->brainfile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharManConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharManConfig_descriptor_;
  metadata.reflection = CharManConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MacroOptions_AutoControl_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MacroOptions_AutoControl_descriptor_;
}
bool MacroOptions_AutoControl_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MacroOptions_AutoControl MacroOptions::HEADLESS;
const MacroOptions_AutoControl MacroOptions::CONTROLLED;
const MacroOptions_AutoControl MacroOptions::AUTO_MODE;
const MacroOptions_AutoControl MacroOptions::AutoControl_MIN;
const MacroOptions_AutoControl MacroOptions::AutoControl_MAX;
const int MacroOptions::AutoControl_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MacroOptions_PPS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MacroOptions_PPS_descriptor_;
}
bool MacroOptions_PPS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MacroOptions_PPS MacroOptions::PPS_OFF;
const MacroOptions_PPS MacroOptions::PPS_ON;
const MacroOptions_PPS MacroOptions::PPS_MIN;
const MacroOptions_PPS MacroOptions::PPS_MAX;
const int MacroOptions::PPS_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MacroOptions_Ref10m_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MacroOptions_Ref10m_descriptor_;
}
bool MacroOptions_Ref10m_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MacroOptions_Ref10m MacroOptions::REF_OFF;
const MacroOptions_Ref10m MacroOptions::REF_ON;
const MacroOptions_Ref10m MacroOptions::Ref10m_MIN;
const MacroOptions_Ref10m MacroOptions::Ref10m_MAX;
const int MacroOptions::Ref10m_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MacroOptions_ExportFlags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MacroOptions_ExportFlags_descriptor_;
}
bool MacroOptions_ExportFlags_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MacroOptions_ExportFlags MacroOptions::ENABLE_NONE;
const MacroOptions_ExportFlags MacroOptions::ENABLE_VIDEO;
const MacroOptions_ExportFlags MacroOptions::ENABLE_JPEGS;
const MacroOptions_ExportFlags MacroOptions::ENABLE_PSD;
const MacroOptions_ExportFlags MacroOptions::ENABLE_WORKSTATION;
const MacroOptions_ExportFlags MacroOptions::ExportFlags_MIN;
const MacroOptions_ExportFlags MacroOptions::ExportFlags_MAX;
const int MacroOptions::ExportFlags_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* MacroOptions::_default_sensorname_ = NULL;
#ifndef _MSC_VER
const int MacroOptions::kAutoControlFieldNumber;
const int MacroOptions::kPpsEnableFieldNumber;
const int MacroOptions::kRefEnableFieldNumber;
const int MacroOptions::kIfFrequencyFieldNumber;
const int MacroOptions::kWriteAuxFieldNumber;
const int MacroOptions::kExportEnableFieldNumber;
const int MacroOptions::kVideoLengthFieldNumber;
const int MacroOptions::kSensorNameFieldNumber;
const int MacroOptions::kPsdIPAddressFieldNumber;
const int MacroOptions::kPsdPeriodFieldNumber;
const int MacroOptions::kJpegPeriodFieldNumber;
const int MacroOptions::kXmlPeriodFieldNumber;
const int MacroOptions::kProtectArchFieldNumber;
const int MacroOptions::kMidasBundlingFieldNumber;
const int MacroOptions::kRemoteThreshFieldNumber;
#endif  // !_MSC_VER

MacroOptions::MacroOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MacroOptions::InitAsDefaultInstance() {
}

MacroOptions::MacroOptions(const MacroOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MacroOptions::SharedCtor() {
  _cached_size_ = 0;
  autocontrol_ = 0;
  ppsenable_ = 0;
  refenable_ = 0;
  iffrequency_ = 30000000;
  writeaux_ = 12;
  exportenable_ = 0;
  videolength_ = 20;
  sensorname_ = const_cast< ::std::string*>(_default_sensorname_);
  psdipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  psdperiod_ = 200;
  jpegperiod_ = 50;
  xmlperiod_ = 5;
  protectarch_ = 0;
  midasbundling_ = false;
  remotethresh_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MacroOptions::~MacroOptions() {
  SharedDtor();
}

void MacroOptions::SharedDtor() {
  if (sensorname_ != _default_sensorname_) {
    delete sensorname_;
  }
  if (psdipaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete psdipaddress_;
  }
  if (this != default_instance_) {
  }
}

void MacroOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MacroOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MacroOptions_descriptor_;
}

const MacroOptions& MacroOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

MacroOptions* MacroOptions::default_instance_ = NULL;

MacroOptions* MacroOptions::New() const {
  return new MacroOptions;
}

void MacroOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    autocontrol_ = 0;
    ppsenable_ = 0;
    refenable_ = 0;
    iffrequency_ = 30000000;
    writeaux_ = 12;
    exportenable_ = 0;
    videolength_ = 20;
    if (has_sensorname()) {
      if (sensorname_ != _default_sensorname_) {
        sensorname_->assign(*_default_sensorname_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_psdipaddress()) {
      if (psdipaddress_ != &::google::protobuf::internal::kEmptyString) {
        psdipaddress_->clear();
      }
    }
    psdperiod_ = 200;
    jpegperiod_ = 50;
    xmlperiod_ = 5;
    protectarch_ = 0;
    midasbundling_ = false;
    remotethresh_ = 10;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MacroOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .falcon_svc_msg.MacroOptions.AutoControl autoControl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_svc_msg::MacroOptions_AutoControl_IsValid(value)) {
            set_autocontrol(static_cast< ::falcon_svc_msg::MacroOptions_AutoControl >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ppsEnable;
        break;
      }

      // optional .falcon_svc_msg.MacroOptions.PPS ppsEnable = 2 [default = PPS_OFF];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppsEnable:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_svc_msg::MacroOptions_PPS_IsValid(value)) {
            set_ppsenable(static_cast< ::falcon_svc_msg::MacroOptions_PPS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refEnable;
        break;
      }

      // optional .falcon_svc_msg.MacroOptions.Ref10m refEnable = 3 [default = REF_OFF];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refEnable:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_svc_msg::MacroOptions_Ref10m_IsValid(value)) {
            set_refenable(static_cast< ::falcon_svc_msg::MacroOptions_Ref10m >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_ifFrequency;
        break;
      }

      // optional double ifFrequency = 4 [default = 30000000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ifFrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &iffrequency_)));
          set_has_iffrequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_writeAux;
        break;
      }

      // optional int32 writeAux = 5 [default = 12];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writeAux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writeaux_)));
          set_has_writeaux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exportEnable;
        break;
      }

      // optional int32 exportEnable = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exportEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exportenable_)));
          set_has_exportenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_videoLength;
        break;
      }

      // optional int32 videoLength = 7 [default = 20];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_videoLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videolength_)));
          set_has_videolength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sensorName;
        break;
      }

      // optional string sensorName = 8 [default = "sensor"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_psdIPAddress;
        break;
      }

      // optional string psdIPAddress = 9 [default = ""];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psdIPAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_psdipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->psdipaddress().data(), this->psdipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_psdPeriod;
        break;
      }

      // optional int32 psdPeriod = 10 [default = 200];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_psdPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &psdperiod_)));
          set_has_psdperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_jpegPeriod;
        break;
      }

      // optional int32 jpegPeriod = 11 [default = 50];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jpegPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jpegperiod_)));
          set_has_jpegperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_xmlPeriod;
        break;
      }

      // optional int32 xmlPeriod = 12 [default = 5];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xmlPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xmlperiod_)));
          set_has_xmlperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_protectArch;
        break;
      }

      // optional int32 protectArch = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protectArch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protectarch_)));
          set_has_protectarch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_midasBundling;
        break;
      }

      // optional bool midasBundling = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_midasBundling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &midasbundling_)));
          set_has_midasbundling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_remoteThresh;
        break;
      }

      // optional int32 remoteThresh = 15 [default = 10];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remoteThresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remotethresh_)));
          set_has_remotethresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MacroOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .falcon_svc_msg.MacroOptions.AutoControl autoControl = 1;
  if (has_autocontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->autocontrol(), output);
  }

  // optional .falcon_svc_msg.MacroOptions.PPS ppsEnable = 2 [default = PPS_OFF];
  if (has_ppsenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ppsenable(), output);
  }

  // optional .falcon_svc_msg.MacroOptions.Ref10m refEnable = 3 [default = REF_OFF];
  if (has_refenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->refenable(), output);
  }

  // optional double ifFrequency = 4 [default = 30000000];
  if (has_iffrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->iffrequency(), output);
  }

  // optional int32 writeAux = 5 [default = 12];
  if (has_writeaux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->writeaux(), output);
  }

  // optional int32 exportEnable = 6 [default = 0];
  if (has_exportenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exportenable(), output);
  }

  // optional int32 videoLength = 7 [default = 20];
  if (has_videolength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->videolength(), output);
  }

  // optional string sensorName = 8 [default = "sensor"];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sensorname(), output);
  }

  // optional string psdIPAddress = 9 [default = ""];
  if (has_psdipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psdipaddress().data(), this->psdipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->psdipaddress(), output);
  }

  // optional int32 psdPeriod = 10 [default = 200];
  if (has_psdperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->psdperiod(), output);
  }

  // optional int32 jpegPeriod = 11 [default = 50];
  if (has_jpegperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->jpegperiod(), output);
  }

  // optional int32 xmlPeriod = 12 [default = 5];
  if (has_xmlperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->xmlperiod(), output);
  }

  // optional int32 protectArch = 13 [default = 0];
  if (has_protectarch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->protectarch(), output);
  }

  // optional bool midasBundling = 14 [default = false];
  if (has_midasbundling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->midasbundling(), output);
  }

  // optional int32 remoteThresh = 15 [default = 10];
  if (has_remotethresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->remotethresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MacroOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .falcon_svc_msg.MacroOptions.AutoControl autoControl = 1;
  if (has_autocontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->autocontrol(), target);
  }

  // optional .falcon_svc_msg.MacroOptions.PPS ppsEnable = 2 [default = PPS_OFF];
  if (has_ppsenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ppsenable(), target);
  }

  // optional .falcon_svc_msg.MacroOptions.Ref10m refEnable = 3 [default = REF_OFF];
  if (has_refenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->refenable(), target);
  }

  // optional double ifFrequency = 4 [default = 30000000];
  if (has_iffrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->iffrequency(), target);
  }

  // optional int32 writeAux = 5 [default = 12];
  if (has_writeaux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->writeaux(), target);
  }

  // optional int32 exportEnable = 6 [default = 0];
  if (has_exportenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exportenable(), target);
  }

  // optional int32 videoLength = 7 [default = 20];
  if (has_videolength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->videolength(), target);
  }

  // optional string sensorName = 8 [default = "sensor"];
  if (has_sensorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sensorname(), target);
  }

  // optional string psdIPAddress = 9 [default = ""];
  if (has_psdipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->psdipaddress().data(), this->psdipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->psdipaddress(), target);
  }

  // optional int32 psdPeriod = 10 [default = 200];
  if (has_psdperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->psdperiod(), target);
  }

  // optional int32 jpegPeriod = 11 [default = 50];
  if (has_jpegperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->jpegperiod(), target);
  }

  // optional int32 xmlPeriod = 12 [default = 5];
  if (has_xmlperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->xmlperiod(), target);
  }

  // optional int32 protectArch = 13 [default = 0];
  if (has_protectarch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->protectarch(), target);
  }

  // optional bool midasBundling = 14 [default = false];
  if (has_midasbundling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->midasbundling(), target);
  }

  // optional int32 remoteThresh = 15 [default = 10];
  if (has_remotethresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->remotethresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MacroOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .falcon_svc_msg.MacroOptions.AutoControl autoControl = 1;
    if (has_autocontrol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->autocontrol());
    }

    // optional .falcon_svc_msg.MacroOptions.PPS ppsEnable = 2 [default = PPS_OFF];
    if (has_ppsenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ppsenable());
    }

    // optional .falcon_svc_msg.MacroOptions.Ref10m refEnable = 3 [default = REF_OFF];
    if (has_refenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->refenable());
    }

    // optional double ifFrequency = 4 [default = 30000000];
    if (has_iffrequency()) {
      total_size += 1 + 8;
    }

    // optional int32 writeAux = 5 [default = 12];
    if (has_writeaux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writeaux());
    }

    // optional int32 exportEnable = 6 [default = 0];
    if (has_exportenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exportenable());
    }

    // optional int32 videoLength = 7 [default = 20];
    if (has_videolength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videolength());
    }

    // optional string sensorName = 8 [default = "sensor"];
    if (has_sensorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensorname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string psdIPAddress = 9 [default = ""];
    if (has_psdipaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->psdipaddress());
    }

    // optional int32 psdPeriod = 10 [default = 200];
    if (has_psdperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->psdperiod());
    }

    // optional int32 jpegPeriod = 11 [default = 50];
    if (has_jpegperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jpegperiod());
    }

    // optional int32 xmlPeriod = 12 [default = 5];
    if (has_xmlperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xmlperiod());
    }

    // optional int32 protectArch = 13 [default = 0];
    if (has_protectarch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protectarch());
    }

    // optional bool midasBundling = 14 [default = false];
    if (has_midasbundling()) {
      total_size += 1 + 1;
    }

    // optional int32 remoteThresh = 15 [default = 10];
    if (has_remotethresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remotethresh());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MacroOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MacroOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MacroOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MacroOptions::MergeFrom(const MacroOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autocontrol()) {
      set_autocontrol(from.autocontrol());
    }
    if (from.has_ppsenable()) {
      set_ppsenable(from.ppsenable());
    }
    if (from.has_refenable()) {
      set_refenable(from.refenable());
    }
    if (from.has_iffrequency()) {
      set_iffrequency(from.iffrequency());
    }
    if (from.has_writeaux()) {
      set_writeaux(from.writeaux());
    }
    if (from.has_exportenable()) {
      set_exportenable(from.exportenable());
    }
    if (from.has_videolength()) {
      set_videolength(from.videolength());
    }
    if (from.has_sensorname()) {
      set_sensorname(from.sensorname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_psdipaddress()) {
      set_psdipaddress(from.psdipaddress());
    }
    if (from.has_psdperiod()) {
      set_psdperiod(from.psdperiod());
    }
    if (from.has_jpegperiod()) {
      set_jpegperiod(from.jpegperiod());
    }
    if (from.has_xmlperiod()) {
      set_xmlperiod(from.xmlperiod());
    }
    if (from.has_protectarch()) {
      set_protectarch(from.protectarch());
    }
    if (from.has_midasbundling()) {
      set_midasbundling(from.midasbundling());
    }
    if (from.has_remotethresh()) {
      set_remotethresh(from.remotethresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MacroOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MacroOptions::CopyFrom(const MacroOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MacroOptions::IsInitialized() const {

  return true;
}

void MacroOptions::Swap(MacroOptions* other) {
  if (other != this) {
    std::swap(autocontrol_, other->autocontrol_);
    std::swap(ppsenable_, other->ppsenable_);
    std::swap(refenable_, other->refenable_);
    std::swap(iffrequency_, other->iffrequency_);
    std::swap(writeaux_, other->writeaux_);
    std::swap(exportenable_, other->exportenable_);
    std::swap(videolength_, other->videolength_);
    std::swap(sensorname_, other->sensorname_);
    std::swap(psdipaddress_, other->psdipaddress_);
    std::swap(psdperiod_, other->psdperiod_);
    std::swap(jpegperiod_, other->jpegperiod_);
    std::swap(xmlperiod_, other->xmlperiod_);
    std::swap(protectarch_, other->protectarch_);
    std::swap(midasbundling_, other->midasbundling_);
    std::swap(remotethresh_, other->remotethresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MacroOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MacroOptions_descriptor_;
  metadata.reflection = MacroOptions_reflection_;
  return metadata;
}


// ===================================================================

::std::string* FalconVisionConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int FalconVisionConfig::kMsgNameFieldNumber;
const int FalconVisionConfig::kReadPortFieldNumber;
const int FalconVisionConfig::kWritePortFieldNumber;
const int FalconVisionConfig::kMsgBufLenFieldNumber;
const int FalconVisionConfig::kXmlEnableFieldNumber;
const int FalconVisionConfig::kXmlClassFieldNumber;
const int FalconVisionConfig::kXmlSourceFieldNumber;
const int FalconVisionConfig::kXmlPathFieldNumber;
const int FalconVisionConfig::kXmlWorkstationFieldNumber;
const int FalconVisionConfig::kXmlPeriodFieldNumber;
const int FalconVisionConfig::kWorkstationWhitelistFieldNumber;
#endif  // !_MSC_VER

FalconVisionConfig::FalconVisionConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FalconVisionConfig::InitAsDefaultInstance() {
}

FalconVisionConfig::FalconVisionConfig(const FalconVisionConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FalconVisionConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  readport_ = 0;
  writeport_ = 0;
  msgbuflen_ = 0;
  xmlenable_ = false;
  xmlclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xmlsource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xmlpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xmlworkstation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xmlperiod_ = 0;
  workstationwhitelist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FalconVisionConfig::~FalconVisionConfig() {
  SharedDtor();
}

void FalconVisionConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (xmlclass_ != &::google::protobuf::internal::kEmptyString) {
    delete xmlclass_;
  }
  if (xmlsource_ != &::google::protobuf::internal::kEmptyString) {
    delete xmlsource_;
  }
  if (xmlpath_ != &::google::protobuf::internal::kEmptyString) {
    delete xmlpath_;
  }
  if (xmlworkstation_ != &::google::protobuf::internal::kEmptyString) {
    delete xmlworkstation_;
  }
  if (workstationwhitelist_ != &::google::protobuf::internal::kEmptyString) {
    delete workstationwhitelist_;
  }
  if (this != default_instance_) {
  }
}

void FalconVisionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FalconVisionConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FalconVisionConfig_descriptor_;
}

const FalconVisionConfig& FalconVisionConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

FalconVisionConfig* FalconVisionConfig::default_instance_ = NULL;

FalconVisionConfig* FalconVisionConfig::New() const {
  return new FalconVisionConfig;
}

void FalconVisionConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    readport_ = 0;
    writeport_ = 0;
    msgbuflen_ = 0;
    xmlenable_ = false;
    if (has_xmlclass()) {
      if (xmlclass_ != &::google::protobuf::internal::kEmptyString) {
        xmlclass_->clear();
      }
    }
    if (has_xmlsource()) {
      if (xmlsource_ != &::google::protobuf::internal::kEmptyString) {
        xmlsource_->clear();
      }
    }
    if (has_xmlpath()) {
      if (xmlpath_ != &::google::protobuf::internal::kEmptyString) {
        xmlpath_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_xmlworkstation()) {
      if (xmlworkstation_ != &::google::protobuf::internal::kEmptyString) {
        xmlworkstation_->clear();
      }
    }
    xmlperiod_ = 0;
    if (has_workstationwhitelist()) {
      if (workstationwhitelist_ != &::google::protobuf::internal::kEmptyString) {
        workstationwhitelist_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FalconVisionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "FALCON_VISION_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_readPort;
        break;
      }

      // optional int32 readPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &readport_)));
          set_has_readport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_writePort;
        break;
      }

      // optional int32 writePort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writeport_)));
          set_has_writeport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msgBufLen;
        break;
      }

      // optional int32 msgBufLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgBufLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgbuflen_)));
          set_has_msgbuflen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_xmlEnable;
        break;
      }

      // optional bool xmlEnable = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xmlEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xmlenable_)));
          set_has_xmlenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_xmlClass;
        break;
      }

      // optional string xmlClass = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xmlClass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlclass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xmlclass().data(), this->xmlclass().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_xmlSource;
        break;
      }

      // optional string xmlSource = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xmlSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xmlsource().data(), this->xmlsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_xmlPath;
        break;
      }

      // optional string xmlPath = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xmlPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xmlpath().data(), this->xmlpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_xmlWorkstation;
        break;
      }

      // optional string xmlWorkstation = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xmlWorkstation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlworkstation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xmlworkstation().data(), this->xmlworkstation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_xmlPeriod;
        break;
      }

      // optional int32 xmlPeriod = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xmlPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xmlperiod_)));
          set_has_xmlperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_workstationWhitelist;
        break;
      }

      // optional string workstationWhitelist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_workstationWhitelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workstationwhitelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->workstationwhitelist().data(), this->workstationwhitelist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FalconVisionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "FALCON_VISION_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 readPort = 2;
  if (has_readport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->readport(), output);
  }

  // optional int32 writePort = 3;
  if (has_writeport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->writeport(), output);
  }

  // optional int32 msgBufLen = 4;
  if (has_msgbuflen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msgbuflen(), output);
  }

  // optional bool xmlEnable = 5;
  if (has_xmlenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->xmlenable(), output);
  }

  // optional string xmlClass = 6;
  if (has_xmlclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlclass().data(), this->xmlclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->xmlclass(), output);
  }

  // optional string xmlSource = 7;
  if (has_xmlsource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlsource().data(), this->xmlsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->xmlsource(), output);
  }

  // optional string xmlPath = 8;
  if (has_xmlpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlpath().data(), this->xmlpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->xmlpath(), output);
  }

  // optional string xmlWorkstation = 9;
  if (has_xmlworkstation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlworkstation().data(), this->xmlworkstation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->xmlworkstation(), output);
  }

  // optional int32 xmlPeriod = 10;
  if (has_xmlperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->xmlperiod(), output);
  }

  // optional string workstationWhitelist = 11;
  if (has_workstationwhitelist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->workstationwhitelist().data(), this->workstationwhitelist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->workstationwhitelist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FalconVisionConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "FALCON_VISION_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 readPort = 2;
  if (has_readport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->readport(), target);
  }

  // optional int32 writePort = 3;
  if (has_writeport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->writeport(), target);
  }

  // optional int32 msgBufLen = 4;
  if (has_msgbuflen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->msgbuflen(), target);
  }

  // optional bool xmlEnable = 5;
  if (has_xmlenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->xmlenable(), target);
  }

  // optional string xmlClass = 6;
  if (has_xmlclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlclass().data(), this->xmlclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->xmlclass(), target);
  }

  // optional string xmlSource = 7;
  if (has_xmlsource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlsource().data(), this->xmlsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->xmlsource(), target);
  }

  // optional string xmlPath = 8;
  if (has_xmlpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlpath().data(), this->xmlpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->xmlpath(), target);
  }

  // optional string xmlWorkstation = 9;
  if (has_xmlworkstation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlworkstation().data(), this->xmlworkstation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->xmlworkstation(), target);
  }

  // optional int32 xmlPeriod = 10;
  if (has_xmlperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->xmlperiod(), target);
  }

  // optional string workstationWhitelist = 11;
  if (has_workstationwhitelist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->workstationwhitelist().data(), this->workstationwhitelist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->workstationwhitelist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FalconVisionConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "FALCON_VISION_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 readPort = 2;
    if (has_readport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->readport());
    }

    // optional int32 writePort = 3;
    if (has_writeport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writeport());
    }

    // optional int32 msgBufLen = 4;
    if (has_msgbuflen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgbuflen());
    }

    // optional bool xmlEnable = 5;
    if (has_xmlenable()) {
      total_size += 1 + 1;
    }

    // optional string xmlClass = 6;
    if (has_xmlclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlclass());
    }

    // optional string xmlSource = 7;
    if (has_xmlsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlsource());
    }

    // optional string xmlPath = 8;
    if (has_xmlpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlpath());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string xmlWorkstation = 9;
    if (has_xmlworkstation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlworkstation());
    }

    // optional int32 xmlPeriod = 10;
    if (has_xmlperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xmlperiod());
    }

    // optional string workstationWhitelist = 11;
    if (has_workstationwhitelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->workstationwhitelist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FalconVisionConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FalconVisionConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FalconVisionConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FalconVisionConfig::MergeFrom(const FalconVisionConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_readport()) {
      set_readport(from.readport());
    }
    if (from.has_writeport()) {
      set_writeport(from.writeport());
    }
    if (from.has_msgbuflen()) {
      set_msgbuflen(from.msgbuflen());
    }
    if (from.has_xmlenable()) {
      set_xmlenable(from.xmlenable());
    }
    if (from.has_xmlclass()) {
      set_xmlclass(from.xmlclass());
    }
    if (from.has_xmlsource()) {
      set_xmlsource(from.xmlsource());
    }
    if (from.has_xmlpath()) {
      set_xmlpath(from.xmlpath());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_xmlworkstation()) {
      set_xmlworkstation(from.xmlworkstation());
    }
    if (from.has_xmlperiod()) {
      set_xmlperiod(from.xmlperiod());
    }
    if (from.has_workstationwhitelist()) {
      set_workstationwhitelist(from.workstationwhitelist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FalconVisionConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FalconVisionConfig::CopyFrom(const FalconVisionConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FalconVisionConfig::IsInitialized() const {

  return true;
}

void FalconVisionConfig::Swap(FalconVisionConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(readport_, other->readport_);
    std::swap(writeport_, other->writeport_);
    std::swap(msgbuflen_, other->msgbuflen_);
    std::swap(xmlenable_, other->xmlenable_);
    std::swap(xmlclass_, other->xmlclass_);
    std::swap(xmlsource_, other->xmlsource_);
    std::swap(xmlpath_, other->xmlpath_);
    std::swap(xmlworkstation_, other->xmlworkstation_);
    std::swap(xmlperiod_, other->xmlperiod_);
    std::swap(workstationwhitelist_, other->workstationwhitelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FalconVisionConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FalconVisionConfig_descriptor_;
  metadata.reflection = FalconVisionConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GSLManagerConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GSLManagerConfig::kMsgNameFieldNumber;
const int GSLManagerConfig::kDbnameFieldNumber;
const int GSLManagerConfig::kDbuserFieldNumber;
const int GSLManagerConfig::kDbhostFieldNumber;
const int GSLManagerConfig::kGlobalSignalTimeoutFieldNumber;
#endif  // !_MSC_VER

GSLManagerConfig::GSLManagerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSLManagerConfig::InitAsDefaultInstance() {
}

GSLManagerConfig::GSLManagerConfig(const GSLManagerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSLManagerConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalsignaltimeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSLManagerConfig::~GSLManagerConfig() {
  SharedDtor();
}

void GSLManagerConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (dbuser_ != &::google::protobuf::internal::kEmptyString) {
    delete dbuser_;
  }
  if (dbhost_ != &::google::protobuf::internal::kEmptyString) {
    delete dbhost_;
  }
  if (this != default_instance_) {
  }
}

void GSLManagerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSLManagerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSLManagerConfig_descriptor_;
}

const GSLManagerConfig& GSLManagerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

GSLManagerConfig* GSLManagerConfig::default_instance_ = NULL;

GSLManagerConfig* GSLManagerConfig::New() const {
  return new GSLManagerConfig;
}

void GSLManagerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::kEmptyString) {
        dbname_->clear();
      }
    }
    if (has_dbuser()) {
      if (dbuser_ != &::google::protobuf::internal::kEmptyString) {
        dbuser_->clear();
      }
    }
    if (has_dbhost()) {
      if (dbhost_ != &::google::protobuf::internal::kEmptyString) {
        dbhost_->clear();
      }
    }
    globalsignaltimeout_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSLManagerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GSL_MANAGER_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dbname;
        break;
      }

      // optional string dbname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dbuser;
        break;
      }

      // optional string dbuser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbuser().data(), this->dbuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dbhost;
        break;
      }

      // optional string dbhost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbhost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbhost().data(), this->dbhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_globalSignalTimeout;
        break;
      }

      // optional int32 globalSignalTimeout = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_globalSignalTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &globalsignaltimeout_)));
          set_has_globalsignaltimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSLManagerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GSL_MANAGER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string dbname = 2;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dbname(), output);
  }

  // optional string dbuser = 3;
  if (has_dbuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbuser().data(), this->dbuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dbuser(), output);
  }

  // optional string dbhost = 4;
  if (has_dbhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbhost().data(), this->dbhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dbhost(), output);
  }

  // optional int32 globalSignalTimeout = 5;
  if (has_globalsignaltimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->globalsignaltimeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSLManagerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GSL_MANAGER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string dbname = 2;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dbname(), target);
  }

  // optional string dbuser = 3;
  if (has_dbuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbuser().data(), this->dbuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbuser(), target);
  }

  // optional string dbhost = 4;
  if (has_dbhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbhost().data(), this->dbhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dbhost(), target);
  }

  // optional int32 globalSignalTimeout = 5;
  if (has_globalsignaltimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->globalsignaltimeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSLManagerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GSL_MANAGER_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string dbname = 2;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

    // optional string dbuser = 3;
    if (has_dbuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbuser());
    }

    // optional string dbhost = 4;
    if (has_dbhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbhost());
    }

    // optional int32 globalSignalTimeout = 5;
    if (has_globalsignaltimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->globalsignaltimeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSLManagerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSLManagerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSLManagerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSLManagerConfig::MergeFrom(const GSLManagerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_dbuser()) {
      set_dbuser(from.dbuser());
    }
    if (from.has_dbhost()) {
      set_dbhost(from.dbhost());
    }
    if (from.has_globalsignaltimeout()) {
      set_globalsignaltimeout(from.globalsignaltimeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSLManagerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSLManagerConfig::CopyFrom(const GSLManagerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSLManagerConfig::IsInitialized() const {

  return true;
}

void GSLManagerConfig::Swap(GSLManagerConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(dbname_, other->dbname_);
    std::swap(dbuser_, other->dbuser_);
    std::swap(dbhost_, other->dbhost_);
    std::swap(globalsignaltimeout_, other->globalsignaltimeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSLManagerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSLManagerConfig_descriptor_;
  metadata.reflection = GSLManagerConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ExtraForkConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExtraForkConfig::kMsgNameFieldNumber;
const int ExtraForkConfig::kChannelsFieldNumber;
#endif  // !_MSC_VER

ExtraForkConfig::ExtraForkConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraForkConfig::InitAsDefaultInstance() {
}

ExtraForkConfig::ExtraForkConfig(const ExtraForkConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraForkConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraForkConfig::~ExtraForkConfig() {
  SharedDtor();
}

void ExtraForkConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void ExtraForkConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraForkConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraForkConfig_descriptor_;
}

const ExtraForkConfig& ExtraForkConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

ExtraForkConfig* ExtraForkConfig::default_instance_ = NULL;

ExtraForkConfig* ExtraForkConfig::New() const {
  return new ExtraForkConfig;
}

void ExtraForkConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraForkConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTRA_FORK_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channels;
        break;
      }

      // repeated .falcon_common_msg.ExtraForkChannel channels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraForkConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated .falcon_common_msg.ExtraForkChannel channels = 2;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->channels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraForkConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTRA_FORK_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated .falcon_common_msg.ExtraForkChannel channels = 2;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->channels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraForkConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTRA_FORK_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated .falcon_common_msg.ExtraForkChannel channels = 2;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraForkConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraForkConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraForkConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraForkConfig::MergeFrom(const ExtraForkConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraForkConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraForkConfig::CopyFrom(const ExtraForkConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraForkConfig::IsInitialized() const {

  return true;
}

void ExtraForkConfig::Swap(ExtraForkConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    channels_.Swap(&other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraForkConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraForkConfig_descriptor_;
  metadata.reflection = ExtraForkConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GPSMonitorConfig::_default_msgname_ = NULL;
::std::string* GPSMonitorConfig::_default_gpsserver_ = NULL;
#ifndef _MSC_VER
const int GPSMonitorConfig::kMsgNameFieldNumber;
const int GPSMonitorConfig::kGpsServerFieldNumber;
const int GPSMonitorConfig::kGPSIPFieldNumber;
const int GPSMonitorConfig::kGpsPortFieldNumber;
const int GPSMonitorConfig::kGpsPerFieldNumber;
const int GPSMonitorConfig::kGpsWriteFileFieldNumber;
const int GPSMonitorConfig::kGpsFileIntFieldNumber;
#endif  // !_MSC_VER

GPSMonitorConfig::GPSMonitorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPSMonitorConfig::InitAsDefaultInstance() {
}

GPSMonitorConfig::GPSMonitorConfig(const GPSMonitorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPSMonitorConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  gpsserver_ = const_cast< ::std::string*>(_default_gpsserver_);
  gpsip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gpsport_ = 0;
  gpsper_ = 5;
  gpswritefile_ = 1;
  gpsfileint_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSMonitorConfig::~GPSMonitorConfig() {
  SharedDtor();
}

void GPSMonitorConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (gpsserver_ != _default_gpsserver_) {
    delete gpsserver_;
  }
  if (gpsip_ != &::google::protobuf::internal::kEmptyString) {
    delete gpsip_;
  }
  if (this != default_instance_) {
  }
}

void GPSMonitorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSMonitorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSMonitorConfig_descriptor_;
}

const GPSMonitorConfig& GPSMonitorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

GPSMonitorConfig* GPSMonitorConfig::default_instance_ = NULL;

GPSMonitorConfig* GPSMonitorConfig::New() const {
  return new GPSMonitorConfig;
}

void GPSMonitorConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_gpsserver()) {
      if (gpsserver_ != _default_gpsserver_) {
        gpsserver_->assign(*_default_gpsserver_);
      }
    }
    if (has_gpsip()) {
      if (gpsip_ != &::google::protobuf::internal::kEmptyString) {
        gpsip_->clear();
      }
    }
    gpsport_ = 0;
    gpsper_ = 5;
    gpswritefile_ = 1;
    gpsfileint_ = 10;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSMonitorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GPS_MONITOR_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gpsServer;
        break;
      }

      // optional string gpsServer = 2 [default = "OFF"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsServer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsserver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsserver().data(), this->gpsserver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GPSIP;
        break;
      }

      // optional string GPSIP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GPSIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsip().data(), this->gpsip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gpsPort;
        break;
      }

      // optional int32 gpsPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpsPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpsport_)));
          set_has_gpsport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gpsPer;
        break;
      }

      // optional int32 gpsPer = 5 [default = 5];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpsPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpsper_)));
          set_has_gpsper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gpsWriteFile;
        break;
      }

      // optional int32 gpsWriteFile = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpsWriteFile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpswritefile_)));
          set_has_gpswritefile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gpsFileInt;
        break;
      }

      // optional int32 gpsFileInt = 7 [default = 10];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpsFileInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpsfileint_)));
          set_has_gpsfileint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPSMonitorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GPS_MONITOR_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string gpsServer = 2 [default = "OFF"];
  if (has_gpsserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsserver().data(), this->gpsserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gpsserver(), output);
  }

  // optional string GPSIP = 3;
  if (has_gpsip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsip().data(), this->gpsip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gpsip(), output);
  }

  // optional int32 gpsPort = 4;
  if (has_gpsport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gpsport(), output);
  }

  // optional int32 gpsPer = 5 [default = 5];
  if (has_gpsper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gpsper(), output);
  }

  // optional int32 gpsWriteFile = 6 [default = 1];
  if (has_gpswritefile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gpswritefile(), output);
  }

  // optional int32 gpsFileInt = 7 [default = 10];
  if (has_gpsfileint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gpsfileint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPSMonitorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GPS_MONITOR_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string gpsServer = 2 [default = "OFF"];
  if (has_gpsserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsserver().data(), this->gpsserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gpsserver(), target);
  }

  // optional string GPSIP = 3;
  if (has_gpsip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsip().data(), this->gpsip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gpsip(), target);
  }

  // optional int32 gpsPort = 4;
  if (has_gpsport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gpsport(), target);
  }

  // optional int32 gpsPer = 5 [default = 5];
  if (has_gpsper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gpsper(), target);
  }

  // optional int32 gpsWriteFile = 6 [default = 1];
  if (has_gpswritefile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gpswritefile(), target);
  }

  // optional int32 gpsFileInt = 7 [default = 10];
  if (has_gpsfileint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gpsfileint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPSMonitorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GPS_MONITOR_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string gpsServer = 2 [default = "OFF"];
    if (has_gpsserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsserver());
    }

    // optional string GPSIP = 3;
    if (has_gpsip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsip());
    }

    // optional int32 gpsPort = 4;
    if (has_gpsport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpsport());
    }

    // optional int32 gpsPer = 5 [default = 5];
    if (has_gpsper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpsper());
    }

    // optional int32 gpsWriteFile = 6 [default = 1];
    if (has_gpswritefile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpswritefile());
    }

    // optional int32 gpsFileInt = 7 [default = 10];
    if (has_gpsfileint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpsfileint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSMonitorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSMonitorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSMonitorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSMonitorConfig::MergeFrom(const GPSMonitorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_gpsserver()) {
      set_gpsserver(from.gpsserver());
    }
    if (from.has_gpsip()) {
      set_gpsip(from.gpsip());
    }
    if (from.has_gpsport()) {
      set_gpsport(from.gpsport());
    }
    if (from.has_gpsper()) {
      set_gpsper(from.gpsper());
    }
    if (from.has_gpswritefile()) {
      set_gpswritefile(from.gpswritefile());
    }
    if (from.has_gpsfileint()) {
      set_gpsfileint(from.gpsfileint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSMonitorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSMonitorConfig::CopyFrom(const GPSMonitorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSMonitorConfig::IsInitialized() const {

  return true;
}

void GPSMonitorConfig::Swap(GPSMonitorConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(gpsserver_, other->gpsserver_);
    std::swap(gpsip_, other->gpsip_);
    std::swap(gpsport_, other->gpsport_);
    std::swap(gpsper_, other->gpsper_);
    std::swap(gpswritefile_, other->gpswritefile_);
    std::swap(gpsfileint_, other->gpsfileint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSMonitorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSMonitorConfig_descriptor_;
  metadata.reflection = GPSMonitorConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* FalconUtilitiesConfig::_default_msgname_ = NULL;
::std::string* FalconUtilitiesConfig::_default_archive_ = NULL;
::std::string* FalconUtilitiesConfig::_default_delarchives_ = NULL;
#ifndef _MSC_VER
const int FalconUtilitiesConfig::kMsgNameFieldNumber;
const int FalconUtilitiesConfig::kArchiveFieldNumber;
const int FalconUtilitiesConfig::kDelArchivesFieldNumber;
#endif  // !_MSC_VER

FalconUtilitiesConfig::FalconUtilitiesConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FalconUtilitiesConfig::InitAsDefaultInstance() {
}

FalconUtilitiesConfig::FalconUtilitiesConfig(const FalconUtilitiesConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FalconUtilitiesConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  archive_ = const_cast< ::std::string*>(_default_archive_);
  delarchives_ = const_cast< ::std::string*>(_default_delarchives_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FalconUtilitiesConfig::~FalconUtilitiesConfig() {
  SharedDtor();
}

void FalconUtilitiesConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (archive_ != _default_archive_) {
    delete archive_;
  }
  if (delarchives_ != _default_delarchives_) {
    delete delarchives_;
  }
  if (this != default_instance_) {
  }
}

void FalconUtilitiesConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FalconUtilitiesConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FalconUtilitiesConfig_descriptor_;
}

const FalconUtilitiesConfig& FalconUtilitiesConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

FalconUtilitiesConfig* FalconUtilitiesConfig::default_instance_ = NULL;

FalconUtilitiesConfig* FalconUtilitiesConfig::New() const {
  return new FalconUtilitiesConfig;
}

void FalconUtilitiesConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_archive()) {
      if (archive_ != _default_archive_) {
        archive_->assign(*_default_archive_);
      }
    }
    if (has_delarchives()) {
      if (delarchives_ != _default_delarchives_) {
        delarchives_->assign(*_default_delarchives_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FalconUtilitiesConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "FALCON_UTILITIES_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_archive;
        break;
      }

      // optional string archive = 2 [default = "OFF"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_archive()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->archive().data(), this->archive().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_delArchives;
        break;
      }

      // optional string delArchives = 3 [default = "OFF"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delArchives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delarchives()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->delarchives().data(), this->delarchives().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FalconUtilitiesConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "FALCON_UTILITIES_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string archive = 2 [default = "OFF"];
  if (has_archive()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->archive().data(), this->archive().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->archive(), output);
  }

  // optional string delArchives = 3 [default = "OFF"];
  if (has_delarchives()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delarchives().data(), this->delarchives().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->delarchives(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FalconUtilitiesConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "FALCON_UTILITIES_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string archive = 2 [default = "OFF"];
  if (has_archive()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->archive().data(), this->archive().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->archive(), target);
  }

  // optional string delArchives = 3 [default = "OFF"];
  if (has_delarchives()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delarchives().data(), this->delarchives().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->delarchives(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FalconUtilitiesConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "FALCON_UTILITIES_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string archive = 2 [default = "OFF"];
    if (has_archive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->archive());
    }

    // optional string delArchives = 3 [default = "OFF"];
    if (has_delarchives()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->delarchives());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FalconUtilitiesConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FalconUtilitiesConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FalconUtilitiesConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FalconUtilitiesConfig::MergeFrom(const FalconUtilitiesConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_archive()) {
      set_archive(from.archive());
    }
    if (from.has_delarchives()) {
      set_delarchives(from.delarchives());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FalconUtilitiesConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FalconUtilitiesConfig::CopyFrom(const FalconUtilitiesConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FalconUtilitiesConfig::IsInitialized() const {

  return true;
}

void FalconUtilitiesConfig::Swap(FalconUtilitiesConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(archive_, other->archive_);
    std::swap(delarchives_, other->delarchives_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FalconUtilitiesConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FalconUtilitiesConfig_descriptor_;
  metadata.reflection = FalconUtilitiesConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RTHopAnalysisConfig::_default_msgname_ = NULL;
::std::string* RTHopAnalysisConfig::_default_scrypt_ = NULL;
#ifndef _MSC_VER
const int RTHopAnalysisConfig::kMsgNameFieldNumber;
const int RTHopAnalysisConfig::kScryptFieldNumber;
#endif  // !_MSC_VER

RTHopAnalysisConfig::RTHopAnalysisConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RTHopAnalysisConfig::InitAsDefaultInstance() {
}

RTHopAnalysisConfig::RTHopAnalysisConfig(const RTHopAnalysisConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RTHopAnalysisConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  scrypt_ = const_cast< ::std::string*>(_default_scrypt_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RTHopAnalysisConfig::~RTHopAnalysisConfig() {
  SharedDtor();
}

void RTHopAnalysisConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (scrypt_ != _default_scrypt_) {
    delete scrypt_;
  }
  if (this != default_instance_) {
  }
}

void RTHopAnalysisConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RTHopAnalysisConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RTHopAnalysisConfig_descriptor_;
}

const RTHopAnalysisConfig& RTHopAnalysisConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

RTHopAnalysisConfig* RTHopAnalysisConfig::default_instance_ = NULL;

RTHopAnalysisConfig* RTHopAnalysisConfig::New() const {
  return new RTHopAnalysisConfig;
}

void RTHopAnalysisConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_scrypt()) {
      if (scrypt_ != _default_scrypt_) {
        scrypt_->assign(*_default_scrypt_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RTHopAnalysisConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RTHOP_ANALYSIS_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scrypt;
        break;
      }

      // optional string scrypt = 2 [default = "/user/scrypts/rthops.xml"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scrypt().data(), this->scrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RTHopAnalysisConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RTHOP_ANALYSIS_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string scrypt = 2 [default = "/user/scrypts/rthops.xml"];
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->scrypt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RTHopAnalysisConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RTHOP_ANALYSIS_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string scrypt = 2 [default = "/user/scrypts/rthops.xml"];
  if (has_scrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scrypt().data(), this->scrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scrypt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RTHopAnalysisConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RTHOP_ANALYSIS_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string scrypt = 2 [default = "/user/scrypts/rthops.xml"];
    if (has_scrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scrypt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RTHopAnalysisConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RTHopAnalysisConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RTHopAnalysisConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RTHopAnalysisConfig::MergeFrom(const RTHopAnalysisConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_scrypt()) {
      set_scrypt(from.scrypt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RTHopAnalysisConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTHopAnalysisConfig::CopyFrom(const RTHopAnalysisConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTHopAnalysisConfig::IsInitialized() const {

  return true;
}

void RTHopAnalysisConfig::Swap(RTHopAnalysisConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(scrypt_, other->scrypt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RTHopAnalysisConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RTHopAnalysisConfig_descriptor_;
  metadata.reflection = RTHopAnalysisConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GeoSnapConfig::_default_msgname_ = NULL;
::std::string* GeoSnapConfig::_default_geo_enabled_ = NULL;
::std::string* GeoSnapConfig::_default_auto_launch_ = NULL;
::std::string* GeoSnapConfig::_default_skip_camel_transfer_ = NULL;
#ifndef _MSC_VER
const int GeoSnapConfig::kMsgNameFieldNumber;
const int GeoSnapConfig::kGeoEnabledFieldNumber;
const int GeoSnapConfig::kAutoLaunchFieldNumber;
const int GeoSnapConfig::kTempWriteAuxFieldNumber;
const int GeoSnapConfig::kAntennaFieldNumber;
const int GeoSnapConfig::kMissionFieldNumber;
const int GeoSnapConfig::kPathFieldNumber;
const int GeoSnapConfig::kRxPathDelayFieldNumber;
const int GeoSnapConfig::kRxSiteFieldNumber;
const int GeoSnapConfig::kFeedLatFieldNumber;
const int GeoSnapConfig::kFeedLonFieldNumber;
const int GeoSnapConfig::kFeedAltFieldNumber;
const int GeoSnapConfig::kSystemFoaSigmaFieldNumber;
const int GeoSnapConfig::kSystemToaSigmaFieldNumber;
const int GeoSnapConfig::kDesiredinterpolationFieldNumber;
const int GeoSnapConfig::kUseSvKeywordsFieldNumber;
const int GeoSnapConfig::kSkipCamelTransferFieldNumber;
const int GeoSnapConfig::kPosxFieldNumber;
const int GeoSnapConfig::kPosyFieldNumber;
const int GeoSnapConfig::kPoszFieldNumber;
const int GeoSnapConfig::kDefaultGeoAppFieldNumber;
#endif  // !_MSC_VER

GeoSnapConfig::GeoSnapConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoSnapConfig::InitAsDefaultInstance() {
}

GeoSnapConfig::GeoSnapConfig(const GeoSnapConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoSnapConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  geo_enabled_ = const_cast< ::std::string*>(_default_geo_enabled_);
  auto_launch_ = const_cast< ::std::string*>(_default_auto_launch_);
  temp_write_aux_ = 0;
  antenna_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mission_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rx_path_delay_ = 0;
  rx_site_ = 0;
  feed_lat_ = 0;
  feed_lon_ = 0;
  feed_alt_ = 0;
  system_foa_sigma_ = 0;
  system_toa_sigma_ = 0;
  desiredinterpolation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  use_sv_keywords_ = 0;
  skip_camel_transfer_ = const_cast< ::std::string*>(_default_skip_camel_transfer_);
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  default_geo_app_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoSnapConfig::~GeoSnapConfig() {
  SharedDtor();
}

void GeoSnapConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (geo_enabled_ != _default_geo_enabled_) {
    delete geo_enabled_;
  }
  if (auto_launch_ != _default_auto_launch_) {
    delete auto_launch_;
  }
  if (antenna_ != &::google::protobuf::internal::kEmptyString) {
    delete antenna_;
  }
  if (mission_ != &::google::protobuf::internal::kEmptyString) {
    delete mission_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (desiredinterpolation_ != &::google::protobuf::internal::kEmptyString) {
    delete desiredinterpolation_;
  }
  if (skip_camel_transfer_ != _default_skip_camel_transfer_) {
    delete skip_camel_transfer_;
  }
  if (default_geo_app_ != &::google::protobuf::internal::kEmptyString) {
    delete default_geo_app_;
  }
  if (this != default_instance_) {
  }
}

void GeoSnapConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoSnapConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoSnapConfig_descriptor_;
}

const GeoSnapConfig& GeoSnapConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

GeoSnapConfig* GeoSnapConfig::default_instance_ = NULL;

GeoSnapConfig* GeoSnapConfig::New() const {
  return new GeoSnapConfig;
}

void GeoSnapConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_geo_enabled()) {
      if (geo_enabled_ != _default_geo_enabled_) {
        geo_enabled_->assign(*_default_geo_enabled_);
      }
    }
    if (has_auto_launch()) {
      if (auto_launch_ != _default_auto_launch_) {
        auto_launch_->assign(*_default_auto_launch_);
      }
    }
    temp_write_aux_ = 0;
    if (has_antenna()) {
      if (antenna_ != &::google::protobuf::internal::kEmptyString) {
        antenna_->clear();
      }
    }
    if (has_mission()) {
      if (mission_ != &::google::protobuf::internal::kEmptyString) {
        mission_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    rx_path_delay_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rx_site_ = 0;
    feed_lat_ = 0;
    feed_lon_ = 0;
    feed_alt_ = 0;
    system_foa_sigma_ = 0;
    system_toa_sigma_ = 0;
    if (has_desiredinterpolation()) {
      if (desiredinterpolation_ != &::google::protobuf::internal::kEmptyString) {
        desiredinterpolation_->clear();
      }
    }
    use_sv_keywords_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_skip_camel_transfer()) {
      if (skip_camel_transfer_ != _default_skip_camel_transfer_) {
        skip_camel_transfer_->assign(*_default_skip_camel_transfer_);
      }
    }
    posx_ = 0;
    posy_ = 0;
    posz_ = 0;
    if (has_default_geo_app()) {
      if (default_geo_app_ != &::google::protobuf::internal::kEmptyString) {
        default_geo_app_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoSnapConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEO_SNAP_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_geo_enabled;
        break;
      }

      // optional string geo_enabled = 2 [default = "OFF"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo_enabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geo_enabled()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geo_enabled().data(), this->geo_enabled().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_auto_launch;
        break;
      }

      // optional string auto_launch = 3 [default = "ON"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auto_launch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auto_launch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auto_launch().data(), this->auto_launch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_temp_write_aux;
        break;
      }

      // optional int32 temp_write_aux = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temp_write_aux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temp_write_aux_)));
          set_has_temp_write_aux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_antenna;
        break;
      }

      // optional string antenna = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_antenna:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_antenna()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->antenna().data(), this->antenna().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mission;
        break;
      }

      // optional string mission = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mission()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mission().data(), this->mission().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_path;
        break;
      }

      // optional string path = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rx_path_delay;
        break;
      }

      // optional int32 rx_path_delay = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rx_path_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rx_path_delay_)));
          set_has_rx_path_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rx_site;
        break;
      }

      // optional int32 rx_site = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rx_site:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rx_site_)));
          set_has_rx_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_feed_lat;
        break;
      }

      // optional float feed_lat = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_feed_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feed_lat_)));
          set_has_feed_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_feed_lon;
        break;
      }

      // optional float feed_lon = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_feed_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feed_lon_)));
          set_has_feed_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_feed_alt;
        break;
      }

      // optional float feed_alt = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_feed_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feed_alt_)));
          set_has_feed_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_system_foa_sigma;
        break;
      }

      // optional float system_foa_sigma = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_system_foa_sigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &system_foa_sigma_)));
          set_has_system_foa_sigma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_system_toa_sigma;
        break;
      }

      // optional float system_toa_sigma = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_system_toa_sigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &system_toa_sigma_)));
          set_has_system_toa_sigma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_desiredinterpolation;
        break;
      }

      // optional string desiredinterpolation = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desiredinterpolation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desiredinterpolation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desiredinterpolation().data(), this->desiredinterpolation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_use_sv_keywords;
        break;
      }

      // optional int32 use_sv_keywords = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_sv_keywords:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_sv_keywords_)));
          set_has_use_sv_keywords();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_skip_camel_transfer;
        break;
      }

      // optional string skip_camel_transfer = 17 [default = "OFF"];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skip_camel_transfer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skip_camel_transfer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skip_camel_transfer().data(), this->skip_camel_transfer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_posx;
        break;
      }

      // optional float posx = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_posy;
        break;
      }

      // optional float posy = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_posz;
        break;
      }

      // optional float posz = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_default_geo_app;
        break;
      }

      // optional string default_geo_app = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_geo_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_geo_app()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->default_geo_app().data(), this->default_geo_app().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoSnapConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEO_SNAP_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string geo_enabled = 2 [default = "OFF"];
  if (has_geo_enabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_enabled().data(), this->geo_enabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->geo_enabled(), output);
  }

  // optional string auto_launch = 3 [default = "ON"];
  if (has_auto_launch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auto_launch().data(), this->auto_launch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->auto_launch(), output);
  }

  // optional int32 temp_write_aux = 4;
  if (has_temp_write_aux()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->temp_write_aux(), output);
  }

  // optional string antenna = 5;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->antenna(), output);
  }

  // optional string mission = 6;
  if (has_mission()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mission().data(), this->mission().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mission(), output);
  }

  // optional string path = 7;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->path(), output);
  }

  // optional int32 rx_path_delay = 8;
  if (has_rx_path_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rx_path_delay(), output);
  }

  // optional int32 rx_site = 9;
  if (has_rx_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rx_site(), output);
  }

  // optional float feed_lat = 10;
  if (has_feed_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->feed_lat(), output);
  }

  // optional float feed_lon = 11;
  if (has_feed_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->feed_lon(), output);
  }

  // optional float feed_alt = 12;
  if (has_feed_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->feed_alt(), output);
  }

  // optional float system_foa_sigma = 13;
  if (has_system_foa_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->system_foa_sigma(), output);
  }

  // optional float system_toa_sigma = 14;
  if (has_system_toa_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->system_toa_sigma(), output);
  }

  // optional string desiredinterpolation = 15;
  if (has_desiredinterpolation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desiredinterpolation().data(), this->desiredinterpolation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->desiredinterpolation(), output);
  }

  // optional int32 use_sv_keywords = 16;
  if (has_use_sv_keywords()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->use_sv_keywords(), output);
  }

  // optional string skip_camel_transfer = 17 [default = "OFF"];
  if (has_skip_camel_transfer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skip_camel_transfer().data(), this->skip_camel_transfer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->skip_camel_transfer(), output);
  }

  // optional float posx = 18;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->posx(), output);
  }

  // optional float posy = 19;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->posy(), output);
  }

  // optional float posz = 20;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->posz(), output);
  }

  // optional string default_geo_app = 21;
  if (has_default_geo_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->default_geo_app().data(), this->default_geo_app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->default_geo_app(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoSnapConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEO_SNAP_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string geo_enabled = 2 [default = "OFF"];
  if (has_geo_enabled()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_enabled().data(), this->geo_enabled().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->geo_enabled(), target);
  }

  // optional string auto_launch = 3 [default = "ON"];
  if (has_auto_launch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auto_launch().data(), this->auto_launch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->auto_launch(), target);
  }

  // optional int32 temp_write_aux = 4;
  if (has_temp_write_aux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->temp_write_aux(), target);
  }

  // optional string antenna = 5;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->antenna().data(), this->antenna().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->antenna(), target);
  }

  // optional string mission = 6;
  if (has_mission()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mission().data(), this->mission().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mission(), target);
  }

  // optional string path = 7;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->path(), target);
  }

  // optional int32 rx_path_delay = 8;
  if (has_rx_path_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rx_path_delay(), target);
  }

  // optional int32 rx_site = 9;
  if (has_rx_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rx_site(), target);
  }

  // optional float feed_lat = 10;
  if (has_feed_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->feed_lat(), target);
  }

  // optional float feed_lon = 11;
  if (has_feed_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->feed_lon(), target);
  }

  // optional float feed_alt = 12;
  if (has_feed_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->feed_alt(), target);
  }

  // optional float system_foa_sigma = 13;
  if (has_system_foa_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->system_foa_sigma(), target);
  }

  // optional float system_toa_sigma = 14;
  if (has_system_toa_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->system_toa_sigma(), target);
  }

  // optional string desiredinterpolation = 15;
  if (has_desiredinterpolation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desiredinterpolation().data(), this->desiredinterpolation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->desiredinterpolation(), target);
  }

  // optional int32 use_sv_keywords = 16;
  if (has_use_sv_keywords()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->use_sv_keywords(), target);
  }

  // optional string skip_camel_transfer = 17 [default = "OFF"];
  if (has_skip_camel_transfer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skip_camel_transfer().data(), this->skip_camel_transfer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->skip_camel_transfer(), target);
  }

  // optional float posx = 18;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->posx(), target);
  }

  // optional float posy = 19;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->posy(), target);
  }

  // optional float posz = 20;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->posz(), target);
  }

  // optional string default_geo_app = 21;
  if (has_default_geo_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->default_geo_app().data(), this->default_geo_app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->default_geo_app(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoSnapConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEO_SNAP_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string geo_enabled = 2 [default = "OFF"];
    if (has_geo_enabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geo_enabled());
    }

    // optional string auto_launch = 3 [default = "ON"];
    if (has_auto_launch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auto_launch());
    }

    // optional int32 temp_write_aux = 4;
    if (has_temp_write_aux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temp_write_aux());
    }

    // optional string antenna = 5;
    if (has_antenna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->antenna());
    }

    // optional string mission = 6;
    if (has_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mission());
    }

    // optional string path = 7;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional int32 rx_path_delay = 8;
    if (has_rx_path_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rx_path_delay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 rx_site = 9;
    if (has_rx_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rx_site());
    }

    // optional float feed_lat = 10;
    if (has_feed_lat()) {
      total_size += 1 + 4;
    }

    // optional float feed_lon = 11;
    if (has_feed_lon()) {
      total_size += 1 + 4;
    }

    // optional float feed_alt = 12;
    if (has_feed_alt()) {
      total_size += 1 + 4;
    }

    // optional float system_foa_sigma = 13;
    if (has_system_foa_sigma()) {
      total_size += 1 + 4;
    }

    // optional float system_toa_sigma = 14;
    if (has_system_toa_sigma()) {
      total_size += 1 + 4;
    }

    // optional string desiredinterpolation = 15;
    if (has_desiredinterpolation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desiredinterpolation());
    }

    // optional int32 use_sv_keywords = 16;
    if (has_use_sv_keywords()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_sv_keywords());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string skip_camel_transfer = 17 [default = "OFF"];
    if (has_skip_camel_transfer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skip_camel_transfer());
    }

    // optional float posx = 18;
    if (has_posx()) {
      total_size += 2 + 4;
    }

    // optional float posy = 19;
    if (has_posy()) {
      total_size += 2 + 4;
    }

    // optional float posz = 20;
    if (has_posz()) {
      total_size += 2 + 4;
    }

    // optional string default_geo_app = 21;
    if (has_default_geo_app()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_geo_app());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoSnapConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoSnapConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoSnapConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoSnapConfig::MergeFrom(const GeoSnapConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_geo_enabled()) {
      set_geo_enabled(from.geo_enabled());
    }
    if (from.has_auto_launch()) {
      set_auto_launch(from.auto_launch());
    }
    if (from.has_temp_write_aux()) {
      set_temp_write_aux(from.temp_write_aux());
    }
    if (from.has_antenna()) {
      set_antenna(from.antenna());
    }
    if (from.has_mission()) {
      set_mission(from.mission());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_rx_path_delay()) {
      set_rx_path_delay(from.rx_path_delay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rx_site()) {
      set_rx_site(from.rx_site());
    }
    if (from.has_feed_lat()) {
      set_feed_lat(from.feed_lat());
    }
    if (from.has_feed_lon()) {
      set_feed_lon(from.feed_lon());
    }
    if (from.has_feed_alt()) {
      set_feed_alt(from.feed_alt());
    }
    if (from.has_system_foa_sigma()) {
      set_system_foa_sigma(from.system_foa_sigma());
    }
    if (from.has_system_toa_sigma()) {
      set_system_toa_sigma(from.system_toa_sigma());
    }
    if (from.has_desiredinterpolation()) {
      set_desiredinterpolation(from.desiredinterpolation());
    }
    if (from.has_use_sv_keywords()) {
      set_use_sv_keywords(from.use_sv_keywords());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_skip_camel_transfer()) {
      set_skip_camel_transfer(from.skip_camel_transfer());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_default_geo_app()) {
      set_default_geo_app(from.default_geo_app());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoSnapConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoSnapConfig::CopyFrom(const GeoSnapConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoSnapConfig::IsInitialized() const {

  return true;
}

void GeoSnapConfig::Swap(GeoSnapConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(geo_enabled_, other->geo_enabled_);
    std::swap(auto_launch_, other->auto_launch_);
    std::swap(temp_write_aux_, other->temp_write_aux_);
    std::swap(antenna_, other->antenna_);
    std::swap(mission_, other->mission_);
    std::swap(path_, other->path_);
    std::swap(rx_path_delay_, other->rx_path_delay_);
    std::swap(rx_site_, other->rx_site_);
    std::swap(feed_lat_, other->feed_lat_);
    std::swap(feed_lon_, other->feed_lon_);
    std::swap(feed_alt_, other->feed_alt_);
    std::swap(system_foa_sigma_, other->system_foa_sigma_);
    std::swap(system_toa_sigma_, other->system_toa_sigma_);
    std::swap(desiredinterpolation_, other->desiredinterpolation_);
    std::swap(use_sv_keywords_, other->use_sv_keywords_);
    std::swap(skip_camel_transfer_, other->skip_camel_transfer_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(posz_, other->posz_);
    std::swap(default_geo_app_, other->default_geo_app_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoSnapConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoSnapConfig_descriptor_;
  metadata.reflection = GeoSnapConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TGConfig::_default_msgname_ = NULL;
::std::string* TGConfig::_default_geo_test_ = NULL;
#ifndef _MSC_VER
const int TGConfig::kMsgNameFieldNumber;
const int TGConfig::kGeoTestFieldNumber;
const int TGConfig::kTelemTimeoutFieldNumber;
const int TGConfig::kGeoPriFileFieldNumber;
const int TGConfig::kStateTimeoutFieldNumber;
#endif  // !_MSC_VER

TGConfig::TGConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TGConfig::InitAsDefaultInstance() {
}

TGConfig::TGConfig(const TGConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TGConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  geo_test_ = const_cast< ::std::string*>(_default_geo_test_);
  telem_timeout_ = 400;
  geo_pri_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_timeout_ = 60;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGConfig::~TGConfig() {
  SharedDtor();
}

void TGConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (geo_test_ != _default_geo_test_) {
    delete geo_test_;
  }
  if (geo_pri_file_ != &::google::protobuf::internal::kEmptyString) {
    delete geo_pri_file_;
  }
  if (this != default_instance_) {
  }
}

void TGConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGConfig_descriptor_;
}

const TGConfig& TGConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

TGConfig* TGConfig::default_instance_ = NULL;

TGConfig* TGConfig::New() const {
  return new TGConfig;
}

void TGConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_geo_test()) {
      if (geo_test_ != _default_geo_test_) {
        geo_test_->assign(*_default_geo_test_);
      }
    }
    telem_timeout_ = 400;
    if (has_geo_pri_file()) {
      if (geo_pri_file_ != &::google::protobuf::internal::kEmptyString) {
        geo_pri_file_->clear();
      }
    }
    state_timeout_ = 60;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TG_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_geo_test;
        break;
      }

      // optional string geo_test = 2 [default = "OFF"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo_test:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geo_test()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geo_test().data(), this->geo_test().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_telem_timeout;
        break;
      }

      // optional int32 telem_timeout = 3 [default = 400];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_telem_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &telem_timeout_)));
          set_has_telem_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_geo_pri_file;
        break;
      }

      // optional string geo_pri_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo_pri_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geo_pri_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geo_pri_file().data(), this->geo_pri_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state_timeout;
        break;
      }

      // optional int32 state_timeout = 5 [default = 60];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_timeout_)));
          set_has_state_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TGConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TG_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string geo_test = 2 [default = "OFF"];
  if (has_geo_test()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_test().data(), this->geo_test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->geo_test(), output);
  }

  // optional int32 telem_timeout = 3 [default = 400];
  if (has_telem_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->telem_timeout(), output);
  }

  // optional string geo_pri_file = 4;
  if (has_geo_pri_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_pri_file().data(), this->geo_pri_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->geo_pri_file(), output);
  }

  // optional int32 state_timeout = 5 [default = 60];
  if (has_state_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state_timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TGConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TG_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string geo_test = 2 [default = "OFF"];
  if (has_geo_test()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_test().data(), this->geo_test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->geo_test(), target);
  }

  // optional int32 telem_timeout = 3 [default = 400];
  if (has_telem_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->telem_timeout(), target);
  }

  // optional string geo_pri_file = 4;
  if (has_geo_pri_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geo_pri_file().data(), this->geo_pri_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->geo_pri_file(), target);
  }

  // optional int32 state_timeout = 5 [default = 60];
  if (has_state_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state_timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TGConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TG_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string geo_test = 2 [default = "OFF"];
    if (has_geo_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geo_test());
    }

    // optional int32 telem_timeout = 3 [default = 400];
    if (has_telem_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->telem_timeout());
    }

    // optional string geo_pri_file = 4;
    if (has_geo_pri_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geo_pri_file());
    }

    // optional int32 state_timeout = 5 [default = 60];
    if (has_state_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state_timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGConfig::MergeFrom(const TGConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_geo_test()) {
      set_geo_test(from.geo_test());
    }
    if (from.has_telem_timeout()) {
      set_telem_timeout(from.telem_timeout());
    }
    if (from.has_geo_pri_file()) {
      set_geo_pri_file(from.geo_pri_file());
    }
    if (from.has_state_timeout()) {
      set_state_timeout(from.state_timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGConfig::CopyFrom(const TGConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGConfig::IsInitialized() const {

  return true;
}

void TGConfig::Swap(TGConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(geo_test_, other->geo_test_);
    std::swap(telem_timeout_, other->telem_timeout_);
    std::swap(geo_pri_file_, other->geo_pri_file_);
    std::swap(state_timeout_, other->state_timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGConfig_descriptor_;
  metadata.reflection = TGConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EventHandlerConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int EventHandlerConfig::kMsgNameFieldNumber;
const int EventHandlerConfig::kXmlEnableFieldNumber;
const int EventHandlerConfig::kXmlClassFieldNumber;
const int EventHandlerConfig::kXmlSourceFieldNumber;
const int EventHandlerConfig::kXmlPathFieldNumber;
const int EventHandlerConfig::kXmlWorkstationFieldNumber;
const int EventHandlerConfig::kXmlPeriodFieldNumber;
const int EventHandlerConfig::kXmlGeoThresholdFieldNumber;
const int EventHandlerConfig::kXmlGeoFilterFileFieldNumber;
const int EventHandlerConfig::kWorkstationWhitelistFieldNumber;
const int EventHandlerConfig::kTelemTimeoutFieldNumber;
const int EventHandlerConfig::kGeoTimeoutFieldNumber;
const int EventHandlerConfig::kTagOverrideFileFieldNumber;
#endif  // !_MSC_VER

EventHandlerConfig::EventHandlerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventHandlerConfig::InitAsDefaultInstance() {
}

EventHandlerConfig::EventHandlerConfig(const EventHandlerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventHandlerConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  xmlenable_ = false;
  xmlclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xmlsource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xmlpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xmlworkstation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xmlperiod_ = 0;
  xmlgeothreshold_ = 0;
  xmlgeofilterfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  workstationwhitelist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  telemtimeout_ = 300;
  geotimeout_ = 300;
  tagoverridefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventHandlerConfig::~EventHandlerConfig() {
  SharedDtor();
}

void EventHandlerConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (xmlclass_ != &::google::protobuf::internal::kEmptyString) {
    delete xmlclass_;
  }
  if (xmlsource_ != &::google::protobuf::internal::kEmptyString) {
    delete xmlsource_;
  }
  if (xmlpath_ != &::google::protobuf::internal::kEmptyString) {
    delete xmlpath_;
  }
  if (xmlworkstation_ != &::google::protobuf::internal::kEmptyString) {
    delete xmlworkstation_;
  }
  if (xmlgeofilterfile_ != &::google::protobuf::internal::kEmptyString) {
    delete xmlgeofilterfile_;
  }
  if (workstationwhitelist_ != &::google::protobuf::internal::kEmptyString) {
    delete workstationwhitelist_;
  }
  if (tagoverridefile_ != &::google::protobuf::internal::kEmptyString) {
    delete tagoverridefile_;
  }
  if (this != default_instance_) {
  }
}

void EventHandlerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventHandlerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventHandlerConfig_descriptor_;
}

const EventHandlerConfig& EventHandlerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

EventHandlerConfig* EventHandlerConfig::default_instance_ = NULL;

EventHandlerConfig* EventHandlerConfig::New() const {
  return new EventHandlerConfig;
}

void EventHandlerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    xmlenable_ = false;
    if (has_xmlclass()) {
      if (xmlclass_ != &::google::protobuf::internal::kEmptyString) {
        xmlclass_->clear();
      }
    }
    if (has_xmlsource()) {
      if (xmlsource_ != &::google::protobuf::internal::kEmptyString) {
        xmlsource_->clear();
      }
    }
    if (has_xmlpath()) {
      if (xmlpath_ != &::google::protobuf::internal::kEmptyString) {
        xmlpath_->clear();
      }
    }
    if (has_xmlworkstation()) {
      if (xmlworkstation_ != &::google::protobuf::internal::kEmptyString) {
        xmlworkstation_->clear();
      }
    }
    xmlperiod_ = 0;
    xmlgeothreshold_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_xmlgeofilterfile()) {
      if (xmlgeofilterfile_ != &::google::protobuf::internal::kEmptyString) {
        xmlgeofilterfile_->clear();
      }
    }
    if (has_workstationwhitelist()) {
      if (workstationwhitelist_ != &::google::protobuf::internal::kEmptyString) {
        workstationwhitelist_->clear();
      }
    }
    telemtimeout_ = 300;
    geotimeout_ = 300;
    if (has_tagoverridefile()) {
      if (tagoverridefile_ != &::google::protobuf::internal::kEmptyString) {
        tagoverridefile_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventHandlerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EVENT_HANDLER_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xmlEnable;
        break;
      }

      // optional bool xmlEnable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xmlEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xmlenable_)));
          set_has_xmlenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_xmlClass;
        break;
      }

      // optional string xmlClass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xmlClass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlclass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xmlclass().data(), this->xmlclass().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_xmlSource;
        break;
      }

      // optional string xmlSource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xmlSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xmlsource().data(), this->xmlsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_xmlPath;
        break;
      }

      // optional string xmlPath = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xmlPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xmlpath().data(), this->xmlpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_xmlWorkstation;
        break;
      }

      // optional string xmlWorkstation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xmlWorkstation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlworkstation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xmlworkstation().data(), this->xmlworkstation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_xmlPeriod;
        break;
      }

      // optional int32 xmlPeriod = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xmlPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xmlperiod_)));
          set_has_xmlperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_xmlGeoThreshold;
        break;
      }

      // optional int32 xmlGeoThreshold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xmlGeoThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xmlgeothreshold_)));
          set_has_xmlgeothreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_xmlGeoFilterFile;
        break;
      }

      // optional string xmlGeoFilterFile = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xmlGeoFilterFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlgeofilterfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xmlgeofilterfile().data(), this->xmlgeofilterfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_workstationWhitelist;
        break;
      }

      // optional string workstationWhitelist = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_workstationWhitelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workstationwhitelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->workstationwhitelist().data(), this->workstationwhitelist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_telemTimeout;
        break;
      }

      // optional int32 telemTimeout = 11 [default = 300];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_telemTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &telemtimeout_)));
          set_has_telemtimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_geoTimeout;
        break;
      }

      // optional int32 geoTimeout = 12 [default = 300];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_geoTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &geotimeout_)));
          set_has_geotimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_tagOverrideFile;
        break;
      }

      // optional string tagOverrideFile = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tagOverrideFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagoverridefile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tagoverridefile().data(), this->tagoverridefile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventHandlerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EVENT_HANDLER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional bool xmlEnable = 2;
  if (has_xmlenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->xmlenable(), output);
  }

  // optional string xmlClass = 3;
  if (has_xmlclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlclass().data(), this->xmlclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->xmlclass(), output);
  }

  // optional string xmlSource = 4;
  if (has_xmlsource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlsource().data(), this->xmlsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->xmlsource(), output);
  }

  // optional string xmlPath = 5;
  if (has_xmlpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlpath().data(), this->xmlpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->xmlpath(), output);
  }

  // optional string xmlWorkstation = 6;
  if (has_xmlworkstation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlworkstation().data(), this->xmlworkstation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->xmlworkstation(), output);
  }

  // optional int32 xmlPeriod = 7;
  if (has_xmlperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->xmlperiod(), output);
  }

  // optional int32 xmlGeoThreshold = 8;
  if (has_xmlgeothreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->xmlgeothreshold(), output);
  }

  // optional string xmlGeoFilterFile = 9;
  if (has_xmlgeofilterfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlgeofilterfile().data(), this->xmlgeofilterfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->xmlgeofilterfile(), output);
  }

  // optional string workstationWhitelist = 10;
  if (has_workstationwhitelist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->workstationwhitelist().data(), this->workstationwhitelist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->workstationwhitelist(), output);
  }

  // optional int32 telemTimeout = 11 [default = 300];
  if (has_telemtimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->telemtimeout(), output);
  }

  // optional int32 geoTimeout = 12 [default = 300];
  if (has_geotimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->geotimeout(), output);
  }

  // optional string tagOverrideFile = 13;
  if (has_tagoverridefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tagoverridefile().data(), this->tagoverridefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->tagoverridefile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventHandlerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EVENT_HANDLER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional bool xmlEnable = 2;
  if (has_xmlenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->xmlenable(), target);
  }

  // optional string xmlClass = 3;
  if (has_xmlclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlclass().data(), this->xmlclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->xmlclass(), target);
  }

  // optional string xmlSource = 4;
  if (has_xmlsource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlsource().data(), this->xmlsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->xmlsource(), target);
  }

  // optional string xmlPath = 5;
  if (has_xmlpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlpath().data(), this->xmlpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->xmlpath(), target);
  }

  // optional string xmlWorkstation = 6;
  if (has_xmlworkstation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlworkstation().data(), this->xmlworkstation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->xmlworkstation(), target);
  }

  // optional int32 xmlPeriod = 7;
  if (has_xmlperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->xmlperiod(), target);
  }

  // optional int32 xmlGeoThreshold = 8;
  if (has_xmlgeothreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->xmlgeothreshold(), target);
  }

  // optional string xmlGeoFilterFile = 9;
  if (has_xmlgeofilterfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlgeofilterfile().data(), this->xmlgeofilterfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->xmlgeofilterfile(), target);
  }

  // optional string workstationWhitelist = 10;
  if (has_workstationwhitelist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->workstationwhitelist().data(), this->workstationwhitelist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->workstationwhitelist(), target);
  }

  // optional int32 telemTimeout = 11 [default = 300];
  if (has_telemtimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->telemtimeout(), target);
  }

  // optional int32 geoTimeout = 12 [default = 300];
  if (has_geotimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->geotimeout(), target);
  }

  // optional string tagOverrideFile = 13;
  if (has_tagoverridefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tagoverridefile().data(), this->tagoverridefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->tagoverridefile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventHandlerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EVENT_HANDLER_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional bool xmlEnable = 2;
    if (has_xmlenable()) {
      total_size += 1 + 1;
    }

    // optional string xmlClass = 3;
    if (has_xmlclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlclass());
    }

    // optional string xmlSource = 4;
    if (has_xmlsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlsource());
    }

    // optional string xmlPath = 5;
    if (has_xmlpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlpath());
    }

    // optional string xmlWorkstation = 6;
    if (has_xmlworkstation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlworkstation());
    }

    // optional int32 xmlPeriod = 7;
    if (has_xmlperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xmlperiod());
    }

    // optional int32 xmlGeoThreshold = 8;
    if (has_xmlgeothreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xmlgeothreshold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string xmlGeoFilterFile = 9;
    if (has_xmlgeofilterfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlgeofilterfile());
    }

    // optional string workstationWhitelist = 10;
    if (has_workstationwhitelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->workstationwhitelist());
    }

    // optional int32 telemTimeout = 11 [default = 300];
    if (has_telemtimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->telemtimeout());
    }

    // optional int32 geoTimeout = 12 [default = 300];
    if (has_geotimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->geotimeout());
    }

    // optional string tagOverrideFile = 13;
    if (has_tagoverridefile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagoverridefile());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventHandlerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventHandlerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventHandlerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventHandlerConfig::MergeFrom(const EventHandlerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_xmlenable()) {
      set_xmlenable(from.xmlenable());
    }
    if (from.has_xmlclass()) {
      set_xmlclass(from.xmlclass());
    }
    if (from.has_xmlsource()) {
      set_xmlsource(from.xmlsource());
    }
    if (from.has_xmlpath()) {
      set_xmlpath(from.xmlpath());
    }
    if (from.has_xmlworkstation()) {
      set_xmlworkstation(from.xmlworkstation());
    }
    if (from.has_xmlperiod()) {
      set_xmlperiod(from.xmlperiod());
    }
    if (from.has_xmlgeothreshold()) {
      set_xmlgeothreshold(from.xmlgeothreshold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_xmlgeofilterfile()) {
      set_xmlgeofilterfile(from.xmlgeofilterfile());
    }
    if (from.has_workstationwhitelist()) {
      set_workstationwhitelist(from.workstationwhitelist());
    }
    if (from.has_telemtimeout()) {
      set_telemtimeout(from.telemtimeout());
    }
    if (from.has_geotimeout()) {
      set_geotimeout(from.geotimeout());
    }
    if (from.has_tagoverridefile()) {
      set_tagoverridefile(from.tagoverridefile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventHandlerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventHandlerConfig::CopyFrom(const EventHandlerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventHandlerConfig::IsInitialized() const {

  return true;
}

void EventHandlerConfig::Swap(EventHandlerConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(xmlenable_, other->xmlenable_);
    std::swap(xmlclass_, other->xmlclass_);
    std::swap(xmlsource_, other->xmlsource_);
    std::swap(xmlpath_, other->xmlpath_);
    std::swap(xmlworkstation_, other->xmlworkstation_);
    std::swap(xmlperiod_, other->xmlperiod_);
    std::swap(xmlgeothreshold_, other->xmlgeothreshold_);
    std::swap(xmlgeofilterfile_, other->xmlgeofilterfile_);
    std::swap(workstationwhitelist_, other->workstationwhitelist_);
    std::swap(telemtimeout_, other->telemtimeout_);
    std::swap(geotimeout_, other->geotimeout_);
    std::swap(tagoverridefile_, other->tagoverridefile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventHandlerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventHandlerConfig_descriptor_;
  metadata.reflection = EventHandlerConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GPSFakerConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GPSFakerConfig::kMsgNameFieldNumber;
const int GPSFakerConfig::kGpsFileFieldNumber;
#endif  // !_MSC_VER

GPSFakerConfig::GPSFakerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPSFakerConfig::InitAsDefaultInstance() {
}

GPSFakerConfig::GPSFakerConfig(const GPSFakerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPSFakerConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  gpsfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSFakerConfig::~GPSFakerConfig() {
  SharedDtor();
}

void GPSFakerConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (gpsfile_ != &::google::protobuf::internal::kEmptyString) {
    delete gpsfile_;
  }
  if (this != default_instance_) {
  }
}

void GPSFakerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSFakerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSFakerConfig_descriptor_;
}

const GPSFakerConfig& GPSFakerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

GPSFakerConfig* GPSFakerConfig::default_instance_ = NULL;

GPSFakerConfig* GPSFakerConfig::New() const {
  return new GPSFakerConfig;
}

void GPSFakerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_gpsfile()) {
      if (gpsfile_ != &::google::protobuf::internal::kEmptyString) {
        gpsfile_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSFakerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GPS_FAKER_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gpsFile;
        break;
      }

      // optional string gpsFile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpsfile().data(), this->gpsfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPSFakerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GPS_FAKER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string gpsFile = 2;
  if (has_gpsfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsfile().data(), this->gpsfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gpsfile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPSFakerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GPS_FAKER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string gpsFile = 2;
  if (has_gpsfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpsfile().data(), this->gpsfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gpsfile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPSFakerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GPS_FAKER_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string gpsFile = 2;
    if (has_gpsfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsfile());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSFakerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSFakerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSFakerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSFakerConfig::MergeFrom(const GPSFakerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_gpsfile()) {
      set_gpsfile(from.gpsfile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSFakerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSFakerConfig::CopyFrom(const GPSFakerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSFakerConfig::IsInitialized() const {

  return true;
}

void GPSFakerConfig::Swap(GPSFakerConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(gpsfile_, other->gpsfile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSFakerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSFakerConfig_descriptor_;
  metadata.reflection = GPSFakerConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SkyscraperConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SkyscraperConfig::kMsgNameFieldNumber;
const int SkyscraperConfig::kDirectoryFieldNumber;
const int SkyscraperConfig::kFilenameFieldNumber;
#endif  // !_MSC_VER

SkyscraperConfig::SkyscraperConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkyscraperConfig::InitAsDefaultInstance() {
}

SkyscraperConfig::SkyscraperConfig(const SkyscraperConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkyscraperConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkyscraperConfig::~SkyscraperConfig() {
  SharedDtor();
}

void SkyscraperConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (directory_ != &::google::protobuf::internal::kEmptyString) {
    delete directory_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void SkyscraperConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkyscraperConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkyscraperConfig_descriptor_;
}

const SkyscraperConfig& SkyscraperConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

SkyscraperConfig* SkyscraperConfig::default_instance_ = NULL;

SkyscraperConfig* SkyscraperConfig::New() const {
  return new SkyscraperConfig;
}

void SkyscraperConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_directory()) {
      if (directory_ != &::google::protobuf::internal::kEmptyString) {
        directory_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkyscraperConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SKYSCRAPER_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_directory;
        break;
      }

      // optional string directory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directory().data(), this->directory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkyscraperConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SKYSCRAPER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string directory = 2;
  if (has_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->directory(), output);
  }

  // optional string filename = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkyscraperConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SKYSCRAPER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string directory = 2;
  if (has_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->directory(), target);
  }

  // optional string filename = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkyscraperConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SKYSCRAPER_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string directory = 2;
    if (has_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directory());
    }

    // optional string filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkyscraperConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkyscraperConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkyscraperConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkyscraperConfig::MergeFrom(const SkyscraperConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_directory()) {
      set_directory(from.directory());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkyscraperConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkyscraperConfig::CopyFrom(const SkyscraperConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkyscraperConfig::IsInitialized() const {

  return true;
}

void SkyscraperConfig::Swap(SkyscraperConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(directory_, other->directory_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkyscraperConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkyscraperConfig_descriptor_;
  metadata.reflection = SkyscraperConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* NoiseTestConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int NoiseTestConfig::kMsgNameFieldNumber;
const int NoiseTestConfig::kOptionsFieldNumber;
#endif  // !_MSC_VER

NoiseTestConfig::NoiseTestConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoiseTestConfig::InitAsDefaultInstance() {
  options_ = const_cast< ::falcon_svc_msg::MacroOptions*>(&::falcon_svc_msg::MacroOptions::default_instance());
}

NoiseTestConfig::NoiseTestConfig(const NoiseTestConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoiseTestConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoiseTestConfig::~NoiseTestConfig() {
  SharedDtor();
}

void NoiseTestConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void NoiseTestConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoiseTestConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoiseTestConfig_descriptor_;
}

const NoiseTestConfig& NoiseTestConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

NoiseTestConfig* NoiseTestConfig::default_instance_ = NULL;

NoiseTestConfig* NoiseTestConfig::New() const {
  return new NoiseTestConfig;
}

void NoiseTestConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_options()) {
      if (options_ != NULL) options_->::falcon_svc_msg::MacroOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoiseTestConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "NOISE_TEST_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .falcon_svc_msg.MacroOptions options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NoiseTestConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "NOISE_TEST_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional .falcon_svc_msg.MacroOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoiseTestConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "NOISE_TEST_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional .falcon_svc_msg.MacroOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoiseTestConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "NOISE_TEST_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional .falcon_svc_msg.MacroOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoiseTestConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoiseTestConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoiseTestConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoiseTestConfig::MergeFrom(const NoiseTestConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_options()) {
      mutable_options()->::falcon_svc_msg::MacroOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoiseTestConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoiseTestConfig::CopyFrom(const NoiseTestConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseTestConfig::IsInitialized() const {

  return true;
}

void NoiseTestConfig::Swap(NoiseTestConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoiseTestConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoiseTestConfig_descriptor_;
  metadata.reflection = NoiseTestConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ExtraScriptConfigMess::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int ExtraScriptConfigMess::kMsgNameFieldNumber;
const int ExtraScriptConfigMess::kScriptFieldNumber;
#endif  // !_MSC_VER

ExtraScriptConfigMess::ExtraScriptConfigMess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraScriptConfigMess::InitAsDefaultInstance() {
}

ExtraScriptConfigMess::ExtraScriptConfigMess(const ExtraScriptConfigMess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraScriptConfigMess::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraScriptConfigMess::~ExtraScriptConfigMess() {
  SharedDtor();
}

void ExtraScriptConfigMess::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    delete script_;
  }
  if (this != default_instance_) {
  }
}

void ExtraScriptConfigMess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraScriptConfigMess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraScriptConfigMess_descriptor_;
}

const ExtraScriptConfigMess& ExtraScriptConfigMess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

ExtraScriptConfigMess* ExtraScriptConfigMess::default_instance_ = NULL;

ExtraScriptConfigMess* ExtraScriptConfigMess::New() const {
  return new ExtraScriptConfigMess;
}

void ExtraScriptConfigMess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::kEmptyString) {
        script_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraScriptConfigMess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTRASCRIPTCONFIGMESS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_script;
        break;
      }

      // optional string script = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraScriptConfigMess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTRASCRIPTCONFIGMESS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string script = 2;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->script(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraScriptConfigMess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTRASCRIPTCONFIGMESS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string script = 2;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->script(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraScriptConfigMess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTRASCRIPTCONFIGMESS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string script = 2;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraScriptConfigMess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraScriptConfigMess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraScriptConfigMess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraScriptConfigMess::MergeFrom(const ExtraScriptConfigMess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraScriptConfigMess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraScriptConfigMess::CopyFrom(const ExtraScriptConfigMess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraScriptConfigMess::IsInitialized() const {

  return true;
}

void ExtraScriptConfigMess::Swap(ExtraScriptConfigMess* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(script_, other->script_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraScriptConfigMess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraScriptConfigMess_descriptor_;
  metadata.reflection = ExtraScriptConfigMess_reflection_;
  return metadata;
}


// ===================================================================

::std::string* NoConfigMess::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int NoConfigMess::kMsgNameFieldNumber;
#endif  // !_MSC_VER

NoConfigMess::NoConfigMess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoConfigMess::InitAsDefaultInstance() {
}

NoConfigMess::NoConfigMess(const NoConfigMess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoConfigMess::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoConfigMess::~NoConfigMess() {
  SharedDtor();
}

void NoConfigMess::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void NoConfigMess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoConfigMess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoConfigMess_descriptor_;
}

const NoConfigMess& NoConfigMess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

NoConfigMess* NoConfigMess::default_instance_ = NULL;

NoConfigMess* NoConfigMess::New() const {
  return new NoConfigMess;
}

void NoConfigMess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoConfigMess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "NOCONFIGMESS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NoConfigMess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "NOCONFIGMESS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoConfigMess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "NOCONFIGMESS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoConfigMess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "NOCONFIGMESS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoConfigMess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoConfigMess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoConfigMess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoConfigMess::MergeFrom(const NoConfigMess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoConfigMess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoConfigMess::CopyFrom(const NoConfigMess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoConfigMess::IsInitialized() const {

  return true;
}

void NoConfigMess::Swap(NoConfigMess* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoConfigMess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoConfigMess_descriptor_;
  metadata.reflection = NoConfigMess_reflection_;
  return metadata;
}


// ===================================================================

::std::string* PentekConfigMess::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int PentekConfigMess::kMsgNameFieldNumber;
const int PentekConfigMess::kTxSampleRateFieldNumber;
#endif  // !_MSC_VER

PentekConfigMess::PentekConfigMess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PentekConfigMess::InitAsDefaultInstance() {
}

PentekConfigMess::PentekConfigMess(const PentekConfigMess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PentekConfigMess::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  txsamplerate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PentekConfigMess::~PentekConfigMess() {
  SharedDtor();
}

void PentekConfigMess::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void PentekConfigMess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PentekConfigMess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PentekConfigMess_descriptor_;
}

const PentekConfigMess& PentekConfigMess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

PentekConfigMess* PentekConfigMess::default_instance_ = NULL;

PentekConfigMess* PentekConfigMess::New() const {
  return new PentekConfigMess;
}

void PentekConfigMess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    txsamplerate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PentekConfigMess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "EXTRASCRIPTCONFIGMESS"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_txSampleRate;
        break;
      }

      // optional float txSampleRate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_txSampleRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &txsamplerate_)));
          set_has_txsamplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PentekConfigMess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "EXTRASCRIPTCONFIGMESS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional float txSampleRate = 2;
  if (has_txsamplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->txsamplerate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PentekConfigMess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "EXTRASCRIPTCONFIGMESS"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional float txSampleRate = 2;
  if (has_txsamplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->txsamplerate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PentekConfigMess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "EXTRASCRIPTCONFIGMESS"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional float txSampleRate = 2;
    if (has_txsamplerate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PentekConfigMess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PentekConfigMess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PentekConfigMess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PentekConfigMess::MergeFrom(const PentekConfigMess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_txsamplerate()) {
      set_txsamplerate(from.txsamplerate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PentekConfigMess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PentekConfigMess::CopyFrom(const PentekConfigMess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PentekConfigMess::IsInitialized() const {

  return true;
}

void PentekConfigMess::Swap(PentekConfigMess* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(txsamplerate_, other->txsamplerate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PentekConfigMess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PentekConfigMess_descriptor_;
  metadata.reflection = PentekConfigMess_reflection_;
  return metadata;
}


// ===================================================================

::std::string* PredTunerConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int PredTunerConfig::kMsgNameFieldNumber;
const int PredTunerConfig::kNumTunersFieldNumber;
const int PredTunerConfig::kArcfilenumFieldNumber;
const int PredTunerConfig::kArcfilesizeFieldNumber;
const int PredTunerConfig::kConfigFieldNumber;
const int PredTunerConfig::kStartTunerNumFieldNumber;
#endif  // !_MSC_VER

PredTunerConfig::PredTunerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PredTunerConfig::InitAsDefaultInstance() {
}

PredTunerConfig::PredTunerConfig(const PredTunerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PredTunerConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  numtuners_ = 0;
  arcfilenum_ = 0;
  arcfilesize_ = 0;
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttunernum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PredTunerConfig::~PredTunerConfig() {
  SharedDtor();
}

void PredTunerConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void PredTunerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredTunerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredTunerConfig_descriptor_;
}

const PredTunerConfig& PredTunerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

PredTunerConfig* PredTunerConfig::default_instance_ = NULL;

PredTunerConfig* PredTunerConfig::New() const {
  return new PredTunerConfig;
}

void PredTunerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    numtuners_ = 0;
    arcfilenum_ = 0;
    arcfilesize_ = 0;
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::kEmptyString) {
        config_->clear();
      }
    }
    starttunernum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PredTunerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PREDTUNER_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numTuners;
        break;
      }

      // optional int32 numTuners = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numTuners:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numtuners_)));
          set_has_numtuners();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_arcfilenum;
        break;
      }

      // optional int32 arcfilenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arcfilenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arcfilenum_)));
          set_has_arcfilenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_arcfilesize;
        break;
      }

      // optional int32 arcfilesize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arcfilesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arcfilesize_)));
          set_has_arcfilesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_config;
        break;
      }

      // optional string config = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_startTunerNum;
        break;
      }

      // optional int32 startTunerNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTunerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttunernum_)));
          set_has_starttunernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PredTunerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PREDTUNER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 numTuners = 2;
  if (has_numtuners()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numtuners(), output);
  }

  // optional int32 arcfilenum = 3;
  if (has_arcfilenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->arcfilenum(), output);
  }

  // optional int32 arcfilesize = 4;
  if (has_arcfilesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->arcfilesize(), output);
  }

  // optional string config = 5;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->config(), output);
  }

  // optional int32 startTunerNum = 6;
  if (has_starttunernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->starttunernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PredTunerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PREDTUNER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 numTuners = 2;
  if (has_numtuners()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numtuners(), target);
  }

  // optional int32 arcfilenum = 3;
  if (has_arcfilenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->arcfilenum(), target);
  }

  // optional int32 arcfilesize = 4;
  if (has_arcfilesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->arcfilesize(), target);
  }

  // optional string config = 5;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->config(), target);
  }

  // optional int32 startTunerNum = 6;
  if (has_starttunernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->starttunernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PredTunerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PREDTUNER_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 numTuners = 2;
    if (has_numtuners()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numtuners());
    }

    // optional int32 arcfilenum = 3;
    if (has_arcfilenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arcfilenum());
    }

    // optional int32 arcfilesize = 4;
    if (has_arcfilesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arcfilesize());
    }

    // optional string config = 5;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

    // optional int32 startTunerNum = 6;
    if (has_starttunernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttunernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredTunerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PredTunerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PredTunerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PredTunerConfig::MergeFrom(const PredTunerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_numtuners()) {
      set_numtuners(from.numtuners());
    }
    if (from.has_arcfilenum()) {
      set_arcfilenum(from.arcfilenum());
    }
    if (from.has_arcfilesize()) {
      set_arcfilesize(from.arcfilesize());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_starttunernum()) {
      set_starttunernum(from.starttunernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PredTunerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredTunerConfig::CopyFrom(const PredTunerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredTunerConfig::IsInitialized() const {

  return true;
}

void PredTunerConfig::Swap(PredTunerConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(numtuners_, other->numtuners_);
    std::swap(arcfilenum_, other->arcfilenum_);
    std::swap(arcfilesize_, other->arcfilesize_);
    std::swap(config_, other->config_);
    std::swap(starttunernum_, other->starttunernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PredTunerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PredTunerConfig_descriptor_;
  metadata.reflection = PredTunerConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* PredTransceiverConfig::_default_msgname_ = NULL;
::std::string* PredTransceiverConfig::_default_hwtype_ = NULL;
::std::string* PredTransceiverConfig::_default_usrpclocksource_ = NULL;
::std::string* PredTransceiverConfig::_default_usrptimesource_ = NULL;
::std::string* PredTransceiverConfig::_default_fft_ = NULL;
#ifndef _MSC_VER
const int PredTransceiverConfig::kMsgNameFieldNumber;
const int PredTransceiverConfig::kSnapshotRingCapacityFieldNumber;
const int PredTransceiverConfig::kNumTunersFieldNumber;
const int PredTransceiverConfig::kNumTransmittersFieldNumber;
const int PredTransceiverConfig::kStartTunerNumFieldNumber;
const int PredTransceiverConfig::kIpaddrFieldNumber;
const int PredTransceiverConfig::kHwTypeFieldNumber;
const int PredTransceiverConfig::kRxSampleRateFieldNumber;
const int PredTransceiverConfig::kTxSampleRateFieldNumber;
const int PredTransceiverConfig::kUsrpClockSourceFieldNumber;
const int PredTransceiverConfig::kUsrpTimeSourceFieldNumber;
const int PredTransceiverConfig::kFftFieldNumber;
const int PredTransceiverConfig::kArcFileSecsFieldNumber;
#endif  // !_MSC_VER

PredTransceiverConfig::PredTransceiverConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PredTransceiverConfig::InitAsDefaultInstance() {
}

PredTransceiverConfig::PredTransceiverConfig(const PredTransceiverConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PredTransceiverConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  snapshotringcapacity_ = 50;
  numtuners_ = 0;
  numtransmitters_ = 0;
  starttunernum_ = 0;
  ipaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hwtype_ = const_cast< ::std::string*>(_default_hwtype_);
  rxsamplerate_ = 2.5e+07f;
  txsamplerate_ = 1e+08f;
  usrpclocksource_ = const_cast< ::std::string*>(_default_usrpclocksource_);
  usrptimesource_ = const_cast< ::std::string*>(_default_usrptimesource_);
  fft_ = const_cast< ::std::string*>(_default_fft_);
  arcfilesecs_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PredTransceiverConfig::~PredTransceiverConfig() {
  SharedDtor();
}

void PredTransceiverConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddr_;
  }
  if (hwtype_ != _default_hwtype_) {
    delete hwtype_;
  }
  if (usrpclocksource_ != _default_usrpclocksource_) {
    delete usrpclocksource_;
  }
  if (usrptimesource_ != _default_usrptimesource_) {
    delete usrptimesource_;
  }
  if (fft_ != _default_fft_) {
    delete fft_;
  }
  if (this != default_instance_) {
  }
}

void PredTransceiverConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredTransceiverConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredTransceiverConfig_descriptor_;
}

const PredTransceiverConfig& PredTransceiverConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

PredTransceiverConfig* PredTransceiverConfig::default_instance_ = NULL;

PredTransceiverConfig* PredTransceiverConfig::New() const {
  return new PredTransceiverConfig;
}

void PredTransceiverConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    snapshotringcapacity_ = 50;
    numtuners_ = 0;
    numtransmitters_ = 0;
    starttunernum_ = 0;
    if (has_ipaddr()) {
      if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
        ipaddr_->clear();
      }
    }
    if (has_hwtype()) {
      if (hwtype_ != _default_hwtype_) {
        hwtype_->assign(*_default_hwtype_);
      }
    }
    rxsamplerate_ = 2.5e+07f;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    txsamplerate_ = 1e+08f;
    if (has_usrpclocksource()) {
      if (usrpclocksource_ != _default_usrpclocksource_) {
        usrpclocksource_->assign(*_default_usrpclocksource_);
      }
    }
    if (has_usrptimesource()) {
      if (usrptimesource_ != _default_usrptimesource_) {
        usrptimesource_->assign(*_default_usrptimesource_);
      }
    }
    if (has_fft()) {
      if (fft_ != _default_fft_) {
        fft_->assign(*_default_fft_);
      }
    }
    arcfilesecs_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PredTransceiverConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TRANSCEIVER_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_snapshotRingCapacity;
        break;
      }

      // optional int32 snapshotRingCapacity = 2 [default = 50];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snapshotRingCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshotringcapacity_)));
          set_has_snapshotringcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numTuners;
        break;
      }

      // optional int32 numTuners = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numTuners:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numtuners_)));
          set_has_numtuners();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_numTransmitters;
        break;
      }

      // optional int32 numTransmitters = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numTransmitters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numtransmitters_)));
          set_has_numtransmitters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_startTunerNum;
        break;
      }

      // optional int32 startTunerNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTunerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttunernum_)));
          set_has_starttunernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ipaddr;
        break;
      }

      // optional string ipaddr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipaddr().data(), this->ipaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_hwType;
        break;
      }

      // optional string hwType = 7 [default = "USRP"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hwType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hwtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hwtype().data(), this->hwtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_rxSampleRate;
        break;
      }

      // optional float rxSampleRate = 8 [default = 2.5e+07];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rxSampleRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rxsamplerate_)));
          set_has_rxsamplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_txSampleRate;
        break;
      }

      // optional float txSampleRate = 9 [default = 1e+08];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_txSampleRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &txsamplerate_)));
          set_has_txsamplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_usrpClockSource;
        break;
      }

      // optional string usrpClockSource = 10 [default = "internal"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usrpClockSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usrpclocksource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usrpclocksource().data(), this->usrpclocksource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_usrpTimeSource;
        break;
      }

      // optional string usrpTimeSource = 11 [default = "internal"];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usrpTimeSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usrptimesource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usrptimesource().data(), this->usrptimesource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_fft;
        break;
      }

      // optional string fft = 12 [default = "false"];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fft:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fft()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fft().data(), this->fft().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_arcFileSecs;
        break;
      }

      // optional float arcFileSecs = 13 [default = -1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_arcFileSecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arcfilesecs_)));
          set_has_arcfilesecs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PredTransceiverConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TRANSCEIVER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 snapshotRingCapacity = 2 [default = 50];
  if (has_snapshotringcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->snapshotringcapacity(), output);
  }

  // optional int32 numTuners = 3;
  if (has_numtuners()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numtuners(), output);
  }

  // optional int32 numTransmitters = 4;
  if (has_numtransmitters()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->numtransmitters(), output);
  }

  // optional int32 startTunerNum = 5;
  if (has_starttunernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->starttunernum(), output);
  }

  // optional string ipaddr = 6;
  if (has_ipaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ipaddr(), output);
  }

  // optional string hwType = 7 [default = "USRP"];
  if (has_hwtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hwtype().data(), this->hwtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->hwtype(), output);
  }

  // optional float rxSampleRate = 8 [default = 2.5e+07];
  if (has_rxsamplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rxsamplerate(), output);
  }

  // optional float txSampleRate = 9 [default = 1e+08];
  if (has_txsamplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->txsamplerate(), output);
  }

  // optional string usrpClockSource = 10 [default = "internal"];
  if (has_usrpclocksource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usrpclocksource().data(), this->usrpclocksource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->usrpclocksource(), output);
  }

  // optional string usrpTimeSource = 11 [default = "internal"];
  if (has_usrptimesource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usrptimesource().data(), this->usrptimesource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->usrptimesource(), output);
  }

  // optional string fft = 12 [default = "false"];
  if (has_fft()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fft().data(), this->fft().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->fft(), output);
  }

  // optional float arcFileSecs = 13 [default = -1];
  if (has_arcfilesecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->arcfilesecs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PredTransceiverConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TRANSCEIVER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 snapshotRingCapacity = 2 [default = 50];
  if (has_snapshotringcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->snapshotringcapacity(), target);
  }

  // optional int32 numTuners = 3;
  if (has_numtuners()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numtuners(), target);
  }

  // optional int32 numTransmitters = 4;
  if (has_numtransmitters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->numtransmitters(), target);
  }

  // optional int32 startTunerNum = 5;
  if (has_starttunernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->starttunernum(), target);
  }

  // optional string ipaddr = 6;
  if (has_ipaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ipaddr(), target);
  }

  // optional string hwType = 7 [default = "USRP"];
  if (has_hwtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hwtype().data(), this->hwtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->hwtype(), target);
  }

  // optional float rxSampleRate = 8 [default = 2.5e+07];
  if (has_rxsamplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rxsamplerate(), target);
  }

  // optional float txSampleRate = 9 [default = 1e+08];
  if (has_txsamplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->txsamplerate(), target);
  }

  // optional string usrpClockSource = 10 [default = "internal"];
  if (has_usrpclocksource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usrpclocksource().data(), this->usrpclocksource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->usrpclocksource(), target);
  }

  // optional string usrpTimeSource = 11 [default = "internal"];
  if (has_usrptimesource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usrptimesource().data(), this->usrptimesource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->usrptimesource(), target);
  }

  // optional string fft = 12 [default = "false"];
  if (has_fft()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fft().data(), this->fft().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->fft(), target);
  }

  // optional float arcFileSecs = 13 [default = -1];
  if (has_arcfilesecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->arcfilesecs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PredTransceiverConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TRANSCEIVER_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 snapshotRingCapacity = 2 [default = 50];
    if (has_snapshotringcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapshotringcapacity());
    }

    // optional int32 numTuners = 3;
    if (has_numtuners()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numtuners());
    }

    // optional int32 numTransmitters = 4;
    if (has_numtransmitters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numtransmitters());
    }

    // optional int32 startTunerNum = 5;
    if (has_starttunernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttunernum());
    }

    // optional string ipaddr = 6;
    if (has_ipaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddr());
    }

    // optional string hwType = 7 [default = "USRP"];
    if (has_hwtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hwtype());
    }

    // optional float rxSampleRate = 8 [default = 2.5e+07];
    if (has_rxsamplerate()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float txSampleRate = 9 [default = 1e+08];
    if (has_txsamplerate()) {
      total_size += 1 + 4;
    }

    // optional string usrpClockSource = 10 [default = "internal"];
    if (has_usrpclocksource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usrpclocksource());
    }

    // optional string usrpTimeSource = 11 [default = "internal"];
    if (has_usrptimesource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usrptimesource());
    }

    // optional string fft = 12 [default = "false"];
    if (has_fft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fft());
    }

    // optional float arcFileSecs = 13 [default = -1];
    if (has_arcfilesecs()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredTransceiverConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PredTransceiverConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PredTransceiverConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PredTransceiverConfig::MergeFrom(const PredTransceiverConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_snapshotringcapacity()) {
      set_snapshotringcapacity(from.snapshotringcapacity());
    }
    if (from.has_numtuners()) {
      set_numtuners(from.numtuners());
    }
    if (from.has_numtransmitters()) {
      set_numtransmitters(from.numtransmitters());
    }
    if (from.has_starttunernum()) {
      set_starttunernum(from.starttunernum());
    }
    if (from.has_ipaddr()) {
      set_ipaddr(from.ipaddr());
    }
    if (from.has_hwtype()) {
      set_hwtype(from.hwtype());
    }
    if (from.has_rxsamplerate()) {
      set_rxsamplerate(from.rxsamplerate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_txsamplerate()) {
      set_txsamplerate(from.txsamplerate());
    }
    if (from.has_usrpclocksource()) {
      set_usrpclocksource(from.usrpclocksource());
    }
    if (from.has_usrptimesource()) {
      set_usrptimesource(from.usrptimesource());
    }
    if (from.has_fft()) {
      set_fft(from.fft());
    }
    if (from.has_arcfilesecs()) {
      set_arcfilesecs(from.arcfilesecs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PredTransceiverConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredTransceiverConfig::CopyFrom(const PredTransceiverConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredTransceiverConfig::IsInitialized() const {

  return true;
}

void PredTransceiverConfig::Swap(PredTransceiverConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(snapshotringcapacity_, other->snapshotringcapacity_);
    std::swap(numtuners_, other->numtuners_);
    std::swap(numtransmitters_, other->numtransmitters_);
    std::swap(starttunernum_, other->starttunernum_);
    std::swap(ipaddr_, other->ipaddr_);
    std::swap(hwtype_, other->hwtype_);
    std::swap(rxsamplerate_, other->rxsamplerate_);
    std::swap(txsamplerate_, other->txsamplerate_);
    std::swap(usrpclocksource_, other->usrpclocksource_);
    std::swap(usrptimesource_, other->usrptimesource_);
    std::swap(fft_, other->fft_);
    std::swap(arcfilesecs_, other->arcfilesecs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PredTransceiverConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PredTransceiverConfig_descriptor_;
  metadata.reflection = PredTransceiverConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SidekiqTransceiverConfig::_default_msgname_ = NULL;
::std::string* SidekiqTransceiverConfig::_default_cardid_ = NULL;
#ifndef _MSC_VER
const int SidekiqTransceiverConfig::kMsgNameFieldNumber;
const int SidekiqTransceiverConfig::kSnapshotRingCapacityFieldNumber;
const int SidekiqTransceiverConfig::kRxA1FieldNumber;
const int SidekiqTransceiverConfig::kRxA2FieldNumber;
const int SidekiqTransceiverConfig::kRxB1FieldNumber;
const int SidekiqTransceiverConfig::kRxB2FieldNumber;
const int SidekiqTransceiverConfig::kTxA1FieldNumber;
const int SidekiqTransceiverConfig::kTxA2FieldNumber;
const int SidekiqTransceiverConfig::kTxB1FieldNumber;
const int SidekiqTransceiverConfig::kTxB2FieldNumber;
const int SidekiqTransceiverConfig::kPpcA1FieldNumber;
const int SidekiqTransceiverConfig::kPpcA2FieldNumber;
const int SidekiqTransceiverConfig::kPpcB1FieldNumber;
const int SidekiqTransceiverConfig::kPpcB2FieldNumber;
const int SidekiqTransceiverConfig::kCardIDFieldNumber;
const int SidekiqTransceiverConfig::kSampleRateAFieldNumber;
const int SidekiqTransceiverConfig::kSampleRateBFieldNumber;
const int SidekiqTransceiverConfig::kEnergyThreshAFieldNumber;
const int SidekiqTransceiverConfig::kEnergyThreshBFieldNumber;
const int SidekiqTransceiverConfig::kEnergyThreshNumAFieldNumber;
const int SidekiqTransceiverConfig::kEnergyThreshNumBFieldNumber;
const int SidekiqTransceiverConfig::kRxBufferSizeFieldNumber;
const int SidekiqTransceiverConfig::kDebuglvlFieldNumber;
const int SidekiqTransceiverConfig::kExternalReferenceFieldNumber;
#endif  // !_MSC_VER

SidekiqTransceiverConfig::SidekiqTransceiverConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SidekiqTransceiverConfig::InitAsDefaultInstance() {
}

SidekiqTransceiverConfig::SidekiqTransceiverConfig(const SidekiqTransceiverConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SidekiqTransceiverConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  snapshotringcapacity_ = 50;
  rxa1_ = -1;
  rxa2_ = -1;
  rxb1_ = -1;
  rxb2_ = -1;
  txa1_ = -1;
  txa2_ = -1;
  txb1_ = -1;
  txb2_ = -1;
  ppca1_ = false;
  ppca2_ = false;
  ppcb1_ = false;
  ppcb2_ = false;
  cardid_ = const_cast< ::std::string*>(_default_cardid_);
  sampleratea_ = 5e+07f;
  samplerateb_ = 5e+07f;
  energythresha_ = -70;
  energythreshb_ = -70;
  energythreshnuma_ = 200;
  energythreshnumb_ = 200;
  rxbuffersize_ = 512;
  debuglvl_ = 0;
  externalreference_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SidekiqTransceiverConfig::~SidekiqTransceiverConfig() {
  SharedDtor();
}

void SidekiqTransceiverConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (cardid_ != _default_cardid_) {
    delete cardid_;
  }
  if (this != default_instance_) {
  }
}

void SidekiqTransceiverConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SidekiqTransceiverConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SidekiqTransceiverConfig_descriptor_;
}

const SidekiqTransceiverConfig& SidekiqTransceiverConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

SidekiqTransceiverConfig* SidekiqTransceiverConfig::default_instance_ = NULL;

SidekiqTransceiverConfig* SidekiqTransceiverConfig::New() const {
  return new SidekiqTransceiverConfig;
}

void SidekiqTransceiverConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    snapshotringcapacity_ = 50;
    rxa1_ = -1;
    rxa2_ = -1;
    rxb1_ = -1;
    rxb2_ = -1;
    txa1_ = -1;
    txa2_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    txb1_ = -1;
    txb2_ = -1;
    ppca1_ = false;
    ppca2_ = false;
    ppcb1_ = false;
    ppcb2_ = false;
    if (has_cardid()) {
      if (cardid_ != _default_cardid_) {
        cardid_->assign(*_default_cardid_);
      }
    }
    sampleratea_ = 5e+07f;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    samplerateb_ = 5e+07f;
    energythresha_ = -70;
    energythreshb_ = -70;
    energythreshnuma_ = 200;
    energythreshnumb_ = 200;
    rxbuffersize_ = 512;
    debuglvl_ = 0;
    externalreference_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SidekiqTransceiverConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIDEKIQTRANSCEIVER_CONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_snapshotRingCapacity;
        break;
      }

      // optional int32 snapshotRingCapacity = 2 [default = 50];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snapshotRingCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshotringcapacity_)));
          set_has_snapshotringcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rxA1;
        break;
      }

      // optional int32 rxA1 = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxA1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rxa1_)));
          set_has_rxa1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rxA2;
        break;
      }

      // optional int32 rxA2 = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxA2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rxa2_)));
          set_has_rxa2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rxB1;
        break;
      }

      // optional int32 rxB1 = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxB1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rxb1_)));
          set_has_rxb1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rxB2;
        break;
      }

      // optional int32 rxB2 = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxB2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rxb2_)));
          set_has_rxb2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_txA1;
        break;
      }

      // optional int32 txA1 = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txA1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &txa1_)));
          set_has_txa1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_txA2;
        break;
      }

      // optional int32 txA2 = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txA2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &txa2_)));
          set_has_txa2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_txB1;
        break;
      }

      // optional int32 txB1 = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txB1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &txb1_)));
          set_has_txb1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_txB2;
        break;
      }

      // optional int32 txB2 = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txB2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &txb2_)));
          set_has_txb2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ppcA1;
        break;
      }

      // optional bool ppcA1 = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppcA1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ppca1_)));
          set_has_ppca1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ppcA2;
        break;
      }

      // optional bool ppcA2 = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppcA2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ppca2_)));
          set_has_ppca2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ppcB1;
        break;
      }

      // optional bool ppcB1 = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppcB1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ppcb1_)));
          set_has_ppcb1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ppcB2;
        break;
      }

      // optional bool ppcB2 = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppcB2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ppcb2_)));
          set_has_ppcb2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_cardID;
        break;
      }

      // optional string cardID = 15 [default = "0"];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardid().data(), this->cardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_sampleRateA;
        break;
      }

      // optional float sampleRateA = 16 [default = 5e+07];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sampleRateA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sampleratea_)));
          set_has_sampleratea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_sampleRateB;
        break;
      }

      // optional float sampleRateB = 17 [default = 5e+07];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sampleRateB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &samplerateb_)));
          set_has_samplerateb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_energyThreshA;
        break;
      }

      // optional float energyThreshA = 18 [default = -70];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyThreshA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energythresha_)));
          set_has_energythresha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_energyThreshB;
        break;
      }

      // optional float energyThreshB = 19 [default = -70];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energyThreshB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energythreshb_)));
          set_has_energythreshb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_energyThreshNumA;
        break;
      }

      // optional int32 energyThreshNumA = 20 [default = 200];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyThreshNumA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energythreshnuma_)));
          set_has_energythreshnuma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_energyThreshNumB;
        break;
      }

      // optional int32 energyThreshNumB = 21 [default = 200];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyThreshNumB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energythreshnumb_)));
          set_has_energythreshnumb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_rxBufferSize;
        break;
      }

      // optional int32 rxBufferSize = 22 [default = 512];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxBufferSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rxbuffersize_)));
          set_has_rxbuffersize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_debuglvl;
        break;
      }

      // optional int32 debuglvl = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debuglvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debuglvl_)));
          set_has_debuglvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_externalReference;
        break;
      }

      // optional bool externalReference = 24 [default = true];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_externalReference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &externalreference_)));
          set_has_externalreference();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SidekiqTransceiverConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIDEKIQTRANSCEIVER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 snapshotRingCapacity = 2 [default = 50];
  if (has_snapshotringcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->snapshotringcapacity(), output);
  }

  // optional int32 rxA1 = 3 [default = -1];
  if (has_rxa1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rxa1(), output);
  }

  // optional int32 rxA2 = 4 [default = -1];
  if (has_rxa2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rxa2(), output);
  }

  // optional int32 rxB1 = 5 [default = -1];
  if (has_rxb1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rxb1(), output);
  }

  // optional int32 rxB2 = 6 [default = -1];
  if (has_rxb2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rxb2(), output);
  }

  // optional int32 txA1 = 7 [default = -1];
  if (has_txa1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->txa1(), output);
  }

  // optional int32 txA2 = 8 [default = -1];
  if (has_txa2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->txa2(), output);
  }

  // optional int32 txB1 = 9 [default = -1];
  if (has_txb1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->txb1(), output);
  }

  // optional int32 txB2 = 10 [default = -1];
  if (has_txb2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->txb2(), output);
  }

  // optional bool ppcA1 = 11 [default = false];
  if (has_ppca1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->ppca1(), output);
  }

  // optional bool ppcA2 = 12 [default = false];
  if (has_ppca2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->ppca2(), output);
  }

  // optional bool ppcB1 = 13 [default = false];
  if (has_ppcb1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->ppcb1(), output);
  }

  // optional bool ppcB2 = 14 [default = false];
  if (has_ppcb2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->ppcb2(), output);
  }

  // optional string cardID = 15 [default = "0"];
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->cardid(), output);
  }

  // optional float sampleRateA = 16 [default = 5e+07];
  if (has_sampleratea()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->sampleratea(), output);
  }

  // optional float sampleRateB = 17 [default = 5e+07];
  if (has_samplerateb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->samplerateb(), output);
  }

  // optional float energyThreshA = 18 [default = -70];
  if (has_energythresha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->energythresha(), output);
  }

  // optional float energyThreshB = 19 [default = -70];
  if (has_energythreshb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->energythreshb(), output);
  }

  // optional int32 energyThreshNumA = 20 [default = 200];
  if (has_energythreshnuma()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->energythreshnuma(), output);
  }

  // optional int32 energyThreshNumB = 21 [default = 200];
  if (has_energythreshnumb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->energythreshnumb(), output);
  }

  // optional int32 rxBufferSize = 22 [default = 512];
  if (has_rxbuffersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->rxbuffersize(), output);
  }

  // optional int32 debuglvl = 23 [default = 0];
  if (has_debuglvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->debuglvl(), output);
  }

  // optional bool externalReference = 24 [default = true];
  if (has_externalreference()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->externalreference(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SidekiqTransceiverConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIDEKIQTRANSCEIVER_CONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 snapshotRingCapacity = 2 [default = 50];
  if (has_snapshotringcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->snapshotringcapacity(), target);
  }

  // optional int32 rxA1 = 3 [default = -1];
  if (has_rxa1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rxa1(), target);
  }

  // optional int32 rxA2 = 4 [default = -1];
  if (has_rxa2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rxa2(), target);
  }

  // optional int32 rxB1 = 5 [default = -1];
  if (has_rxb1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rxb1(), target);
  }

  // optional int32 rxB2 = 6 [default = -1];
  if (has_rxb2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rxb2(), target);
  }

  // optional int32 txA1 = 7 [default = -1];
  if (has_txa1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->txa1(), target);
  }

  // optional int32 txA2 = 8 [default = -1];
  if (has_txa2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->txa2(), target);
  }

  // optional int32 txB1 = 9 [default = -1];
  if (has_txb1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->txb1(), target);
  }

  // optional int32 txB2 = 10 [default = -1];
  if (has_txb2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->txb2(), target);
  }

  // optional bool ppcA1 = 11 [default = false];
  if (has_ppca1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->ppca1(), target);
  }

  // optional bool ppcA2 = 12 [default = false];
  if (has_ppca2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->ppca2(), target);
  }

  // optional bool ppcB1 = 13 [default = false];
  if (has_ppcb1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->ppcb1(), target);
  }

  // optional bool ppcB2 = 14 [default = false];
  if (has_ppcb2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->ppcb2(), target);
  }

  // optional string cardID = 15 [default = "0"];
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->cardid(), target);
  }

  // optional float sampleRateA = 16 [default = 5e+07];
  if (has_sampleratea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->sampleratea(), target);
  }

  // optional float sampleRateB = 17 [default = 5e+07];
  if (has_samplerateb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->samplerateb(), target);
  }

  // optional float energyThreshA = 18 [default = -70];
  if (has_energythresha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->energythresha(), target);
  }

  // optional float energyThreshB = 19 [default = -70];
  if (has_energythreshb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->energythreshb(), target);
  }

  // optional int32 energyThreshNumA = 20 [default = 200];
  if (has_energythreshnuma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->energythreshnuma(), target);
  }

  // optional int32 energyThreshNumB = 21 [default = 200];
  if (has_energythreshnumb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->energythreshnumb(), target);
  }

  // optional int32 rxBufferSize = 22 [default = 512];
  if (has_rxbuffersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->rxbuffersize(), target);
  }

  // optional int32 debuglvl = 23 [default = 0];
  if (has_debuglvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->debuglvl(), target);
  }

  // optional bool externalReference = 24 [default = true];
  if (has_externalreference()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->externalreference(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SidekiqTransceiverConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIDEKIQTRANSCEIVER_CONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 snapshotRingCapacity = 2 [default = 50];
    if (has_snapshotringcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapshotringcapacity());
    }

    // optional int32 rxA1 = 3 [default = -1];
    if (has_rxa1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rxa1());
    }

    // optional int32 rxA2 = 4 [default = -1];
    if (has_rxa2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rxa2());
    }

    // optional int32 rxB1 = 5 [default = -1];
    if (has_rxb1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rxb1());
    }

    // optional int32 rxB2 = 6 [default = -1];
    if (has_rxb2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rxb2());
    }

    // optional int32 txA1 = 7 [default = -1];
    if (has_txa1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->txa1());
    }

    // optional int32 txA2 = 8 [default = -1];
    if (has_txa2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->txa2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 txB1 = 9 [default = -1];
    if (has_txb1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->txb1());
    }

    // optional int32 txB2 = 10 [default = -1];
    if (has_txb2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->txb2());
    }

    // optional bool ppcA1 = 11 [default = false];
    if (has_ppca1()) {
      total_size += 1 + 1;
    }

    // optional bool ppcA2 = 12 [default = false];
    if (has_ppca2()) {
      total_size += 1 + 1;
    }

    // optional bool ppcB1 = 13 [default = false];
    if (has_ppcb1()) {
      total_size += 1 + 1;
    }

    // optional bool ppcB2 = 14 [default = false];
    if (has_ppcb2()) {
      total_size += 1 + 1;
    }

    // optional string cardID = 15 [default = "0"];
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardid());
    }

    // optional float sampleRateA = 16 [default = 5e+07];
    if (has_sampleratea()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float sampleRateB = 17 [default = 5e+07];
    if (has_samplerateb()) {
      total_size += 2 + 4;
    }

    // optional float energyThreshA = 18 [default = -70];
    if (has_energythresha()) {
      total_size += 2 + 4;
    }

    // optional float energyThreshB = 19 [default = -70];
    if (has_energythreshb()) {
      total_size += 2 + 4;
    }

    // optional int32 energyThreshNumA = 20 [default = 200];
    if (has_energythreshnuma()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energythreshnuma());
    }

    // optional int32 energyThreshNumB = 21 [default = 200];
    if (has_energythreshnumb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energythreshnumb());
    }

    // optional int32 rxBufferSize = 22 [default = 512];
    if (has_rxbuffersize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rxbuffersize());
    }

    // optional int32 debuglvl = 23 [default = 0];
    if (has_debuglvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debuglvl());
    }

    // optional bool externalReference = 24 [default = true];
    if (has_externalreference()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SidekiqTransceiverConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SidekiqTransceiverConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SidekiqTransceiverConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SidekiqTransceiverConfig::MergeFrom(const SidekiqTransceiverConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_snapshotringcapacity()) {
      set_snapshotringcapacity(from.snapshotringcapacity());
    }
    if (from.has_rxa1()) {
      set_rxa1(from.rxa1());
    }
    if (from.has_rxa2()) {
      set_rxa2(from.rxa2());
    }
    if (from.has_rxb1()) {
      set_rxb1(from.rxb1());
    }
    if (from.has_rxb2()) {
      set_rxb2(from.rxb2());
    }
    if (from.has_txa1()) {
      set_txa1(from.txa1());
    }
    if (from.has_txa2()) {
      set_txa2(from.txa2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_txb1()) {
      set_txb1(from.txb1());
    }
    if (from.has_txb2()) {
      set_txb2(from.txb2());
    }
    if (from.has_ppca1()) {
      set_ppca1(from.ppca1());
    }
    if (from.has_ppca2()) {
      set_ppca2(from.ppca2());
    }
    if (from.has_ppcb1()) {
      set_ppcb1(from.ppcb1());
    }
    if (from.has_ppcb2()) {
      set_ppcb2(from.ppcb2());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_sampleratea()) {
      set_sampleratea(from.sampleratea());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_samplerateb()) {
      set_samplerateb(from.samplerateb());
    }
    if (from.has_energythresha()) {
      set_energythresha(from.energythresha());
    }
    if (from.has_energythreshb()) {
      set_energythreshb(from.energythreshb());
    }
    if (from.has_energythreshnuma()) {
      set_energythreshnuma(from.energythreshnuma());
    }
    if (from.has_energythreshnumb()) {
      set_energythreshnumb(from.energythreshnumb());
    }
    if (from.has_rxbuffersize()) {
      set_rxbuffersize(from.rxbuffersize());
    }
    if (from.has_debuglvl()) {
      set_debuglvl(from.debuglvl());
    }
    if (from.has_externalreference()) {
      set_externalreference(from.externalreference());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SidekiqTransceiverConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SidekiqTransceiverConfig::CopyFrom(const SidekiqTransceiverConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SidekiqTransceiverConfig::IsInitialized() const {

  return true;
}

void SidekiqTransceiverConfig::Swap(SidekiqTransceiverConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(snapshotringcapacity_, other->snapshotringcapacity_);
    std::swap(rxa1_, other->rxa1_);
    std::swap(rxa2_, other->rxa2_);
    std::swap(rxb1_, other->rxb1_);
    std::swap(rxb2_, other->rxb2_);
    std::swap(txa1_, other->txa1_);
    std::swap(txa2_, other->txa2_);
    std::swap(txb1_, other->txb1_);
    std::swap(txb2_, other->txb2_);
    std::swap(ppca1_, other->ppca1_);
    std::swap(ppca2_, other->ppca2_);
    std::swap(ppcb1_, other->ppcb1_);
    std::swap(ppcb2_, other->ppcb2_);
    std::swap(cardid_, other->cardid_);
    std::swap(sampleratea_, other->sampleratea_);
    std::swap(samplerateb_, other->samplerateb_);
    std::swap(energythresha_, other->energythresha_);
    std::swap(energythreshb_, other->energythreshb_);
    std::swap(energythreshnuma_, other->energythreshnuma_);
    std::swap(energythreshnumb_, other->energythreshnumb_);
    std::swap(rxbuffersize_, other->rxbuffersize_);
    std::swap(debuglvl_, other->debuglvl_);
    std::swap(externalreference_, other->externalreference_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SidekiqTransceiverConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SidekiqTransceiverConfig_descriptor_;
  metadata.reflection = SidekiqTransceiverConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* MMSTunerConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int MMSTunerConfig::kMsgNameFieldNumber;
const int MMSTunerConfig::kSnapshotRingCapacityFieldNumber;
const int MMSTunerConfig::kChannelFieldNumber;
const int MMSTunerConfig::kIpFieldNumber;
const int MMSTunerConfig::kInterfaceFieldNumber;
const int MMSTunerConfig::kBandwidthFieldNumber;
const int MMSTunerConfig::kSampleRateFieldNumber;
const int MMSTunerConfig::kMmsRcvrNumFieldNumber;
const int MMSTunerConfig::kUsehwfftsFieldNumber;
const int MMSTunerConfig::kMmsWatchdogEnabledFieldNumber;
const int MMSTunerConfig::kMmsWatchdogPetDeltaWarningThresholdFieldNumber;
const int MMSTunerConfig::kMmsWatchdogPetIntervalFieldNumber;
const int MMSTunerConfig::kMmsWatchdogTimeoutFieldNumber;
const int MMSTunerConfig::kXpipemonitorEnabledFieldNumber;
#endif  // !_MSC_VER

MMSTunerConfig::MMSTunerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMSTunerConfig::InitAsDefaultInstance() {
}

MMSTunerConfig::MMSTunerConfig(const MMSTunerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMSTunerConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  snapshotringcapacity_ = 50;
  channel_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  interface_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bandwidth_ = 0;
  samplerate_ = 0;
  mmsrcvrnum_ = 0;
  usehwffts_ = false;
  mmswatchdogenabled_ = true;
  mmswatchdogpetdeltawarningthreshold_ = 20;
  mmswatchdogpetinterval_ = 5;
  mmswatchdogtimeout_ = 30;
  xpipemonitorenabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMSTunerConfig::~MMSTunerConfig() {
  SharedDtor();
}

void MMSTunerConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (interface_ != &::google::protobuf::internal::kEmptyString) {
    delete interface_;
  }
  if (this != default_instance_) {
  }
}

void MMSTunerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMSTunerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMSTunerConfig_descriptor_;
}

const MMSTunerConfig& MMSTunerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

MMSTunerConfig* MMSTunerConfig::default_instance_ = NULL;

MMSTunerConfig* MMSTunerConfig::New() const {
  return new MMSTunerConfig;
}

void MMSTunerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    snapshotringcapacity_ = 50;
    channel_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_interface()) {
      if (interface_ != &::google::protobuf::internal::kEmptyString) {
        interface_->clear();
      }
    }
    bandwidth_ = 0;
    samplerate_ = 0;
    mmsrcvrnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    usehwffts_ = false;
    mmswatchdogenabled_ = true;
    mmswatchdogpetdeltawarningthreshold_ = 20;
    mmswatchdogpetinterval_ = 5;
    mmswatchdogtimeout_ = 30;
    xpipemonitorenabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMSTunerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "MMSTUNERCONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_snapshotRingCapacity;
        break;
      }

      // optional int32 snapshotRingCapacity = 2 [default = 50];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snapshotRingCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshotringcapacity_)));
          set_has_snapshotringcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }

      // optional int32 channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_interface;
        break;
      }

      // optional string interface = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->interface().data(), this->interface().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_bandwidth;
        break;
      }

      // optional float bandwidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_sampleRate;
        break;
      }

      // optional float sampleRate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sampleRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &samplerate_)));
          set_has_samplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mmsRcvrNum;
        break;
      }

      // optional int32 mmsRcvrNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mmsRcvrNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mmsrcvrnum_)));
          set_has_mmsrcvrnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_usehwffts;
        break;
      }

      // optional bool usehwffts = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usehwffts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usehwffts_)));
          set_has_usehwffts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mmsWatchdogEnabled;
        break;
      }

      // optional bool mmsWatchdogEnabled = 10 [default = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mmsWatchdogEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mmswatchdogenabled_)));
          set_has_mmswatchdogenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_mmsWatchdogPetDeltaWarningThreshold;
        break;
      }

      // optional float mmsWatchdogPetDeltaWarningThreshold = 11 [default = 20];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mmsWatchdogPetDeltaWarningThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mmswatchdogpetdeltawarningthreshold_)));
          set_has_mmswatchdogpetdeltawarningthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_mmsWatchdogPetInterval;
        break;
      }

      // optional float mmsWatchdogPetInterval = 12 [default = 5];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mmsWatchdogPetInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mmswatchdogpetinterval_)));
          set_has_mmswatchdogpetinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mmsWatchdogTimeout;
        break;
      }

      // optional int32 mmsWatchdogTimeout = 13 [default = 30];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mmsWatchdogTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mmswatchdogtimeout_)));
          set_has_mmswatchdogtimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_xpipemonitorEnabled;
        break;
      }

      // optional bool xpipemonitorEnabled = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpipemonitorEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xpipemonitorenabled_)));
          set_has_xpipemonitorenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MMSTunerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "MMSTUNERCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 snapshotRingCapacity = 2 [default = 50];
  if (has_snapshotringcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->snapshotringcapacity(), output);
  }

  // optional int32 channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional string interface = 5;
  if (has_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interface().data(), this->interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->interface(), output);
  }

  // optional float bandwidth = 6;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->bandwidth(), output);
  }

  // optional float sampleRate = 7;
  if (has_samplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->samplerate(), output);
  }

  // optional int32 mmsRcvrNum = 8;
  if (has_mmsrcvrnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mmsrcvrnum(), output);
  }

  // optional bool usehwffts = 9 [default = false];
  if (has_usehwffts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->usehwffts(), output);
  }

  // optional bool mmsWatchdogEnabled = 10 [default = true];
  if (has_mmswatchdogenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->mmswatchdogenabled(), output);
  }

  // optional float mmsWatchdogPetDeltaWarningThreshold = 11 [default = 20];
  if (has_mmswatchdogpetdeltawarningthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->mmswatchdogpetdeltawarningthreshold(), output);
  }

  // optional float mmsWatchdogPetInterval = 12 [default = 5];
  if (has_mmswatchdogpetinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->mmswatchdogpetinterval(), output);
  }

  // optional int32 mmsWatchdogTimeout = 13 [default = 30];
  if (has_mmswatchdogtimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mmswatchdogtimeout(), output);
  }

  // optional bool xpipemonitorEnabled = 14 [default = false];
  if (has_xpipemonitorenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->xpipemonitorenabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMSTunerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "MMSTUNERCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 snapshotRingCapacity = 2 [default = 50];
  if (has_snapshotringcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->snapshotringcapacity(), target);
  }

  // optional int32 channel = 3;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional string interface = 5;
  if (has_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interface().data(), this->interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->interface(), target);
  }

  // optional float bandwidth = 6;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->bandwidth(), target);
  }

  // optional float sampleRate = 7;
  if (has_samplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->samplerate(), target);
  }

  // optional int32 mmsRcvrNum = 8;
  if (has_mmsrcvrnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mmsrcvrnum(), target);
  }

  // optional bool usehwffts = 9 [default = false];
  if (has_usehwffts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->usehwffts(), target);
  }

  // optional bool mmsWatchdogEnabled = 10 [default = true];
  if (has_mmswatchdogenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->mmswatchdogenabled(), target);
  }

  // optional float mmsWatchdogPetDeltaWarningThreshold = 11 [default = 20];
  if (has_mmswatchdogpetdeltawarningthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->mmswatchdogpetdeltawarningthreshold(), target);
  }

  // optional float mmsWatchdogPetInterval = 12 [default = 5];
  if (has_mmswatchdogpetinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->mmswatchdogpetinterval(), target);
  }

  // optional int32 mmsWatchdogTimeout = 13 [default = 30];
  if (has_mmswatchdogtimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mmswatchdogtimeout(), target);
  }

  // optional bool xpipemonitorEnabled = 14 [default = false];
  if (has_xpipemonitorenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->xpipemonitorenabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMSTunerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "MMSTUNERCONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 snapshotRingCapacity = 2 [default = 50];
    if (has_snapshotringcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapshotringcapacity());
    }

    // optional int32 channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string interface = 5;
    if (has_interface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interface());
    }

    // optional float bandwidth = 6;
    if (has_bandwidth()) {
      total_size += 1 + 4;
    }

    // optional float sampleRate = 7;
    if (has_samplerate()) {
      total_size += 1 + 4;
    }

    // optional int32 mmsRcvrNum = 8;
    if (has_mmsrcvrnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mmsrcvrnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool usehwffts = 9 [default = false];
    if (has_usehwffts()) {
      total_size += 1 + 1;
    }

    // optional bool mmsWatchdogEnabled = 10 [default = true];
    if (has_mmswatchdogenabled()) {
      total_size += 1 + 1;
    }

    // optional float mmsWatchdogPetDeltaWarningThreshold = 11 [default = 20];
    if (has_mmswatchdogpetdeltawarningthreshold()) {
      total_size += 1 + 4;
    }

    // optional float mmsWatchdogPetInterval = 12 [default = 5];
    if (has_mmswatchdogpetinterval()) {
      total_size += 1 + 4;
    }

    // optional int32 mmsWatchdogTimeout = 13 [default = 30];
    if (has_mmswatchdogtimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mmswatchdogtimeout());
    }

    // optional bool xpipemonitorEnabled = 14 [default = false];
    if (has_xpipemonitorenabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMSTunerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMSTunerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMSTunerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMSTunerConfig::MergeFrom(const MMSTunerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_snapshotringcapacity()) {
      set_snapshotringcapacity(from.snapshotringcapacity());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_interface()) {
      set_interface(from.interface());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_samplerate()) {
      set_samplerate(from.samplerate());
    }
    if (from.has_mmsrcvrnum()) {
      set_mmsrcvrnum(from.mmsrcvrnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usehwffts()) {
      set_usehwffts(from.usehwffts());
    }
    if (from.has_mmswatchdogenabled()) {
      set_mmswatchdogenabled(from.mmswatchdogenabled());
    }
    if (from.has_mmswatchdogpetdeltawarningthreshold()) {
      set_mmswatchdogpetdeltawarningthreshold(from.mmswatchdogpetdeltawarningthreshold());
    }
    if (from.has_mmswatchdogpetinterval()) {
      set_mmswatchdogpetinterval(from.mmswatchdogpetinterval());
    }
    if (from.has_mmswatchdogtimeout()) {
      set_mmswatchdogtimeout(from.mmswatchdogtimeout());
    }
    if (from.has_xpipemonitorenabled()) {
      set_xpipemonitorenabled(from.xpipemonitorenabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMSTunerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMSTunerConfig::CopyFrom(const MMSTunerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMSTunerConfig::IsInitialized() const {

  return true;
}

void MMSTunerConfig::Swap(MMSTunerConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(snapshotringcapacity_, other->snapshotringcapacity_);
    std::swap(channel_, other->channel_);
    std::swap(ip_, other->ip_);
    std::swap(interface_, other->interface_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(samplerate_, other->samplerate_);
    std::swap(mmsrcvrnum_, other->mmsrcvrnum_);
    std::swap(usehwffts_, other->usehwffts_);
    std::swap(mmswatchdogenabled_, other->mmswatchdogenabled_);
    std::swap(mmswatchdogpetdeltawarningthreshold_, other->mmswatchdogpetdeltawarningthreshold_);
    std::swap(mmswatchdogpetinterval_, other->mmswatchdogpetinterval_);
    std::swap(mmswatchdogtimeout_, other->mmswatchdogtimeout_);
    std::swap(xpipemonitorenabled_, other->xpipemonitorenabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMSTunerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMSTunerConfig_descriptor_;
  metadata.reflection = MMSTunerConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DFServiceConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int DFServiceConfig::kMsgNameFieldNumber;
const int DFServiceConfig::kInterceptTimeoutFieldNumber;
const int DFServiceConfig::kSigupTimeoutFieldNumber;
const int DFServiceConfig::kSigdownTimeoutFieldNumber;
const int DFServiceConfig::kAdditionalBox1FieldNumber;
const int DFServiceConfig::kAdditionalBox2FieldNumber;
#endif  // !_MSC_VER

DFServiceConfig::DFServiceConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DFServiceConfig::InitAsDefaultInstance() {
}

DFServiceConfig::DFServiceConfig(const DFServiceConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DFServiceConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  intercepttimeout_ = 300;
  siguptimeout_ = 7200;
  sigdowntimeout_ = 120;
  additionalbox1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  additionalbox2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DFServiceConfig::~DFServiceConfig() {
  SharedDtor();
}

void DFServiceConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (additionalbox1_ != &::google::protobuf::internal::kEmptyString) {
    delete additionalbox1_;
  }
  if (additionalbox2_ != &::google::protobuf::internal::kEmptyString) {
    delete additionalbox2_;
  }
  if (this != default_instance_) {
  }
}

void DFServiceConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DFServiceConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DFServiceConfig_descriptor_;
}

const DFServiceConfig& DFServiceConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

DFServiceConfig* DFServiceConfig::default_instance_ = NULL;

DFServiceConfig* DFServiceConfig::New() const {
  return new DFServiceConfig;
}

void DFServiceConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    intercepttimeout_ = 300;
    siguptimeout_ = 7200;
    sigdowntimeout_ = 120;
    if (has_additionalbox1()) {
      if (additionalbox1_ != &::google::protobuf::internal::kEmptyString) {
        additionalbox1_->clear();
      }
    }
    if (has_additionalbox2()) {
      if (additionalbox2_ != &::google::protobuf::internal::kEmptyString) {
        additionalbox2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DFServiceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DFSERVICECONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_interceptTimeout;
        break;
      }

      // optional int32 interceptTimeout = 2 [default = 300];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interceptTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intercepttimeout_)));
          set_has_intercepttimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sigupTimeout;
        break;
      }

      // optional int32 sigupTimeout = 3 [default = 7200];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sigupTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &siguptimeout_)));
          set_has_siguptimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sigdownTimeout;
        break;
      }

      // optional int32 sigdownTimeout = 4 [default = 120];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sigdownTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sigdowntimeout_)));
          set_has_sigdowntimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_additionalBox1;
        break;
      }

      // optional string additionalBox1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additionalBox1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalbox1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->additionalbox1().data(), this->additionalbox1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_additionalBox2;
        break;
      }

      // optional string additionalBox2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additionalBox2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalbox2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->additionalbox2().data(), this->additionalbox2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DFServiceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DFSERVICECONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 interceptTimeout = 2 [default = 300];
  if (has_intercepttimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->intercepttimeout(), output);
  }

  // optional int32 sigupTimeout = 3 [default = 7200];
  if (has_siguptimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->siguptimeout(), output);
  }

  // optional int32 sigdownTimeout = 4 [default = 120];
  if (has_sigdowntimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sigdowntimeout(), output);
  }

  // optional string additionalBox1 = 5;
  if (has_additionalbox1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->additionalbox1().data(), this->additionalbox1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->additionalbox1(), output);
  }

  // optional string additionalBox2 = 6;
  if (has_additionalbox2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->additionalbox2().data(), this->additionalbox2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->additionalbox2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DFServiceConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DFSERVICECONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 interceptTimeout = 2 [default = 300];
  if (has_intercepttimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->intercepttimeout(), target);
  }

  // optional int32 sigupTimeout = 3 [default = 7200];
  if (has_siguptimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->siguptimeout(), target);
  }

  // optional int32 sigdownTimeout = 4 [default = 120];
  if (has_sigdowntimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sigdowntimeout(), target);
  }

  // optional string additionalBox1 = 5;
  if (has_additionalbox1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->additionalbox1().data(), this->additionalbox1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->additionalbox1(), target);
  }

  // optional string additionalBox2 = 6;
  if (has_additionalbox2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->additionalbox2().data(), this->additionalbox2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->additionalbox2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DFServiceConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DFSERVICECONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 interceptTimeout = 2 [default = 300];
    if (has_intercepttimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intercepttimeout());
    }

    // optional int32 sigupTimeout = 3 [default = 7200];
    if (has_siguptimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->siguptimeout());
    }

    // optional int32 sigdownTimeout = 4 [default = 120];
    if (has_sigdowntimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sigdowntimeout());
    }

    // optional string additionalBox1 = 5;
    if (has_additionalbox1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalbox1());
    }

    // optional string additionalBox2 = 6;
    if (has_additionalbox2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalbox2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DFServiceConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DFServiceConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DFServiceConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DFServiceConfig::MergeFrom(const DFServiceConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_intercepttimeout()) {
      set_intercepttimeout(from.intercepttimeout());
    }
    if (from.has_siguptimeout()) {
      set_siguptimeout(from.siguptimeout());
    }
    if (from.has_sigdowntimeout()) {
      set_sigdowntimeout(from.sigdowntimeout());
    }
    if (from.has_additionalbox1()) {
      set_additionalbox1(from.additionalbox1());
    }
    if (from.has_additionalbox2()) {
      set_additionalbox2(from.additionalbox2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DFServiceConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DFServiceConfig::CopyFrom(const DFServiceConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DFServiceConfig::IsInitialized() const {

  return true;
}

void DFServiceConfig::Swap(DFServiceConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(intercepttimeout_, other->intercepttimeout_);
    std::swap(siguptimeout_, other->siguptimeout_);
    std::swap(sigdowntimeout_, other->sigdowntimeout_);
    std::swap(additionalbox1_, other->additionalbox1_);
    std::swap(additionalbox2_, other->additionalbox2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DFServiceConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DFServiceConfig_descriptor_;
  metadata.reflection = DFServiceConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TechniqueConfig::_default_msgname_ = NULL;
::std::string* TechniqueConfig::_default_capabilityid_ = NULL;
#ifndef _MSC_VER
const int TechniqueConfig::kMsgNameFieldNumber;
const int TechniqueConfig::kPlatformFieldNumber;
const int TechniqueConfig::kMethodFieldNumber;
const int TechniqueConfig::kScriptFieldNumber;
const int TechniqueConfig::kSamplerateFieldNumber;
const int TechniqueConfig::kInputsamplerateFieldNumber;
const int TechniqueConfig::kHostFieldNumber;
const int TechniqueConfig::kPortFieldNumber;
const int TechniqueConfig::kIfFreqFieldNumber;
const int TechniqueConfig::kEstimatedRFMHzFieldNumber;
const int TechniqueConfig::kOverrideChannelFieldNumber;
const int TechniqueConfig::kCapabilityIdFieldNumber;
#endif  // !_MSC_VER

TechniqueConfig::TechniqueConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TechniqueConfig::InitAsDefaultInstance() {
}

TechniqueConfig::TechniqueConfig(const TechniqueConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TechniqueConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  samplerate_ = 0;
  inputsamplerate_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  if_freq_ = 0;
  estimatedrfmhz_ = 433;
  overridechannel_ = -1;
  capabilityid_ = const_cast< ::std::string*>(_default_capabilityid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TechniqueConfig::~TechniqueConfig() {
  SharedDtor();
}

void TechniqueConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    delete script_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (capabilityid_ != _default_capabilityid_) {
    delete capabilityid_;
  }
  if (this != default_instance_) {
  }
}

void TechniqueConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TechniqueConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TechniqueConfig_descriptor_;
}

const TechniqueConfig& TechniqueConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

TechniqueConfig* TechniqueConfig::default_instance_ = NULL;

TechniqueConfig* TechniqueConfig::New() const {
  return new TechniqueConfig;
}

void TechniqueConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::kEmptyString) {
        method_->clear();
      }
    }
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::kEmptyString) {
        script_->clear();
      }
    }
    samplerate_ = 0;
    inputsamplerate_ = 0;
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if_freq_ = 0;
    estimatedrfmhz_ = 433;
    overridechannel_ = -1;
    if (has_capabilityid()) {
      if (capabilityid_ != _default_capabilityid_) {
        capabilityid_->assign(*_default_capabilityid_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TechniqueConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TECHNIQUECONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_platform;
        break;
      }

      // optional string platform = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_method;
        break;
      }

      // optional string method = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_script;
        break;
      }

      // optional string script = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_samplerate;
        break;
      }

      // optional float samplerate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_samplerate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &samplerate_)));
          set_has_samplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_inputsamplerate;
        break;
      }

      // optional float inputsamplerate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_inputsamplerate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inputsamplerate_)));
          set_has_inputsamplerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_host;
        break;
      }

      // optional string host = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_port;
        break;
      }

      // optional int32 port = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_if_freq;
        break;
      }

      // optional float if_freq = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_if_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &if_freq_)));
          set_has_if_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_estimatedRFMHz;
        break;
      }

      // optional float estimatedRFMHz = 10 [default = 433];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_estimatedRFMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &estimatedrfmhz_)));
          set_has_estimatedrfmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_overrideChannel;
        break;
      }

      // optional int32 overrideChannel = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overrideChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overridechannel_)));
          set_has_overridechannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_capabilityId;
        break;
      }

      // optional string capabilityId = 12 [default = "<DERIVE>"];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capabilityId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capabilityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->capabilityid().data(), this->capabilityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TechniqueConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TECHNIQUECONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platform(), output);
  }

  // optional string method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->method(), output);
  }

  // optional string script = 4;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->script(), output);
  }

  // optional float samplerate = 5;
  if (has_samplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->samplerate(), output);
  }

  // optional float inputsamplerate = 6;
  if (has_inputsamplerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->inputsamplerate(), output);
  }

  // optional string host = 7;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->host(), output);
  }

  // optional int32 port = 8;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->port(), output);
  }

  // optional float if_freq = 9 [default = 0];
  if (has_if_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->if_freq(), output);
  }

  // optional float estimatedRFMHz = 10 [default = 433];
  if (has_estimatedrfmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->estimatedrfmhz(), output);
  }

  // optional int32 overrideChannel = 11 [default = -1];
  if (has_overridechannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->overridechannel(), output);
  }

  // optional string capabilityId = 12 [default = "<DERIVE>"];
  if (has_capabilityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capabilityid().data(), this->capabilityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->capabilityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TechniqueConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TECHNIQUECONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform(), target);
  }

  // optional string method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method(), target);
  }

  // optional string script = 4;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->script(), target);
  }

  // optional float samplerate = 5;
  if (has_samplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->samplerate(), target);
  }

  // optional float inputsamplerate = 6;
  if (has_inputsamplerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->inputsamplerate(), target);
  }

  // optional string host = 7;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->host(), target);
  }

  // optional int32 port = 8;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->port(), target);
  }

  // optional float if_freq = 9 [default = 0];
  if (has_if_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->if_freq(), target);
  }

  // optional float estimatedRFMHz = 10 [default = 433];
  if (has_estimatedrfmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->estimatedrfmhz(), target);
  }

  // optional int32 overrideChannel = 11 [default = -1];
  if (has_overridechannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->overridechannel(), target);
  }

  // optional string capabilityId = 12 [default = "<DERIVE>"];
  if (has_capabilityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capabilityid().data(), this->capabilityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->capabilityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TechniqueConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TECHNIQUECONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string method = 3;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // optional string script = 4;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }

    // optional float samplerate = 5;
    if (has_samplerate()) {
      total_size += 1 + 4;
    }

    // optional float inputsamplerate = 6;
    if (has_inputsamplerate()) {
      total_size += 1 + 4;
    }

    // optional string host = 7;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional int32 port = 8;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float if_freq = 9 [default = 0];
    if (has_if_freq()) {
      total_size += 1 + 4;
    }

    // optional float estimatedRFMHz = 10 [default = 433];
    if (has_estimatedrfmhz()) {
      total_size += 1 + 4;
    }

    // optional int32 overrideChannel = 11 [default = -1];
    if (has_overridechannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overridechannel());
    }

    // optional string capabilityId = 12 [default = "<DERIVE>"];
    if (has_capabilityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capabilityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TechniqueConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TechniqueConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TechniqueConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TechniqueConfig::MergeFrom(const TechniqueConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_samplerate()) {
      set_samplerate(from.samplerate());
    }
    if (from.has_inputsamplerate()) {
      set_inputsamplerate(from.inputsamplerate());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_if_freq()) {
      set_if_freq(from.if_freq());
    }
    if (from.has_estimatedrfmhz()) {
      set_estimatedrfmhz(from.estimatedrfmhz());
    }
    if (from.has_overridechannel()) {
      set_overridechannel(from.overridechannel());
    }
    if (from.has_capabilityid()) {
      set_capabilityid(from.capabilityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TechniqueConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechniqueConfig::CopyFrom(const TechniqueConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechniqueConfig::IsInitialized() const {

  return true;
}

void TechniqueConfig::Swap(TechniqueConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(platform_, other->platform_);
    std::swap(method_, other->method_);
    std::swap(script_, other->script_);
    std::swap(samplerate_, other->samplerate_);
    std::swap(inputsamplerate_, other->inputsamplerate_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(if_freq_, other->if_freq_);
    std::swap(estimatedrfmhz_, other->estimatedrfmhz_);
    std::swap(overridechannel_, other->overridechannel_);
    std::swap(capabilityid_, other->capabilityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TechniqueConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TechniqueConfig_descriptor_;
  metadata.reflection = TechniqueConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RulesEngineConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int RulesEngineConfig::kMsgNameFieldNumber;
const int RulesEngineConfig::kXmlRulesFieldNumber;
#endif  // !_MSC_VER

RulesEngineConfig::RulesEngineConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RulesEngineConfig::InitAsDefaultInstance() {
}

RulesEngineConfig::RulesEngineConfig(const RulesEngineConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RulesEngineConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RulesEngineConfig::~RulesEngineConfig() {
  SharedDtor();
}

void RulesEngineConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void RulesEngineConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RulesEngineConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RulesEngineConfig_descriptor_;
}

const RulesEngineConfig& RulesEngineConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

RulesEngineConfig* RulesEngineConfig::default_instance_ = NULL;

RulesEngineConfig* RulesEngineConfig::New() const {
  return new RulesEngineConfig;
}

void RulesEngineConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  xmlrules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RulesEngineConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "RULESENGINECONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xmlRules;
        break;
      }

      // repeated string xmlRules = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xmlRules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_xmlrules()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xmlrules(this->xmlrules_size() - 1).data(),
            this->xmlrules(this->xmlrules_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xmlRules;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RulesEngineConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "RULESENGINECONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated string xmlRules = 2;
  for (int i = 0; i < this->xmlrules_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->xmlrules(i).data(), this->xmlrules(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->xmlrules(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RulesEngineConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "RULESENGINECONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated string xmlRules = 2;
  for (int i = 0; i < this->xmlrules_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xmlrules(i).data(), this->xmlrules(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->xmlrules(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RulesEngineConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "RULESENGINECONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  // repeated string xmlRules = 2;
  total_size += 1 * this->xmlrules_size();
  for (int i = 0; i < this->xmlrules_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->xmlrules(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RulesEngineConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RulesEngineConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RulesEngineConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RulesEngineConfig::MergeFrom(const RulesEngineConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  xmlrules_.MergeFrom(from.xmlrules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RulesEngineConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RulesEngineConfig::CopyFrom(const RulesEngineConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RulesEngineConfig::IsInitialized() const {

  return true;
}

void RulesEngineConfig::Swap(RulesEngineConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    xmlrules_.Swap(&other->xmlrules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RulesEngineConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RulesEngineConfig_descriptor_;
  metadata.reflection = RulesEngineConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DatabaseKeeperConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int DatabaseKeeperConfig::kMsgNameFieldNumber;
const int DatabaseKeeperConfig::kWriteIntervalFieldNumber;
const int DatabaseKeeperConfig::kDisableWriteFieldNumber;
#endif  // !_MSC_VER

DatabaseKeeperConfig::DatabaseKeeperConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatabaseKeeperConfig::InitAsDefaultInstance() {
}

DatabaseKeeperConfig::DatabaseKeeperConfig(const DatabaseKeeperConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatabaseKeeperConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  writeinterval_ = 1;
  disablewrite_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatabaseKeeperConfig::~DatabaseKeeperConfig() {
  SharedDtor();
}

void DatabaseKeeperConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void DatabaseKeeperConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseKeeperConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseKeeperConfig_descriptor_;
}

const DatabaseKeeperConfig& DatabaseKeeperConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

DatabaseKeeperConfig* DatabaseKeeperConfig::default_instance_ = NULL;

DatabaseKeeperConfig* DatabaseKeeperConfig::New() const {
  return new DatabaseKeeperConfig;
}

void DatabaseKeeperConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    writeinterval_ = 1;
    disablewrite_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatabaseKeeperConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "DATABASEKEEPERCONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_writeInterval;
        break;
      }

      // optional int32 writeInterval = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writeInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writeinterval_)));
          set_has_writeinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_disableWrite;
        break;
      }

      // optional bool disableWrite = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disableWrite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disablewrite_)));
          set_has_disablewrite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatabaseKeeperConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "DATABASEKEEPERCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional int32 writeInterval = 2 [default = 1];
  if (has_writeinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->writeinterval(), output);
  }

  // optional bool disableWrite = 3 [default = false];
  if (has_disablewrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->disablewrite(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatabaseKeeperConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "DATABASEKEEPERCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional int32 writeInterval = 2 [default = 1];
  if (has_writeinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->writeinterval(), target);
  }

  // optional bool disableWrite = 3 [default = false];
  if (has_disablewrite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->disablewrite(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatabaseKeeperConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "DATABASEKEEPERCONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int32 writeInterval = 2 [default = 1];
    if (has_writeinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writeinterval());
    }

    // optional bool disableWrite = 3 [default = false];
    if (has_disablewrite()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseKeeperConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatabaseKeeperConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatabaseKeeperConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatabaseKeeperConfig::MergeFrom(const DatabaseKeeperConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_writeinterval()) {
      set_writeinterval(from.writeinterval());
    }
    if (from.has_disablewrite()) {
      set_disablewrite(from.disablewrite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatabaseKeeperConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseKeeperConfig::CopyFrom(const DatabaseKeeperConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseKeeperConfig::IsInitialized() const {

  return true;
}

void DatabaseKeeperConfig::Swap(DatabaseKeeperConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(writeinterval_, other->writeinterval_);
    std::swap(disablewrite_, other->disablewrite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatabaseKeeperConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatabaseKeeperConfig_descriptor_;
  metadata.reflection = DatabaseKeeperConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* KeplerUIConnectionConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int KeplerUIConnectionConfig::kMsgNameFieldNumber;
#endif  // !_MSC_VER

KeplerUIConnectionConfig::KeplerUIConnectionConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeplerUIConnectionConfig::InitAsDefaultInstance() {
}

KeplerUIConnectionConfig::KeplerUIConnectionConfig(const KeplerUIConnectionConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeplerUIConnectionConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeplerUIConnectionConfig::~KeplerUIConnectionConfig() {
  SharedDtor();
}

void KeplerUIConnectionConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void KeplerUIConnectionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeplerUIConnectionConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeplerUIConnectionConfig_descriptor_;
}

const KeplerUIConnectionConfig& KeplerUIConnectionConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

KeplerUIConnectionConfig* KeplerUIConnectionConfig::default_instance_ = NULL;

KeplerUIConnectionConfig* KeplerUIConnectionConfig::New() const {
  return new KeplerUIConnectionConfig;
}

void KeplerUIConnectionConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeplerUIConnectionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "KEPLERUICONNECTIONCONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeplerUIConnectionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "KEPLERUICONNECTIONCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeplerUIConnectionConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "KEPLERUICONNECTIONCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeplerUIConnectionConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "KEPLERUICONNECTIONCONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeplerUIConnectionConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeplerUIConnectionConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeplerUIConnectionConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeplerUIConnectionConfig::MergeFrom(const KeplerUIConnectionConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeplerUIConnectionConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeplerUIConnectionConfig::CopyFrom(const KeplerUIConnectionConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeplerUIConnectionConfig::IsInitialized() const {

  return true;
}

void KeplerUIConnectionConfig::Swap(KeplerUIConnectionConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeplerUIConnectionConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeplerUIConnectionConfig_descriptor_;
  metadata.reflection = KeplerUIConnectionConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SensorStatusConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SensorStatusConfig::kMsgNameFieldNumber;
const int SensorStatusConfig::kLatFieldNumber;
const int SensorStatusConfig::kLonFieldNumber;
const int SensorStatusConfig::kAltFieldNumber;
const int SensorStatusConfig::kSiteIdFieldNumber;
const int SensorStatusConfig::kSigAdFieldNumber;
const int SensorStatusConfig::kElevationFieldNumber;
const int SensorStatusConfig::kAzimuthFieldNumber;
const int SensorStatusConfig::kBeamWidthFieldNumber;
const int SensorStatusConfig::kBoreSiteFieldNumber;
#endif  // !_MSC_VER

SensorStatusConfig::SensorStatusConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorStatusConfig::InitAsDefaultInstance() {
}

SensorStatusConfig::SensorStatusConfig(const SensorStatusConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorStatusConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  lat_ = 0;
  lon_ = 0;
  alt_ = 0;
  siteid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sigad_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  elevation_ = 0;
  azimuth_ = 0;
  beamwidth_ = 0;
  boresite_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorStatusConfig::~SensorStatusConfig() {
  SharedDtor();
}

void SensorStatusConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (siteid_ != &::google::protobuf::internal::kEmptyString) {
    delete siteid_;
  }
  if (sigad_ != &::google::protobuf::internal::kEmptyString) {
    delete sigad_;
  }
  if (this != default_instance_) {
  }
}

void SensorStatusConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorStatusConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorStatusConfig_descriptor_;
}

const SensorStatusConfig& SensorStatusConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

SensorStatusConfig* SensorStatusConfig::default_instance_ = NULL;

SensorStatusConfig* SensorStatusConfig::New() const {
  return new SensorStatusConfig;
}

void SensorStatusConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    lat_ = 0;
    lon_ = 0;
    alt_ = 0;
    if (has_siteid()) {
      if (siteid_ != &::google::protobuf::internal::kEmptyString) {
        siteid_->clear();
      }
    }
    if (has_sigad()) {
      if (sigad_ != &::google::protobuf::internal::kEmptyString) {
        sigad_->clear();
      }
    }
    elevation_ = 0;
    azimuth_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    beamwidth_ = 0;
    boresite_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorStatusConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SENSORSTATUSCONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_lat;
        break;
      }

      // optional float lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_lon;
        break;
      }

      // optional float lon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_alt;
        break;
      }

      // optional float alt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_siteId;
        break;
      }

      // optional string siteId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_siteId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_siteid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->siteid().data(), this->siteid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sigAd;
        break;
      }

      // optional string sigAd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigAd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sigad()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sigad().data(), this->sigad().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_elevation;
        break;
      }

      // optional float elevation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_azimuth;
        break;
      }

      // optional float azimuth = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_beamWidth;
        break;
      }

      // optional float beamWidth = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beamWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beamwidth_)));
          set_has_beamwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_boreSite;
        break;
      }

      // optional float boreSite = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_boreSite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boresite_)));
          set_has_boresite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorStatusConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SENSORSTATUSCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional float lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lat(), output);
  }

  // optional float lon = 3;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lon(), output);
  }

  // optional float alt = 4;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->alt(), output);
  }

  // optional string siteId = 5;
  if (has_siteid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siteid().data(), this->siteid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->siteid(), output);
  }

  // optional string sigAd = 6;
  if (has_sigad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sigad().data(), this->sigad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sigad(), output);
  }

  // optional float elevation = 7;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->elevation(), output);
  }

  // optional float azimuth = 8;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->azimuth(), output);
  }

  // optional float beamWidth = 9;
  if (has_beamwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->beamwidth(), output);
  }

  // optional float boreSite = 10;
  if (has_boresite()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->boresite(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorStatusConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SENSORSTATUSCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional float lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lat(), target);
  }

  // optional float lon = 3;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lon(), target);
  }

  // optional float alt = 4;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->alt(), target);
  }

  // optional string siteId = 5;
  if (has_siteid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->siteid().data(), this->siteid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->siteid(), target);
  }

  // optional string sigAd = 6;
  if (has_sigad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sigad().data(), this->sigad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sigad(), target);
  }

  // optional float elevation = 7;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->elevation(), target);
  }

  // optional float azimuth = 8;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->azimuth(), target);
  }

  // optional float beamWidth = 9;
  if (has_beamwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->beamwidth(), target);
  }

  // optional float boreSite = 10;
  if (has_boresite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->boresite(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorStatusConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SENSORSTATUSCONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional float lat = 2;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lon = 3;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional float alt = 4;
    if (has_alt()) {
      total_size += 1 + 4;
    }

    // optional string siteId = 5;
    if (has_siteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->siteid());
    }

    // optional string sigAd = 6;
    if (has_sigad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sigad());
    }

    // optional float elevation = 7;
    if (has_elevation()) {
      total_size += 1 + 4;
    }

    // optional float azimuth = 8;
    if (has_azimuth()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float beamWidth = 9;
    if (has_beamwidth()) {
      total_size += 1 + 4;
    }

    // optional float boreSite = 10;
    if (has_boresite()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorStatusConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorStatusConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorStatusConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorStatusConfig::MergeFrom(const SensorStatusConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_siteid()) {
      set_siteid(from.siteid());
    }
    if (from.has_sigad()) {
      set_sigad(from.sigad());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_beamwidth()) {
      set_beamwidth(from.beamwidth());
    }
    if (from.has_boresite()) {
      set_boresite(from.boresite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorStatusConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorStatusConfig::CopyFrom(const SensorStatusConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorStatusConfig::IsInitialized() const {

  return true;
}

void SensorStatusConfig::Swap(SensorStatusConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(alt_, other->alt_);
    std::swap(siteid_, other->siteid_);
    std::swap(sigad_, other->sigad_);
    std::swap(elevation_, other->elevation_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(beamwidth_, other->beamwidth_);
    std::swap(boresite_, other->boresite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorStatusConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorStatusConfig_descriptor_;
  metadata.reflection = SensorStatusConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* GeoTipperConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int GeoTipperConfig::kMsgNameFieldNumber;
const int GeoTipperConfig::kSensorNameFieldNumber;
const int GeoTipperConfig::kLookBackFieldNumber;
const int GeoTipperConfig::kAutoAdjustFieldNumber;
const int GeoTipperConfig::kQueryIntervalFieldNumber;
const int GeoTipperConfig::kTipTimeoutFieldNumber;
#endif  // !_MSC_VER

GeoTipperConfig::GeoTipperConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoTipperConfig::InitAsDefaultInstance() {
}

GeoTipperConfig::GeoTipperConfig(const GeoTipperConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoTipperConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  lookback_ = GOOGLE_LONGLONG(2);
  autoadjust_ = false;
  queryinterval_ = GOOGLE_LONGLONG(1);
  tiptimeout_ = GOOGLE_LONGLONG(2);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoTipperConfig::~GeoTipperConfig() {
  SharedDtor();
}

void GeoTipperConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void GeoTipperConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoTipperConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoTipperConfig_descriptor_;
}

const GeoTipperConfig& GeoTipperConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

GeoTipperConfig* GeoTipperConfig::default_instance_ = NULL;

GeoTipperConfig* GeoTipperConfig::New() const {
  return new GeoTipperConfig;
}

void GeoTipperConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    lookback_ = GOOGLE_LONGLONG(2);
    autoadjust_ = false;
    queryinterval_ = GOOGLE_LONGLONG(1);
    tiptimeout_ = GOOGLE_LONGLONG(2);
  }
  sensorname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoTipperConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "GEOTIPPERCONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sensorName;
        break;
      }

      // repeated string sensorName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sensorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sensorname(this->sensorname_size() - 1).data(),
            this->sensorname(this->sensorname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sensorName;
        if (input->ExpectTag(24)) goto parse_lookBack;
        break;
      }

      // optional int64 lookBack = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lookBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lookback_)));
          set_has_lookback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_autoAdjust;
        break;
      }

      // optional bool autoAdjust = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoAdjust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoadjust_)));
          set_has_autoadjust();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_queryInterval;
        break;
      }

      // optional int64 queryInterval = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &queryinterval_)));
          set_has_queryinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tipTimeout;
        break;
      }

      // optional int64 tipTimeout = 6 [default = 2];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tipTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tiptimeout_)));
          set_has_tiptimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoTipperConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "GEOTIPPERCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // repeated string sensorName = 2;
  for (int i = 0; i < this->sensorname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->sensorname(i).data(), this->sensorname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sensorname(i), output);
  }

  // optional int64 lookBack = 3 [default = 2];
  if (has_lookback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lookback(), output);
  }

  // optional bool autoAdjust = 4 [default = false];
  if (has_autoadjust()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->autoadjust(), output);
  }

  // optional int64 queryInterval = 5 [default = 1];
  if (has_queryinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->queryinterval(), output);
  }

  // optional int64 tipTimeout = 6 [default = 2];
  if (has_tiptimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->tiptimeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoTipperConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "GEOTIPPERCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // repeated string sensorName = 2;
  for (int i = 0; i < this->sensorname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensorname(i).data(), this->sensorname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->sensorname(i), target);
  }

  // optional int64 lookBack = 3 [default = 2];
  if (has_lookback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lookback(), target);
  }

  // optional bool autoAdjust = 4 [default = false];
  if (has_autoadjust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->autoadjust(), target);
  }

  // optional int64 queryInterval = 5 [default = 1];
  if (has_queryinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->queryinterval(), target);
  }

  // optional int64 tipTimeout = 6 [default = 2];
  if (has_tiptimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->tiptimeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoTipperConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "GEOTIPPERCONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional int64 lookBack = 3 [default = 2];
    if (has_lookback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lookback());
    }

    // optional bool autoAdjust = 4 [default = false];
    if (has_autoadjust()) {
      total_size += 1 + 1;
    }

    // optional int64 queryInterval = 5 [default = 1];
    if (has_queryinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->queryinterval());
    }

    // optional int64 tipTimeout = 6 [default = 2];
    if (has_tiptimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tiptimeout());
    }

  }
  // repeated string sensorName = 2;
  total_size += 1 * this->sensorname_size();
  for (int i = 0; i < this->sensorname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sensorname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoTipperConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoTipperConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoTipperConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoTipperConfig::MergeFrom(const GeoTipperConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensorname_.MergeFrom(from.sensorname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_lookback()) {
      set_lookback(from.lookback());
    }
    if (from.has_autoadjust()) {
      set_autoadjust(from.autoadjust());
    }
    if (from.has_queryinterval()) {
      set_queryinterval(from.queryinterval());
    }
    if (from.has_tiptimeout()) {
      set_tiptimeout(from.tiptimeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoTipperConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoTipperConfig::CopyFrom(const GeoTipperConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoTipperConfig::IsInitialized() const {

  return true;
}

void GeoTipperConfig::Swap(GeoTipperConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    sensorname_.Swap(&other->sensorname_);
    std::swap(lookback_, other->lookback_);
    std::swap(autoadjust_, other->autoadjust_);
    std::swap(queryinterval_, other->queryinterval_);
    std::swap(tiptimeout_, other->tiptimeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoTipperConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoTipperConfig_descriptor_;
  metadata.reflection = GeoTipperConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* PreDClipperConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int PreDClipperConfig::kMsgNameFieldNumber;
const int PreDClipperConfig::kFileHostFieldNumber;
#endif  // !_MSC_VER

PreDClipperConfig::PreDClipperConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreDClipperConfig::InitAsDefaultInstance() {
}

PreDClipperConfig::PreDClipperConfig(const PreDClipperConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreDClipperConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  filehost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreDClipperConfig::~PreDClipperConfig() {
  SharedDtor();
}

void PreDClipperConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (filehost_ != &::google::protobuf::internal::kEmptyString) {
    delete filehost_;
  }
  if (this != default_instance_) {
  }
}

void PreDClipperConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreDClipperConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreDClipperConfig_descriptor_;
}

const PreDClipperConfig& PreDClipperConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

PreDClipperConfig* PreDClipperConfig::default_instance_ = NULL;

PreDClipperConfig* PreDClipperConfig::New() const {
  return new PreDClipperConfig;
}

void PreDClipperConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_filehost()) {
      if (filehost_ != &::google::protobuf::internal::kEmptyString) {
        filehost_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreDClipperConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "PREDCLIPPERCONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fileHost;
        break;
      }

      // optional string fileHost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileHost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filehost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filehost().data(), this->filehost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreDClipperConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "PREDCLIPPERCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string fileHost = 2;
  if (has_filehost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filehost().data(), this->filehost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filehost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreDClipperConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "PREDCLIPPERCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string fileHost = 2;
  if (has_filehost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filehost().data(), this->filehost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filehost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreDClipperConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "PREDCLIPPERCONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string fileHost = 2;
    if (has_filehost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filehost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreDClipperConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreDClipperConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreDClipperConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreDClipperConfig::MergeFrom(const PreDClipperConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_filehost()) {
      set_filehost(from.filehost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreDClipperConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreDClipperConfig::CopyFrom(const PreDClipperConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreDClipperConfig::IsInitialized() const {

  return true;
}

void PreDClipperConfig::Swap(PreDClipperConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(filehost_, other->filehost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreDClipperConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreDClipperConfig_descriptor_;
  metadata.reflection = PreDClipperConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* AmplifierConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int AmplifierConfig::kMsgNameFieldNumber;
const int AmplifierConfig::kNameFieldNumber;
const int AmplifierConfig::kIpFieldNumber;
const int AmplifierConfig::kPortFieldNumber;
#endif  // !_MSC_VER

AmplifierConfig::AmplifierConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AmplifierConfig::InitAsDefaultInstance() {
}

AmplifierConfig::AmplifierConfig(const AmplifierConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AmplifierConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AmplifierConfig::~AmplifierConfig() {
  SharedDtor();
}

void AmplifierConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void AmplifierConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AmplifierConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AmplifierConfig_descriptor_;
}

const AmplifierConfig& AmplifierConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

AmplifierConfig* AmplifierConfig::default_instance_ = NULL;

AmplifierConfig* AmplifierConfig::New() const {
  return new AmplifierConfig;
}

void AmplifierConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AmplifierConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "AMPLIFIERCONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AmplifierConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "AMPLIFIERCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AmplifierConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "AMPLIFIERCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AmplifierConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "AMPLIFIERCONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AmplifierConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AmplifierConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AmplifierConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AmplifierConfig::MergeFrom(const AmplifierConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AmplifierConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmplifierConfig::CopyFrom(const AmplifierConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmplifierConfig::IsInitialized() const {

  return true;
}

void AmplifierConfig::Swap(AmplifierConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(name_, other->name_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AmplifierConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AmplifierConfig_descriptor_;
  metadata.reflection = AmplifierConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SiggenConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int SiggenConfig::kMsgNameFieldNumber;
const int SiggenConfig::kTypeFieldNumber;
const int SiggenConfig::kChanFieldNumber;
const int SiggenConfig::kIpFieldNumber;
const int SiggenConfig::kFreqMHzFieldNumber;
const int SiggenConfig::kPowerdBmFieldNumber;
#endif  // !_MSC_VER

SiggenConfig::SiggenConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SiggenConfig::InitAsDefaultInstance() {
}

SiggenConfig::SiggenConfig(const SiggenConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SiggenConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chan_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  freqmhz_ = 0;
  powerdbm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SiggenConfig::~SiggenConfig() {
  SharedDtor();
}

void SiggenConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void SiggenConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiggenConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SiggenConfig_descriptor_;
}

const SiggenConfig& SiggenConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

SiggenConfig* SiggenConfig::default_instance_ = NULL;

SiggenConfig* SiggenConfig::New() const {
  return new SiggenConfig;
}

void SiggenConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    chan_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    freqmhz_ = 0;
    powerdbm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SiggenConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "SIGGENCONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chan;
        break;
      }

      // optional int32 chan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chan_)));
          set_has_chan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_freqMHz;
        break;
      }

      // optional float freqMHz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freqMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freqmhz_)));
          set_has_freqmhz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_powerdBm;
        break;
      }

      // optional float powerdBm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_powerdBm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &powerdbm_)));
          set_has_powerdbm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SiggenConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "SIGGENCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional int32 chan = 3;
  if (has_chan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chan(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional float freqMHz = 5;
  if (has_freqmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->freqmhz(), output);
  }

  // optional float powerdBm = 6;
  if (has_powerdbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->powerdbm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SiggenConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "SIGGENCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional int32 chan = 3;
  if (has_chan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chan(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional float freqMHz = 5;
  if (has_freqmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->freqmhz(), target);
  }

  // optional float powerdBm = 6;
  if (has_powerdbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->powerdbm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SiggenConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "SIGGENCONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int32 chan = 3;
    if (has_chan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chan());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional float freqMHz = 5;
    if (has_freqmhz()) {
      total_size += 1 + 4;
    }

    // optional float powerdBm = 6;
    if (has_powerdbm()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiggenConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SiggenConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SiggenConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SiggenConfig::MergeFrom(const SiggenConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_chan()) {
      set_chan(from.chan());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_freqmhz()) {
      set_freqmhz(from.freqmhz());
    }
    if (from.has_powerdbm()) {
      set_powerdbm(from.powerdbm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SiggenConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiggenConfig::CopyFrom(const SiggenConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiggenConfig::IsInitialized() const {

  return true;
}

void SiggenConfig::Swap(SiggenConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(type_, other->type_);
    std::swap(chan_, other->chan_);
    std::swap(ip_, other->ip_);
    std::swap(freqmhz_, other->freqmhz_);
    std::swap(powerdbm_, other->powerdbm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SiggenConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SiggenConfig_descriptor_;
  metadata.reflection = SiggenConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* CurrPosConfig::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int CurrPosConfig::kMsgNameFieldNumber;
const int CurrPosConfig::kHostnameFieldNumber;
const int CurrPosConfig::kPortFieldNumber;
const int CurrPosConfig::kMethodFieldNumber;
const int CurrPosConfig::kInsHostnameFieldNumber;
const int CurrPosConfig::kInsPortFieldNumber;
const int CurrPosConfig::kOrientationEnableFieldNumber;
const int CurrPosConfig::kVectorEnableFieldNumber;
const int CurrPosConfig::kSimLatFieldNumber;
const int CurrPosConfig::kSimLonFieldNumber;
const int CurrPosConfig::kSimAltFieldNumber;
#endif  // !_MSC_VER

CurrPosConfig::CurrPosConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrPosConfig::InitAsDefaultInstance() {
}

CurrPosConfig::CurrPosConfig(const CurrPosConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrPosConfig::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ins_hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ins_port_ = 0;
  orientation_enable_ = false;
  vector_enable_ = false;
  sim_lat_ = 0;
  sim_lon_ = 0;
  sim_alt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrPosConfig::~CurrPosConfig() {
  SharedDtor();
}

void CurrPosConfig::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (ins_hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete ins_hostname_;
  }
  if (this != default_instance_) {
  }
}

void CurrPosConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrPosConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrPosConfig_descriptor_;
}

const CurrPosConfig& CurrPosConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconServiceMessages_2eproto();
  return *default_instance_;
}

CurrPosConfig* CurrPosConfig::default_instance_ = NULL;

CurrPosConfig* CurrPosConfig::New() const {
  return new CurrPosConfig;
}

void CurrPosConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    port_ = 0;
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::kEmptyString) {
        method_->clear();
      }
    }
    if (has_ins_hostname()) {
      if (ins_hostname_ != &::google::protobuf::internal::kEmptyString) {
        ins_hostname_->clear();
      }
    }
    ins_port_ = 0;
    orientation_enable_ = false;
    vector_enable_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sim_lat_ = 0;
    sim_lon_ = 0;
    sim_alt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrPosConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "CURRPOSCONFIG"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hostname;
        break;
      }

      // optional string hostname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_method;
        break;
      }

      // optional string method = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ins_hostname;
        break;
      }

      // optional string ins_hostname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ins_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ins_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ins_hostname().data(), this->ins_hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ins_port;
        break;
      }

      // optional int32 ins_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ins_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_port_)));
          set_has_ins_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_orientation_enable;
        break;
      }

      // optional bool orientation_enable = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orientation_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &orientation_enable_)));
          set_has_orientation_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vector_enable;
        break;
      }

      // optional bool vector_enable = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vector_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vector_enable_)));
          set_has_vector_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_sim_lat;
        break;
      }

      // optional float sim_lat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sim_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sim_lat_)));
          set_has_sim_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_sim_lon;
        break;
      }

      // optional float sim_lon = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sim_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sim_lon_)));
          set_has_sim_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_sim_alt;
        break;
      }

      // optional float sim_alt = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sim_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sim_alt_)));
          set_has_sim_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrPosConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "CURRPOSCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hostname(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional string method = 4;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->method(), output);
  }

  // optional string ins_hostname = 5;
  if (has_ins_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ins_hostname().data(), this->ins_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ins_hostname(), output);
  }

  // optional int32 ins_port = 6;
  if (has_ins_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ins_port(), output);
  }

  // optional bool orientation_enable = 7 [default = false];
  if (has_orientation_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->orientation_enable(), output);
  }

  // optional bool vector_enable = 8 [default = false];
  if (has_vector_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->vector_enable(), output);
  }

  // optional float sim_lat = 9;
  if (has_sim_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->sim_lat(), output);
  }

  // optional float sim_lon = 10;
  if (has_sim_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->sim_lon(), output);
  }

  // optional float sim_alt = 11;
  if (has_sim_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->sim_alt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrPosConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "CURRPOSCONFIG"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional string method = 4;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->method(), target);
  }

  // optional string ins_hostname = 5;
  if (has_ins_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ins_hostname().data(), this->ins_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ins_hostname(), target);
  }

  // optional int32 ins_port = 6;
  if (has_ins_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ins_port(), target);
  }

  // optional bool orientation_enable = 7 [default = false];
  if (has_orientation_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->orientation_enable(), target);
  }

  // optional bool vector_enable = 8 [default = false];
  if (has_vector_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->vector_enable(), target);
  }

  // optional float sim_lat = 9;
  if (has_sim_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->sim_lat(), target);
  }

  // optional float sim_lon = 10;
  if (has_sim_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->sim_lon(), target);
  }

  // optional float sim_alt = 11;
  if (has_sim_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->sim_alt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrPosConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "CURRPOSCONFIG"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string hostname = 2;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string method = 4;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // optional string ins_hostname = 5;
    if (has_ins_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ins_hostname());
    }

    // optional int32 ins_port = 6;
    if (has_ins_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_port());
    }

    // optional bool orientation_enable = 7 [default = false];
    if (has_orientation_enable()) {
      total_size += 1 + 1;
    }

    // optional bool vector_enable = 8 [default = false];
    if (has_vector_enable()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float sim_lat = 9;
    if (has_sim_lat()) {
      total_size += 1 + 4;
    }

    // optional float sim_lon = 10;
    if (has_sim_lon()) {
      total_size += 1 + 4;
    }

    // optional float sim_alt = 11;
    if (has_sim_alt()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrPosConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrPosConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrPosConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrPosConfig::MergeFrom(const CurrPosConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_ins_hostname()) {
      set_ins_hostname(from.ins_hostname());
    }
    if (from.has_ins_port()) {
      set_ins_port(from.ins_port());
    }
    if (from.has_orientation_enable()) {
      set_orientation_enable(from.orientation_enable());
    }
    if (from.has_vector_enable()) {
      set_vector_enable(from.vector_enable());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sim_lat()) {
      set_sim_lat(from.sim_lat());
    }
    if (from.has_sim_lon()) {
      set_sim_lon(from.sim_lon());
    }
    if (from.has_sim_alt()) {
      set_sim_alt(from.sim_alt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrPosConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrPosConfig::CopyFrom(const CurrPosConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrPosConfig::IsInitialized() const {

  return true;
}

void CurrPosConfig::Swap(CurrPosConfig* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(hostname_, other->hostname_);
    std::swap(port_, other->port_);
    std::swap(method_, other->method_);
    std::swap(ins_hostname_, other->ins_hostname_);
    std::swap(ins_port_, other->ins_port_);
    std::swap(orientation_enable_, other->orientation_enable_);
    std::swap(vector_enable_, other->vector_enable_);
    std::swap(sim_lat_, other->sim_lat_);
    std::swap(sim_lon_, other->sim_lon_);
    std::swap(sim_alt_, other->sim_alt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrPosConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrPosConfig_descriptor_;
  metadata.reflection = CurrPosConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_svc_msg

// @@protoc_insertion_point(global_scope)
