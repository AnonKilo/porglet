// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FalconTransmitterMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FalconTransmitterMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace falcon_transmitter_msg {

namespace {

const ::google::protobuf::Descriptor* TransmitterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransmitterRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransmitterRequest_Action_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TransmitterRequest_Property_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TransmitterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransmitterResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransmitterResponse_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UniqueTXIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniqueTXIDRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UniqueTXIDRequest_Action_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UniqueTXIDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniqueTXIDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransmitterInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransmitterInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransmitterInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransmitterInfoResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FalconTransmitterMessages_2eproto() {
  protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FalconTransmitterMessages.proto");
  GOOGLE_CHECK(file != NULL);
  TransmitterRequest_descriptor_ = file->message_type(0);
  static const int TransmitterRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterRequest, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterRequest, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterRequest, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterRequest, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterRequest, value_),
  };
  TransmitterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransmitterRequest_descriptor_,
      TransmitterRequest::default_instance_,
      TransmitterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransmitterRequest));
  TransmitterRequest_Action_descriptor_ = TransmitterRequest_descriptor_->enum_type(0);
  TransmitterRequest_Property_descriptor_ = TransmitterRequest_descriptor_->enum_type(1);
  TransmitterResponse_descriptor_ = file->message_type(1);
  static const int TransmitterResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterResponse, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterResponse, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterResponse, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterResponse, value_),
  };
  TransmitterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransmitterResponse_descriptor_,
      TransmitterResponse::default_instance_,
      TransmitterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransmitterResponse));
  TransmitterResponse_Status_descriptor_ = TransmitterResponse_descriptor_->enum_type(0);
  UniqueTXIDRequest_descriptor_ = file->message_type(2);
  static const int UniqueTXIDRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueTXIDRequest, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueTXIDRequest, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueTXIDRequest, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueTXIDRequest, value_),
  };
  UniqueTXIDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniqueTXIDRequest_descriptor_,
      UniqueTXIDRequest::default_instance_,
      UniqueTXIDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueTXIDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueTXIDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniqueTXIDRequest));
  UniqueTXIDRequest_Action_descriptor_ = UniqueTXIDRequest_descriptor_->enum_type(0);
  UniqueTXIDResponse_descriptor_ = file->message_type(3);
  static const int UniqueTXIDResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueTXIDResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueTXIDResponse, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueTXIDResponse, value_),
  };
  UniqueTXIDResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniqueTXIDResponse_descriptor_,
      UniqueTXIDResponse::default_instance_,
      UniqueTXIDResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueTXIDResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueTXIDResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniqueTXIDResponse));
  TransmitterInfoRequest_descriptor_ = file->message_type(4);
  static const int TransmitterInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterInfoRequest, msgname_),
  };
  TransmitterInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransmitterInfoRequest_descriptor_,
      TransmitterInfoRequest::default_instance_,
      TransmitterInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransmitterInfoRequest));
  TransmitterInfoResponse_descriptor_ = file->message_type(5);
  static const int TransmitterInfoResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterInfoResponse, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterInfoResponse, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterInfoResponse, ntp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterInfoResponse, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterInfoResponse, pps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterInfoResponse, comms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterInfoResponse, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterInfoResponse, raid_),
  };
  TransmitterInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransmitterInfoResponse_descriptor_,
      TransmitterInfoResponse::default_instance_,
      TransmitterInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransmitterInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransmitterInfoResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FalconTransmitterMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransmitterRequest_descriptor_, &TransmitterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransmitterResponse_descriptor_, &TransmitterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniqueTXIDRequest_descriptor_, &UniqueTXIDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniqueTXIDResponse_descriptor_, &UniqueTXIDResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransmitterInfoRequest_descriptor_, &TransmitterInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransmitterInfoResponse_descriptor_, &TransmitterInfoResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FalconTransmitterMessages_2eproto() {
  delete TransmitterRequest::default_instance_;
  delete TransmitterRequest_reflection_;
  delete TransmitterRequest::_default_msgname_;
  delete TransmitterResponse::default_instance_;
  delete TransmitterResponse_reflection_;
  delete TransmitterResponse::_default_msgname_;
  delete UniqueTXIDRequest::default_instance_;
  delete UniqueTXIDRequest_reflection_;
  delete UniqueTXIDRequest::_default_msgname_;
  delete UniqueTXIDResponse::default_instance_;
  delete UniqueTXIDResponse_reflection_;
  delete UniqueTXIDResponse::_default_msgname_;
  delete TransmitterInfoRequest::default_instance_;
  delete TransmitterInfoRequest_reflection_;
  delete TransmitterInfoRequest::_default_msgname_;
  delete TransmitterInfoResponse::default_instance_;
  delete TransmitterInfoResponse_reflection_;
  delete TransmitterInfoResponse::_default_msgname_;
}

void protobuf_AddDesc_FalconTransmitterMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037FalconTransmitterMessages.proto\022\026falco"
    "n_transmitter_msg\"\312\002\n\022TransmitterRequest"
    "\022$\n\007msgName\030\001 \001(\t:\023TRANSMITTER_REQUEST\022\r"
    "\n\005resID\030\002 \001(\t\022\r\n\005appID\030\003 \001(\005\022A\n\006action\030\004"
    " \001(\01621.falcon_transmitter_msg.Transmitte"
    "rRequest.Action\022E\n\010property\030\005 \001(\01623.falc"
    "on_transmitter_msg.TransmitterRequest.Pr"
    "operty\022\r\n\005value\030\006 \001(\002\"\032\n\006Action\022\007\n\003SET\020\000"
    "\022\007\n\003GET\020\001\";\n\010Property\022\r\n\tFREQUENCY\020\000\022\r\n\t"
    "BANDWIDTH\020\001\022\010\n\004GAIN\020\002\022\007\n\003REF\020\003\"\270\002\n\023Trans"
    "mitterResponse\022%\n\007msgName\030\001 \001(\t:\024TRANSMI"
    "TTER_RESPONSE\022\r\n\005resID\030\002 \001(\t\022\r\n\005appID\030\003 "
    "\001(\005\022B\n\006status\030\004 \001(\01622.falcon_transmitter"
    "_msg.TransmitterResponse.Status\022E\n\010prope"
    "rty\030\005 \001(\01623.falcon_transmitter_msg.Trans"
    "mitterRequest.Property\022\r\n\005value\030\006 \001(\002\"B\n"
    "\006Status\022\013\n\007SUCCESS\020\000\022\010\n\004FAIL\020\001\022\020\n\014DISCON"
    "NECTED\020\002\022\017\n\013PERMISSIONS\020\003\"\272\001\n\021UniqueTXID"
    "Request\022$\n\007msgName\030\001 \001(\t:\023UNIQUE_TXID_RE"
    "QUEST\022\r\n\005resID\030\002 \001(\t\022E\n\006action\030\003 \001(\01620.f"
    "alcon_transmitter_msg.UniqueTXIDRequest."
    "Action:\003GET\022\r\n\005value\030\004 \001(\t\"\032\n\006Action\022\007\n\003"
    "SET\020\000\022\007\n\003GET\020\001\"Y\n\022UniqueTXIDResponse\022%\n\007"
    "msgName\030\001 \001(\t:\024UNIQUE_TXID_RESPONSE\022\r\n\005r"
    "esID\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\"C\n\026Transmitter"
    "InfoRequest\022)\n\007msgName\030\001 \001(\t:\030TRANSMITTE"
    "R_INFO_REQUEST\"\246\001\n\027TransmitterInfoRespon"
    "se\022*\n\007msgName\030\001 \001(\t:\031TRANSMITTER_INFO_RE"
    "SPONSE\022\r\n\005resID\030\002 \001(\t\022\013\n\003ntp\030\003 \001(\t\022\013\n\003re"
    "f\030\004 \001(\t\022\013\n\003pps\030\005 \001(\t\022\r\n\005comms\030\006 \001(\t\022\014\n\004p"
    "ing\030\007 \001(\t\022\014\n\004raid\030\010 \001(\tB\025\n\023fv.protos.kep"
    "svisor", 1246);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FalconTransmitterMessages.proto", &protobuf_RegisterTypes);
  TransmitterRequest::_default_msgname_ =
      new ::std::string("TRANSMITTER_REQUEST", 19);
  TransmitterRequest::default_instance_ = new TransmitterRequest();
  TransmitterResponse::_default_msgname_ =
      new ::std::string("TRANSMITTER_RESPONSE", 20);
  TransmitterResponse::default_instance_ = new TransmitterResponse();
  UniqueTXIDRequest::_default_msgname_ =
      new ::std::string("UNIQUE_TXID_REQUEST", 19);
  UniqueTXIDRequest::default_instance_ = new UniqueTXIDRequest();
  UniqueTXIDResponse::_default_msgname_ =
      new ::std::string("UNIQUE_TXID_RESPONSE", 20);
  UniqueTXIDResponse::default_instance_ = new UniqueTXIDResponse();
  TransmitterInfoRequest::_default_msgname_ =
      new ::std::string("TRANSMITTER_INFO_REQUEST", 24);
  TransmitterInfoRequest::default_instance_ = new TransmitterInfoRequest();
  TransmitterInfoResponse::_default_msgname_ =
      new ::std::string("TRANSMITTER_INFO_RESPONSE", 25);
  TransmitterInfoResponse::default_instance_ = new TransmitterInfoResponse();
  TransmitterRequest::default_instance_->InitAsDefaultInstance();
  TransmitterResponse::default_instance_->InitAsDefaultInstance();
  UniqueTXIDRequest::default_instance_->InitAsDefaultInstance();
  UniqueTXIDResponse::default_instance_->InitAsDefaultInstance();
  TransmitterInfoRequest::default_instance_->InitAsDefaultInstance();
  TransmitterInfoResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FalconTransmitterMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FalconTransmitterMessages_2eproto {
  StaticDescriptorInitializer_FalconTransmitterMessages_2eproto() {
    protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  }
} static_descriptor_initializer_FalconTransmitterMessages_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* TransmitterRequest_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransmitterRequest_Action_descriptor_;
}
bool TransmitterRequest_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransmitterRequest_Action TransmitterRequest::SET;
const TransmitterRequest_Action TransmitterRequest::GET;
const TransmitterRequest_Action TransmitterRequest::Action_MIN;
const TransmitterRequest_Action TransmitterRequest::Action_MAX;
const int TransmitterRequest::Action_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TransmitterRequest_Property_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransmitterRequest_Property_descriptor_;
}
bool TransmitterRequest_Property_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransmitterRequest_Property TransmitterRequest::FREQUENCY;
const TransmitterRequest_Property TransmitterRequest::BANDWIDTH;
const TransmitterRequest_Property TransmitterRequest::GAIN;
const TransmitterRequest_Property TransmitterRequest::REF;
const TransmitterRequest_Property TransmitterRequest::Property_MIN;
const TransmitterRequest_Property TransmitterRequest::Property_MAX;
const int TransmitterRequest::Property_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* TransmitterRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TransmitterRequest::kMsgNameFieldNumber;
const int TransmitterRequest::kResIDFieldNumber;
const int TransmitterRequest::kAppIDFieldNumber;
const int TransmitterRequest::kActionFieldNumber;
const int TransmitterRequest::kPropertyFieldNumber;
const int TransmitterRequest::kValueFieldNumber;
#endif  // !_MSC_VER

TransmitterRequest::TransmitterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransmitterRequest::InitAsDefaultInstance() {
}

TransmitterRequest::TransmitterRequest(const TransmitterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransmitterRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  action_ = 0;
  property_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransmitterRequest::~TransmitterRequest() {
  SharedDtor();
}

void TransmitterRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void TransmitterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransmitterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransmitterRequest_descriptor_;
}

const TransmitterRequest& TransmitterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  return *default_instance_;
}

TransmitterRequest* TransmitterRequest::default_instance_ = NULL;

TransmitterRequest* TransmitterRequest::New() const {
  return new TransmitterRequest;
}

void TransmitterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    appid_ = 0;
    action_ = 0;
    property_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransmitterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TRANSMITTER_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // optional .falcon_transmitter_msg.TransmitterRequest.Action action = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_transmitter_msg::TransmitterRequest_Action_IsValid(value)) {
            set_action(static_cast< ::falcon_transmitter_msg::TransmitterRequest_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_property;
        break;
      }

      // optional .falcon_transmitter_msg.TransmitterRequest.Property property = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_transmitter_msg::TransmitterRequest_Property_IsValid(value)) {
            set_property(static_cast< ::falcon_transmitter_msg::TransmitterRequest_Property >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_value;
        break;
      }

      // optional float value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransmitterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TRANSMITTER_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional .falcon_transmitter_msg.TransmitterRequest.Action action = 4;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // optional .falcon_transmitter_msg.TransmitterRequest.Property property = 5;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->property(), output);
  }

  // optional float value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransmitterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TRANSMITTER_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional .falcon_transmitter_msg.TransmitterRequest.Action action = 4;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // optional .falcon_transmitter_msg.TransmitterRequest.Property property = 5;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->property(), target);
  }

  // optional float value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransmitterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TRANSMITTER_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_transmitter_msg.TransmitterRequest.Action action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .falcon_transmitter_msg.TransmitterRequest.Property property = 5;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->property());
    }

    // optional float value = 6;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransmitterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransmitterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransmitterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransmitterRequest::MergeFrom(const TransmitterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransmitterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmitterRequest::CopyFrom(const TransmitterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitterRequest::IsInitialized() const {

  return true;
}

void TransmitterRequest::Swap(TransmitterRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(appid_, other->appid_);
    std::swap(action_, other->action_);
    std::swap(property_, other->property_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransmitterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransmitterRequest_descriptor_;
  metadata.reflection = TransmitterRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TransmitterResponse_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransmitterResponse_Status_descriptor_;
}
bool TransmitterResponse_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransmitterResponse_Status TransmitterResponse::SUCCESS;
const TransmitterResponse_Status TransmitterResponse::FAIL;
const TransmitterResponse_Status TransmitterResponse::DISCONNECTED;
const TransmitterResponse_Status TransmitterResponse::PERMISSIONS;
const TransmitterResponse_Status TransmitterResponse::Status_MIN;
const TransmitterResponse_Status TransmitterResponse::Status_MAX;
const int TransmitterResponse::Status_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* TransmitterResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TransmitterResponse::kMsgNameFieldNumber;
const int TransmitterResponse::kResIDFieldNumber;
const int TransmitterResponse::kAppIDFieldNumber;
const int TransmitterResponse::kStatusFieldNumber;
const int TransmitterResponse::kPropertyFieldNumber;
const int TransmitterResponse::kValueFieldNumber;
#endif  // !_MSC_VER

TransmitterResponse::TransmitterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransmitterResponse::InitAsDefaultInstance() {
}

TransmitterResponse::TransmitterResponse(const TransmitterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransmitterResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0;
  status_ = 0;
  property_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransmitterResponse::~TransmitterResponse() {
  SharedDtor();
}

void TransmitterResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (this != default_instance_) {
  }
}

void TransmitterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransmitterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransmitterResponse_descriptor_;
}

const TransmitterResponse& TransmitterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  return *default_instance_;
}

TransmitterResponse* TransmitterResponse::default_instance_ = NULL;

TransmitterResponse* TransmitterResponse::New() const {
  return new TransmitterResponse;
}

void TransmitterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    appid_ = 0;
    status_ = 0;
    property_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransmitterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TRANSMITTER_RESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appID;
        break;
      }

      // optional int32 appID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .falcon_transmitter_msg.TransmitterResponse.Status status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_transmitter_msg::TransmitterResponse_Status_IsValid(value)) {
            set_status(static_cast< ::falcon_transmitter_msg::TransmitterResponse_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_property;
        break;
      }

      // optional .falcon_transmitter_msg.TransmitterRequest.Property property = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_transmitter_msg::TransmitterRequest_Property_IsValid(value)) {
            set_property(static_cast< ::falcon_transmitter_msg::TransmitterRequest_Property >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_value;
        break;
      }

      // optional float value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransmitterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TRANSMITTER_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional .falcon_transmitter_msg.TransmitterResponse.Status status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional .falcon_transmitter_msg.TransmitterRequest.Property property = 5;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->property(), output);
  }

  // optional float value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransmitterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TRANSMITTER_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional int32 appID = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional .falcon_transmitter_msg.TransmitterResponse.Status status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional .falcon_transmitter_msg.TransmitterRequest.Property property = 5;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->property(), target);
  }

  // optional float value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransmitterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TRANSMITTER_RESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional int32 appID = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional .falcon_transmitter_msg.TransmitterResponse.Status status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .falcon_transmitter_msg.TransmitterRequest.Property property = 5;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->property());
    }

    // optional float value = 6;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransmitterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransmitterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransmitterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransmitterResponse::MergeFrom(const TransmitterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransmitterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmitterResponse::CopyFrom(const TransmitterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitterResponse::IsInitialized() const {

  return true;
}

void TransmitterResponse::Swap(TransmitterResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(appid_, other->appid_);
    std::swap(status_, other->status_);
    std::swap(property_, other->property_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransmitterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransmitterResponse_descriptor_;
  metadata.reflection = TransmitterResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UniqueTXIDRequest_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniqueTXIDRequest_Action_descriptor_;
}
bool UniqueTXIDRequest_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UniqueTXIDRequest_Action UniqueTXIDRequest::SET;
const UniqueTXIDRequest_Action UniqueTXIDRequest::GET;
const UniqueTXIDRequest_Action UniqueTXIDRequest::Action_MIN;
const UniqueTXIDRequest_Action UniqueTXIDRequest::Action_MAX;
const int UniqueTXIDRequest::Action_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* UniqueTXIDRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UniqueTXIDRequest::kMsgNameFieldNumber;
const int UniqueTXIDRequest::kResIDFieldNumber;
const int UniqueTXIDRequest::kActionFieldNumber;
const int UniqueTXIDRequest::kValueFieldNumber;
#endif  // !_MSC_VER

UniqueTXIDRequest::UniqueTXIDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UniqueTXIDRequest::InitAsDefaultInstance() {
}

UniqueTXIDRequest::UniqueTXIDRequest(const UniqueTXIDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UniqueTXIDRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_ = 1;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniqueTXIDRequest::~UniqueTXIDRequest() {
  SharedDtor();
}

void UniqueTXIDRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void UniqueTXIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniqueTXIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniqueTXIDRequest_descriptor_;
}

const UniqueTXIDRequest& UniqueTXIDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  return *default_instance_;
}

UniqueTXIDRequest* UniqueTXIDRequest::default_instance_ = NULL;

UniqueTXIDRequest* UniqueTXIDRequest::New() const {
  return new UniqueTXIDRequest;
}

void UniqueTXIDRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    action_ = 1;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniqueTXIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UNIQUE_TXID_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional .falcon_transmitter_msg.UniqueTXIDRequest.Action action = 3 [default = GET];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::falcon_transmitter_msg::UniqueTXIDRequest_Action_IsValid(value)) {
            set_action(static_cast< ::falcon_transmitter_msg::UniqueTXIDRequest_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional string value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UniqueTXIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UNIQUE_TXID_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional .falcon_transmitter_msg.UniqueTXIDRequest.Action action = 3 [default = GET];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UniqueTXIDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UNIQUE_TXID_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional .falcon_transmitter_msg.UniqueTXIDRequest.Action action = 3 [default = GET];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UniqueTXIDRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UNIQUE_TXID_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional .falcon_transmitter_msg.UniqueTXIDRequest.Action action = 3 [default = GET];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional string value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniqueTXIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniqueTXIDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniqueTXIDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniqueTXIDRequest::MergeFrom(const UniqueTXIDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniqueTXIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueTXIDRequest::CopyFrom(const UniqueTXIDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueTXIDRequest::IsInitialized() const {

  return true;
}

void UniqueTXIDRequest::Swap(UniqueTXIDRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(action_, other->action_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniqueTXIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniqueTXIDRequest_descriptor_;
  metadata.reflection = UniqueTXIDRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UniqueTXIDResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int UniqueTXIDResponse::kMsgNameFieldNumber;
const int UniqueTXIDResponse::kResIDFieldNumber;
const int UniqueTXIDResponse::kValueFieldNumber;
#endif  // !_MSC_VER

UniqueTXIDResponse::UniqueTXIDResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UniqueTXIDResponse::InitAsDefaultInstance() {
}

UniqueTXIDResponse::UniqueTXIDResponse(const UniqueTXIDResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UniqueTXIDResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniqueTXIDResponse::~UniqueTXIDResponse() {
  SharedDtor();
}

void UniqueTXIDResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void UniqueTXIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniqueTXIDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniqueTXIDResponse_descriptor_;
}

const UniqueTXIDResponse& UniqueTXIDResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  return *default_instance_;
}

UniqueTXIDResponse* UniqueTXIDResponse::default_instance_ = NULL;

UniqueTXIDResponse* UniqueTXIDResponse::New() const {
  return new UniqueTXIDResponse;
}

void UniqueTXIDResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniqueTXIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "UNIQUE_TXID_RESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UniqueTXIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "UNIQUE_TXID_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UniqueTXIDResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "UNIQUE_TXID_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UniqueTXIDResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "UNIQUE_TXID_RESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniqueTXIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniqueTXIDResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniqueTXIDResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniqueTXIDResponse::MergeFrom(const UniqueTXIDResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniqueTXIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueTXIDResponse::CopyFrom(const UniqueTXIDResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueTXIDResponse::IsInitialized() const {

  return true;
}

void UniqueTXIDResponse::Swap(UniqueTXIDResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniqueTXIDResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniqueTXIDResponse_descriptor_;
  metadata.reflection = UniqueTXIDResponse_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TransmitterInfoRequest::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TransmitterInfoRequest::kMsgNameFieldNumber;
#endif  // !_MSC_VER

TransmitterInfoRequest::TransmitterInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransmitterInfoRequest::InitAsDefaultInstance() {
}

TransmitterInfoRequest::TransmitterInfoRequest(const TransmitterInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransmitterInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransmitterInfoRequest::~TransmitterInfoRequest() {
  SharedDtor();
}

void TransmitterInfoRequest::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (this != default_instance_) {
  }
}

void TransmitterInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransmitterInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransmitterInfoRequest_descriptor_;
}

const TransmitterInfoRequest& TransmitterInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  return *default_instance_;
}

TransmitterInfoRequest* TransmitterInfoRequest::default_instance_ = NULL;

TransmitterInfoRequest* TransmitterInfoRequest::New() const {
  return new TransmitterInfoRequest;
}

void TransmitterInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransmitterInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TRANSMITTER_INFO_REQUEST"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransmitterInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TRANSMITTER_INFO_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransmitterInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TRANSMITTER_INFO_REQUEST"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransmitterInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TRANSMITTER_INFO_REQUEST"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransmitterInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransmitterInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransmitterInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransmitterInfoRequest::MergeFrom(const TransmitterInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransmitterInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmitterInfoRequest::CopyFrom(const TransmitterInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitterInfoRequest::IsInitialized() const {

  return true;
}

void TransmitterInfoRequest::Swap(TransmitterInfoRequest* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransmitterInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransmitterInfoRequest_descriptor_;
  metadata.reflection = TransmitterInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TransmitterInfoResponse::_default_msgname_ = NULL;
#ifndef _MSC_VER
const int TransmitterInfoResponse::kMsgNameFieldNumber;
const int TransmitterInfoResponse::kResIDFieldNumber;
const int TransmitterInfoResponse::kNtpFieldNumber;
const int TransmitterInfoResponse::kRefFieldNumber;
const int TransmitterInfoResponse::kPpsFieldNumber;
const int TransmitterInfoResponse::kCommsFieldNumber;
const int TransmitterInfoResponse::kPingFieldNumber;
const int TransmitterInfoResponse::kRaidFieldNumber;
#endif  // !_MSC_VER

TransmitterInfoResponse::TransmitterInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransmitterInfoResponse::InitAsDefaultInstance() {
}

TransmitterInfoResponse::TransmitterInfoResponse(const TransmitterInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransmitterInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  msgname_ = const_cast< ::std::string*>(_default_msgname_);
  resid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ntp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pps_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comms_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ping_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  raid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransmitterInfoResponse::~TransmitterInfoResponse() {
  SharedDtor();
}

void TransmitterInfoResponse::SharedDtor() {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (resid_ != &::google::protobuf::internal::kEmptyString) {
    delete resid_;
  }
  if (ntp_ != &::google::protobuf::internal::kEmptyString) {
    delete ntp_;
  }
  if (ref_ != &::google::protobuf::internal::kEmptyString) {
    delete ref_;
  }
  if (pps_ != &::google::protobuf::internal::kEmptyString) {
    delete pps_;
  }
  if (comms_ != &::google::protobuf::internal::kEmptyString) {
    delete comms_;
  }
  if (ping_ != &::google::protobuf::internal::kEmptyString) {
    delete ping_;
  }
  if (raid_ != &::google::protobuf::internal::kEmptyString) {
    delete raid_;
  }
  if (this != default_instance_) {
  }
}

void TransmitterInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransmitterInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransmitterInfoResponse_descriptor_;
}

const TransmitterInfoResponse& TransmitterInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FalconTransmitterMessages_2eproto();
  return *default_instance_;
}

TransmitterInfoResponse* TransmitterInfoResponse::default_instance_ = NULL;

TransmitterInfoResponse* TransmitterInfoResponse::New() const {
  return new TransmitterInfoResponse;
}

void TransmitterInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgname()) {
      if (msgname_ != _default_msgname_) {
        msgname_->assign(*_default_msgname_);
      }
    }
    if (has_resid()) {
      if (resid_ != &::google::protobuf::internal::kEmptyString) {
        resid_->clear();
      }
    }
    if (has_ntp()) {
      if (ntp_ != &::google::protobuf::internal::kEmptyString) {
        ntp_->clear();
      }
    }
    if (has_ref()) {
      if (ref_ != &::google::protobuf::internal::kEmptyString) {
        ref_->clear();
      }
    }
    if (has_pps()) {
      if (pps_ != &::google::protobuf::internal::kEmptyString) {
        pps_->clear();
      }
    }
    if (has_comms()) {
      if (comms_ != &::google::protobuf::internal::kEmptyString) {
        comms_->clear();
      }
    }
    if (has_ping()) {
      if (ping_ != &::google::protobuf::internal::kEmptyString) {
        ping_->clear();
      }
    }
    if (has_raid()) {
      if (raid_ != &::google::protobuf::internal::kEmptyString) {
        raid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransmitterInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgName = 1 [default = "TRANSMITTER_INFO_RESPONSE"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resID;
        break;
      }

      // optional string resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resid().data(), this->resid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ntp;
        break;
      }

      // optional string ntp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ntp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ntp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ntp().data(), this->ntp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ref;
        break;
      }

      // optional string ref = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pps;
        break;
      }

      // optional string pps = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pps().data(), this->pps().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_comms;
        break;
      }

      // optional string comms = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comms().data(), this->comms().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ping;
        break;
      }

      // optional string ping = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ping()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ping().data(), this->ping().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_raid;
        break;
      }

      // optional string raid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raid().data(), this->raid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransmitterInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgName = 1 [default = "TRANSMITTER_INFO_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgname(), output);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resid(), output);
  }

  // optional string ntp = 3;
  if (has_ntp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ntp().data(), this->ntp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ntp(), output);
  }

  // optional string ref = 4;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ref(), output);
  }

  // optional string pps = 5;
  if (has_pps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pps().data(), this->pps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pps(), output);
  }

  // optional string comms = 6;
  if (has_comms()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comms().data(), this->comms().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->comms(), output);
  }

  // optional string ping = 7;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ping().data(), this->ping().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ping(), output);
  }

  // optional string raid = 8;
  if (has_raid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raid().data(), this->raid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->raid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransmitterInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgName = 1 [default = "TRANSMITTER_INFO_RESPONSE"];
  if (has_msgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgname(), target);
  }

  // optional string resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resid().data(), this->resid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resid(), target);
  }

  // optional string ntp = 3;
  if (has_ntp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ntp().data(), this->ntp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ntp(), target);
  }

  // optional string ref = 4;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ref(), target);
  }

  // optional string pps = 5;
  if (has_pps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pps().data(), this->pps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pps(), target);
  }

  // optional string comms = 6;
  if (has_comms()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comms().data(), this->comms().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->comms(), target);
  }

  // optional string ping = 7;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ping().data(), this->ping().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ping(), target);
  }

  // optional string raid = 8;
  if (has_raid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raid().data(), this->raid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->raid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransmitterInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgName = 1 [default = "TRANSMITTER_INFO_RESPONSE"];
    if (has_msgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgname());
    }

    // optional string resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resid());
    }

    // optional string ntp = 3;
    if (has_ntp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ntp());
    }

    // optional string ref = 4;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

    // optional string pps = 5;
    if (has_pps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pps());
    }

    // optional string comms = 6;
    if (has_comms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comms());
    }

    // optional string ping = 7;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ping());
    }

    // optional string raid = 8;
    if (has_raid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransmitterInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransmitterInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransmitterInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransmitterInfoResponse::MergeFrom(const TransmitterInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgname()) {
      set_msgname(from.msgname());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_ntp()) {
      set_ntp(from.ntp());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_pps()) {
      set_pps(from.pps());
    }
    if (from.has_comms()) {
      set_comms(from.comms());
    }
    if (from.has_ping()) {
      set_ping(from.ping());
    }
    if (from.has_raid()) {
      set_raid(from.raid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransmitterInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmitterInfoResponse::CopyFrom(const TransmitterInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitterInfoResponse::IsInitialized() const {

  return true;
}

void TransmitterInfoResponse::Swap(TransmitterInfoResponse* other) {
  if (other != this) {
    std::swap(msgname_, other->msgname_);
    std::swap(resid_, other->resid_);
    std::swap(ntp_, other->ntp_);
    std::swap(ref_, other->ref_);
    std::swap(pps_, other->pps_);
    std::swap(comms_, other->comms_);
    std::swap(ping_, other->ping_);
    std::swap(raid_, other->raid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransmitterInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransmitterInfoResponse_descriptor_;
  metadata.reflection = TransmitterInfoResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace falcon_transmitter_msg

// @@protoc_insertion_point(global_scope)
