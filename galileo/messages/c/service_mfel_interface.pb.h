// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_mfel_interface.proto

#ifndef PROTOBUF_service_5fmfel_5finterface_2eproto__INCLUDED
#define PROTOBUF_service_5fmfel_5finterface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace service_mfel_interface {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_5fmfel_5finterface_2eproto();
void protobuf_AssignDesc_service_5fmfel_5finterface_2eproto();
void protobuf_ShutdownFile_service_5fmfel_5finterface_2eproto();

class mfelInterfaceConfig;

// ===================================================================

class mfelInterfaceConfig : public ::google::protobuf::Message {
 public:
  mfelInterfaceConfig();
  virtual ~mfelInterfaceConfig();

  mfelInterfaceConfig(const mfelInterfaceConfig& from);

  inline mfelInterfaceConfig& operator=(const mfelInterfaceConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mfelInterfaceConfig& default_instance();

  void Swap(mfelInterfaceConfig* other);

  // implements Message ----------------------------------------------

  mfelInterfaceConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mfelInterfaceConfig& from);
  void MergeFrom(const mfelInterfaceConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "service_mfel_interface.mfelInterfaceConfig"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 portNum = 2 [default = 2702];
  inline bool has_portnum() const;
  inline void clear_portnum();
  static const int kPortNumFieldNumber = 2;
  inline ::google::protobuf::int32 portnum() const;
  inline void set_portnum(::google::protobuf::int32 value);

  // optional string mfelHostName = 3 [default = "mfel01.realm.cfe.external"];
  inline bool has_mfelhostname() const;
  inline void clear_mfelhostname();
  static const int kMfelHostNameFieldNumber = 3;
  inline const ::std::string& mfelhostname() const;
  inline void set_mfelhostname(const ::std::string& value);
  inline void set_mfelhostname(const char* value);
  inline void set_mfelhostname(const char* value, size_t size);
  inline ::std::string* mutable_mfelhostname();
  inline ::std::string* release_mfelhostname();
  inline void set_allocated_mfelhostname(::std::string* mfelhostname);

  // @@protoc_insertion_point(class_scope:service_mfel_interface.mfelInterfaceConfig)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_portnum();
  inline void clear_has_portnum();
  inline void set_has_mfelhostname();
  inline void clear_has_mfelhostname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::std::string* mfelhostname_;
  static ::std::string* _default_mfelhostname_;
  ::google::protobuf::int32 portnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_service_5fmfel_5finterface_2eproto();
  friend void protobuf_AssignDesc_service_5fmfel_5finterface_2eproto();
  friend void protobuf_ShutdownFile_service_5fmfel_5finterface_2eproto();

  void InitAsDefaultInstance();
  static mfelInterfaceConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// mfelInterfaceConfig

// optional string msgName = 1 [default = "service_mfel_interface.mfelInterfaceConfig"];
inline bool mfelInterfaceConfig::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mfelInterfaceConfig::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mfelInterfaceConfig::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mfelInterfaceConfig::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& mfelInterfaceConfig::msgname() const {
  return *msgname_;
}
inline void mfelInterfaceConfig::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void mfelInterfaceConfig::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void mfelInterfaceConfig::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mfelInterfaceConfig::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* mfelInterfaceConfig::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void mfelInterfaceConfig::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 portNum = 2 [default = 2702];
inline bool mfelInterfaceConfig::has_portnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mfelInterfaceConfig::set_has_portnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mfelInterfaceConfig::clear_has_portnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mfelInterfaceConfig::clear_portnum() {
  portnum_ = 2702;
  clear_has_portnum();
}
inline ::google::protobuf::int32 mfelInterfaceConfig::portnum() const {
  return portnum_;
}
inline void mfelInterfaceConfig::set_portnum(::google::protobuf::int32 value) {
  set_has_portnum();
  portnum_ = value;
}

// optional string mfelHostName = 3 [default = "mfel01.realm.cfe.external"];
inline bool mfelInterfaceConfig::has_mfelhostname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mfelInterfaceConfig::set_has_mfelhostname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mfelInterfaceConfig::clear_has_mfelhostname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mfelInterfaceConfig::clear_mfelhostname() {
  if (mfelhostname_ != _default_mfelhostname_) {
    mfelhostname_->assign(*_default_mfelhostname_);
  }
  clear_has_mfelhostname();
}
inline const ::std::string& mfelInterfaceConfig::mfelhostname() const {
  return *mfelhostname_;
}
inline void mfelInterfaceConfig::set_mfelhostname(const ::std::string& value) {
  set_has_mfelhostname();
  if (mfelhostname_ == _default_mfelhostname_) {
    mfelhostname_ = new ::std::string;
  }
  mfelhostname_->assign(value);
}
inline void mfelInterfaceConfig::set_mfelhostname(const char* value) {
  set_has_mfelhostname();
  if (mfelhostname_ == _default_mfelhostname_) {
    mfelhostname_ = new ::std::string;
  }
  mfelhostname_->assign(value);
}
inline void mfelInterfaceConfig::set_mfelhostname(const char* value, size_t size) {
  set_has_mfelhostname();
  if (mfelhostname_ == _default_mfelhostname_) {
    mfelhostname_ = new ::std::string;
  }
  mfelhostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mfelInterfaceConfig::mutable_mfelhostname() {
  set_has_mfelhostname();
  if (mfelhostname_ == _default_mfelhostname_) {
    mfelhostname_ = new ::std::string(*_default_mfelhostname_);
  }
  return mfelhostname_;
}
inline ::std::string* mfelInterfaceConfig::release_mfelhostname() {
  clear_has_mfelhostname();
  if (mfelhostname_ == _default_mfelhostname_) {
    return NULL;
  } else {
    ::std::string* temp = mfelhostname_;
    mfelhostname_ = const_cast< ::std::string*>(_default_mfelhostname_);
    return temp;
  }
}
inline void mfelInterfaceConfig::set_allocated_mfelhostname(::std::string* mfelhostname) {
  if (mfelhostname_ != _default_mfelhostname_) {
    delete mfelhostname_;
  }
  if (mfelhostname) {
    set_has_mfelhostname();
    mfelhostname_ = mfelhostname;
  } else {
    clear_has_mfelhostname();
    mfelhostname_ = const_cast< ::std::string*>(_default_mfelhostname_);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_mfel_interface

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_5fmfel_5finterface_2eproto__INCLUDED
