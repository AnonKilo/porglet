// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_rxdataplane.proto

#ifndef PROTOBUF_service_5frxdataplane_2eproto__INCLUDED
#define PROTOBUF_service_5frxdataplane_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace service_rxdataplane {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_5frxdataplane_2eproto();
void protobuf_AssignDesc_service_5frxdataplane_2eproto();
void protobuf_ShutdownFile_service_5frxdataplane_2eproto();

class RXDataPlaneConfig;
class GPPConfigInfo;
class IQIngestFilter;

enum implementationTypes {
  GPP = 1,
  GPU = 2,
  FPGA = 3
};
bool implementationTypes_IsValid(int value);
const implementationTypes implementationTypes_MIN = GPP;
const implementationTypes implementationTypes_MAX = FPGA;
const int implementationTypes_ARRAYSIZE = implementationTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* implementationTypes_descriptor();
inline const ::std::string& implementationTypes_Name(implementationTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    implementationTypes_descriptor(), value);
}
inline bool implementationTypes_Parse(
    const ::std::string& name, implementationTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<implementationTypes>(
    implementationTypes_descriptor(), name, value);
}
// ===================================================================

class RXDataPlaneConfig : public ::google::protobuf::Message {
 public:
  RXDataPlaneConfig();
  virtual ~RXDataPlaneConfig();

  RXDataPlaneConfig(const RXDataPlaneConfig& from);

  inline RXDataPlaneConfig& operator=(const RXDataPlaneConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RXDataPlaneConfig& default_instance();

  void Swap(RXDataPlaneConfig* other);

  // implements Message ----------------------------------------------

  RXDataPlaneConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RXDataPlaneConfig& from);
  void MergeFrom(const RXDataPlaneConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "service_rxdataplane.RXDataPlaneConfig"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // repeated string products = 2;
  inline int products_size() const;
  inline void clear_products();
  static const int kProductsFieldNumber = 2;
  inline const ::std::string& products(int index) const;
  inline ::std::string* mutable_products(int index);
  inline void set_products(int index, const ::std::string& value);
  inline void set_products(int index, const char* value);
  inline void set_products(int index, const char* value, size_t size);
  inline ::std::string* add_products();
  inline void add_products(const ::std::string& value);
  inline void add_products(const char* value);
  inline void add_products(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& products() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_products();

  // @@protoc_insertion_point(class_scope:service_rxdataplane.RXDataPlaneConfig)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> products_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_service_5frxdataplane_2eproto();
  friend void protobuf_AssignDesc_service_5frxdataplane_2eproto();
  friend void protobuf_ShutdownFile_service_5frxdataplane_2eproto();

  void InitAsDefaultInstance();
  static RXDataPlaneConfig* default_instance_;
};
// -------------------------------------------------------------------

class GPPConfigInfo : public ::google::protobuf::Message {
 public:
  GPPConfigInfo();
  virtual ~GPPConfigInfo();

  GPPConfigInfo(const GPPConfigInfo& from);

  inline GPPConfigInfo& operator=(const GPPConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPPConfigInfo& default_instance();

  void Swap(GPPConfigInfo* other);

  // implements Message ----------------------------------------------

  GPPConfigInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPPConfigInfo& from);
  void MergeFrom(const GPPConfigInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "service_rxdataplane.GPPConfig"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional int32 threads = 2 [default = 2];
  inline bool has_threads() const;
  inline void clear_threads();
  static const int kThreadsFieldNumber = 2;
  inline ::google::protobuf::int32 threads() const;
  inline void set_threads(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:service_rxdataplane.GPPConfigInfo)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_threads();
  inline void clear_has_threads();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  ::google::protobuf::int32 threads_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_service_5frxdataplane_2eproto();
  friend void protobuf_AssignDesc_service_5frxdataplane_2eproto();
  friend void protobuf_ShutdownFile_service_5frxdataplane_2eproto();

  void InitAsDefaultInstance();
  static GPPConfigInfo* default_instance_;
};
// -------------------------------------------------------------------

class IQIngestFilter : public ::google::protobuf::Message {
 public:
  IQIngestFilter();
  virtual ~IQIngestFilter();

  IQIngestFilter(const IQIngestFilter& from);

  inline IQIngestFilter& operator=(const IQIngestFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IQIngestFilter& default_instance();

  void Swap(IQIngestFilter* other);

  // implements Message ----------------------------------------------

  IQIngestFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IQIngestFilter& from);
  void MergeFrom(const IQIngestFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgName = 1 [default = "service_rxdataplane.IQIngestFilter"];
  inline bool has_msgname() const;
  inline void clear_msgname();
  static const int kMsgNameFieldNumber = 1;
  inline const ::std::string& msgname() const;
  inline void set_msgname(const ::std::string& value);
  inline void set_msgname(const char* value);
  inline void set_msgname(const char* value, size_t size);
  inline ::std::string* mutable_msgname();
  inline ::std::string* release_msgname();
  inline void set_allocated_msgname(::std::string* msgname);

  // optional double minFreqHz = 2 [default = 30000000];
  inline bool has_minfreqhz() const;
  inline void clear_minfreqhz();
  static const int kMinFreqHzFieldNumber = 2;
  inline double minfreqhz() const;
  inline void set_minfreqhz(double value);

  // optional double maxFreqHz = 3 [default = 6000000000];
  inline bool has_maxfreqhz() const;
  inline void clear_maxfreqhz();
  static const int kMaxFreqHzFieldNumber = 3;
  inline double maxfreqhz() const;
  inline void set_maxfreqhz(double value);

  // optional double fixedSampleRate = 4 [default = 0];
  inline bool has_fixedsamplerate() const;
  inline void clear_fixedsamplerate();
  static const int kFixedSampleRateFieldNumber = 4;
  inline double fixedsamplerate() const;
  inline void set_fixedsamplerate(double value);

  // @@protoc_insertion_point(class_scope:service_rxdataplane.IQIngestFilter)
 private:
  inline void set_has_msgname();
  inline void clear_has_msgname();
  inline void set_has_minfreqhz();
  inline void clear_has_minfreqhz();
  inline void set_has_maxfreqhz();
  inline void clear_has_maxfreqhz();
  inline void set_has_fixedsamplerate();
  inline void clear_has_fixedsamplerate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgname_;
  static ::std::string* _default_msgname_;
  double minfreqhz_;
  double maxfreqhz_;
  double fixedsamplerate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_service_5frxdataplane_2eproto();
  friend void protobuf_AssignDesc_service_5frxdataplane_2eproto();
  friend void protobuf_ShutdownFile_service_5frxdataplane_2eproto();

  void InitAsDefaultInstance();
  static IQIngestFilter* default_instance_;
};
// ===================================================================


// ===================================================================

// RXDataPlaneConfig

// optional string msgName = 1 [default = "service_rxdataplane.RXDataPlaneConfig"];
inline bool RXDataPlaneConfig::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RXDataPlaneConfig::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RXDataPlaneConfig::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RXDataPlaneConfig::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& RXDataPlaneConfig::msgname() const {
  return *msgname_;
}
inline void RXDataPlaneConfig::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void RXDataPlaneConfig::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void RXDataPlaneConfig::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RXDataPlaneConfig::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* RXDataPlaneConfig::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void RXDataPlaneConfig::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// repeated string products = 2;
inline int RXDataPlaneConfig::products_size() const {
  return products_.size();
}
inline void RXDataPlaneConfig::clear_products() {
  products_.Clear();
}
inline const ::std::string& RXDataPlaneConfig::products(int index) const {
  return products_.Get(index);
}
inline ::std::string* RXDataPlaneConfig::mutable_products(int index) {
  return products_.Mutable(index);
}
inline void RXDataPlaneConfig::set_products(int index, const ::std::string& value) {
  products_.Mutable(index)->assign(value);
}
inline void RXDataPlaneConfig::set_products(int index, const char* value) {
  products_.Mutable(index)->assign(value);
}
inline void RXDataPlaneConfig::set_products(int index, const char* value, size_t size) {
  products_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RXDataPlaneConfig::add_products() {
  return products_.Add();
}
inline void RXDataPlaneConfig::add_products(const ::std::string& value) {
  products_.Add()->assign(value);
}
inline void RXDataPlaneConfig::add_products(const char* value) {
  products_.Add()->assign(value);
}
inline void RXDataPlaneConfig::add_products(const char* value, size_t size) {
  products_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RXDataPlaneConfig::products() const {
  return products_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RXDataPlaneConfig::mutable_products() {
  return &products_;
}

// -------------------------------------------------------------------

// GPPConfigInfo

// optional string msgName = 1 [default = "service_rxdataplane.GPPConfig"];
inline bool GPPConfigInfo::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPPConfigInfo::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPPConfigInfo::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPPConfigInfo::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& GPPConfigInfo::msgname() const {
  return *msgname_;
}
inline void GPPConfigInfo::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void GPPConfigInfo::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void GPPConfigInfo::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GPPConfigInfo::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* GPPConfigInfo::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void GPPConfigInfo::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional int32 threads = 2 [default = 2];
inline bool GPPConfigInfo::has_threads() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GPPConfigInfo::set_has_threads() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GPPConfigInfo::clear_has_threads() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GPPConfigInfo::clear_threads() {
  threads_ = 2;
  clear_has_threads();
}
inline ::google::protobuf::int32 GPPConfigInfo::threads() const {
  return threads_;
}
inline void GPPConfigInfo::set_threads(::google::protobuf::int32 value) {
  set_has_threads();
  threads_ = value;
}

// -------------------------------------------------------------------

// IQIngestFilter

// optional string msgName = 1 [default = "service_rxdataplane.IQIngestFilter"];
inline bool IQIngestFilter::has_msgname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IQIngestFilter::set_has_msgname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IQIngestFilter::clear_has_msgname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IQIngestFilter::clear_msgname() {
  if (msgname_ != _default_msgname_) {
    msgname_->assign(*_default_msgname_);
  }
  clear_has_msgname();
}
inline const ::std::string& IQIngestFilter::msgname() const {
  return *msgname_;
}
inline void IQIngestFilter::set_msgname(const ::std::string& value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void IQIngestFilter::set_msgname(const char* value) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(value);
}
inline void IQIngestFilter::set_msgname(const char* value, size_t size) {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string;
  }
  msgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IQIngestFilter::mutable_msgname() {
  set_has_msgname();
  if (msgname_ == _default_msgname_) {
    msgname_ = new ::std::string(*_default_msgname_);
  }
  return msgname_;
}
inline ::std::string* IQIngestFilter::release_msgname() {
  clear_has_msgname();
  if (msgname_ == _default_msgname_) {
    return NULL;
  } else {
    ::std::string* temp = msgname_;
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
    return temp;
  }
}
inline void IQIngestFilter::set_allocated_msgname(::std::string* msgname) {
  if (msgname_ != _default_msgname_) {
    delete msgname_;
  }
  if (msgname) {
    set_has_msgname();
    msgname_ = msgname;
  } else {
    clear_has_msgname();
    msgname_ = const_cast< ::std::string*>(_default_msgname_);
  }
}

// optional double minFreqHz = 2 [default = 30000000];
inline bool IQIngestFilter::has_minfreqhz() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IQIngestFilter::set_has_minfreqhz() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IQIngestFilter::clear_has_minfreqhz() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IQIngestFilter::clear_minfreqhz() {
  minfreqhz_ = 30000000;
  clear_has_minfreqhz();
}
inline double IQIngestFilter::minfreqhz() const {
  return minfreqhz_;
}
inline void IQIngestFilter::set_minfreqhz(double value) {
  set_has_minfreqhz();
  minfreqhz_ = value;
}

// optional double maxFreqHz = 3 [default = 6000000000];
inline bool IQIngestFilter::has_maxfreqhz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IQIngestFilter::set_has_maxfreqhz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IQIngestFilter::clear_has_maxfreqhz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IQIngestFilter::clear_maxfreqhz() {
  maxfreqhz_ = 6000000000;
  clear_has_maxfreqhz();
}
inline double IQIngestFilter::maxfreqhz() const {
  return maxfreqhz_;
}
inline void IQIngestFilter::set_maxfreqhz(double value) {
  set_has_maxfreqhz();
  maxfreqhz_ = value;
}

// optional double fixedSampleRate = 4 [default = 0];
inline bool IQIngestFilter::has_fixedsamplerate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IQIngestFilter::set_has_fixedsamplerate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IQIngestFilter::clear_has_fixedsamplerate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IQIngestFilter::clear_fixedsamplerate() {
  fixedsamplerate_ = 0;
  clear_has_fixedsamplerate();
}
inline double IQIngestFilter::fixedsamplerate() const {
  return fixedsamplerate_;
}
inline void IQIngestFilter::set_fixedsamplerate(double value) {
  set_has_fixedsamplerate();
  fixedsamplerate_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service_rxdataplane

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::service_rxdataplane::implementationTypes>() {
  return ::service_rxdataplane::implementationTypes_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_5frxdataplane_2eproto__INCLUDED
